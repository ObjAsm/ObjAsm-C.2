;Include file created by h2incX, Version C.01.00, 11/10/2020 17:39
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: 'D:\OA_Dev\Projects\32\h2IncX\Header_10.0.17763.0\SetupAPI.h', last modified: 01/10/2017 02:00
;Creation parameters: 

ifndef _INC_SETUPAPI
  _INC_SETUPAPI equ <>
  if _MSC_VER gt 1000
  endif
  include winapifamily.inc
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if Defined(_MSC_VER) and (_MSC_VER ge 1200)
    endif
    if  not Defined(_SETUPAPI_)
      WINSETUPAPI equ <DECLSPEC_IMPORT>
    else
      WINSETUPAPI equ <>
    endif
    ifndef _SETUPAPI_VER
      if Defined(_WIN32_WINNT) and ( not Defined(_WIN32_WINDOWS) or (_WIN32_WINNT lt _WIN32_WINDOWS))
        _SETUPAPI_VER equ <_WIN32_WINNT>
      elseif Defined(_WIN32_WINDOWS)
        if _WIN32_WINDOWS ge 0490h
          _SETUPAPI_VER equ <_WIN32_WINNT_WIN2K>
        elseif _WIN32_WINDOWS ge 0410h
          _SETUPAPI_VER equ 0410h
        else
          _SETUPAPI_VER equ <_WIN32_WINNT_NT4>
        endif
      else
        _SETUPAPI_VER equ <_WIN32_WINNT_WINXP>
      endif
    endif
    ifndef __LPGUID_DEFINED__
      __LPGUID_DEFINED__ equ <>
      LPGUID typedef ptr GUID
    endif
    include spapidef.inc
    include commctrl.inc
    include devpropdef.inc
    if Defined(_WIN64)
      include pshpack8.inc
    else
      include pshpack1.inc
    endif
    ifdef __cplusplus
      ;[...]
    endif
    LINE_LEN equ 256
    MAX_INF_STRING_LENGTH equ 4096
    MAX_INF_SECTION_NAME_LENGTH equ 255
    MAX_TITLE_LEN equ 60
    MAX_INSTRUCTION_LEN equ 256
    MAX_LABEL_LEN equ 30
    MAX_SERVICE_NAME_LEN equ 256
    MAX_SUBTITLE_LEN equ 256
    SP_MAX_MACHINENAME_LENGTH equ (MAX_PATH + 3)
    HINF typedef PVOID
    INFCONTEXT struct
      Inf PVOID ?
      CurrentInf PVOID ?
      Section UINT ?
      Line UINT ?
    INFCONTEXT ends
    _INFCONTEXT typedef INFCONTEXT
    PINFCONTEXT typedef ptr INFCONTEXT
    
    SP_INF_INFORMATION struct
      InfStyle DWORD ?
      InfCount DWORD ?
      VersionData BYTE ANYSIZE_ARRAY dup (?)
    SP_INF_INFORMATION ends
    _SP_INF_INFORMATION typedef SP_INF_INFORMATION
    PSP_INF_INFORMATION typedef ptr SP_INF_INFORMATION
    
    SP_ALTPLATFORM_INFO_V3 struct
      cbSize DWORD ?
      Platform DWORD ?
      MajorVersion DWORD ?
      MinorVersion DWORD ?
      ProcessorArchitecture WORD ?
      union
        Reserved WORD ?
        Flags WORD ?
      ends
      FirstValidatedMajorVersion DWORD ?
      FirstValidatedMinorVersion DWORD ?
      ProductType BYTE ?
      SuiteMask WORD ?
      BuildNumber DWORD ?
    SP_ALTPLATFORM_INFO_V3 ends
    _SP_ALTPLATFORM_INFO_V3 typedef SP_ALTPLATFORM_INFO_V3
    PSP_ALTPLATFORM_INFO_V3 typedef ptr SP_ALTPLATFORM_INFO_V3
    
    SP_ALTPLATFORM_INFO_V2 struct
      cbSize DWORD ?
      Platform DWORD ?
      MajorVersion DWORD ?
      MinorVersion DWORD ?
      ProcessorArchitecture WORD ?
      union
        Reserved WORD ?
        Flags WORD ?
      ends
      FirstValidatedMajorVersion DWORD ?
      FirstValidatedMinorVersion DWORD ?
    SP_ALTPLATFORM_INFO_V2 ends
    _SP_ALTPLATFORM_INFO_V2 typedef SP_ALTPLATFORM_INFO_V2
    PSP_ALTPLATFORM_INFO_V2 typedef ptr SP_ALTPLATFORM_INFO_V2
    
    SP_ALTPLATFORM_INFO_V1 struct
      cbSize DWORD ?
      Platform DWORD ?
      MajorVersion DWORD ?
      MinorVersion DWORD ?
      ProcessorArchitecture WORD ?
      Reserved WORD ?
    SP_ALTPLATFORM_INFO_V1 ends
    _SP_ALTPLATFORM_INFO_V1 typedef SP_ALTPLATFORM_INFO_V1
    PSP_ALTPLATFORM_INFO_V1 typedef ptr SP_ALTPLATFORM_INFO_V1
    
    if USE_SP_ALTPLATFORM_INFO_V1 or (_SETUPAPI_VER lt _WIN32_WINNT_WINXP)
      SP_ALTPLATFORM_INFO typedef SP_ALTPLATFORM_INFO_V1
      PSP_ALTPLATFORM_INFO typedef PSP_ALTPLATFORM_INFO_V1
    elseif USE_SP_ALTPLATFORM_INFO_V3 and (NTDDI_VERSION ge NTDDI_WIN10_RS1)
      SP_ALTPLATFORM_INFO typedef SP_ALTPLATFORM_INFO_V3
      PSP_ALTPLATFORM_INFO typedef PSP_ALTPLATFORM_INFO_V3
    else
      SP_ALTPLATFORM_INFO typedef SP_ALTPLATFORM_INFO_V2
      PSP_ALTPLATFORM_INFO typedef PSP_ALTPLATFORM_INFO_V2
    endif
    if _WIN32_WINNT ge _WIN32_WINNT_WINXP
      SP_ALTPLATFORM_FLAGS_VERSION_RANGE equ 0001h
    endif
    if NTDDI_VERSION ge NTDDI_WIN10_RS1
      SP_ALTPLATFORM_FLAGS_SUITE_MASK equ 0002h
    endif
    SP_ORIGINAL_FILE_INFO_A struct
      cbSize DWORD ?
      OriginalInfName CHAR MAX_PATH dup (?)
      OriginalCatalogName CHAR MAX_PATH dup (?)
    SP_ORIGINAL_FILE_INFO_A ends
    _SP_ORIGINAL_FILE_INFO_A typedef SP_ORIGINAL_FILE_INFO_A
    PSP_ORIGINAL_FILE_INFO_A typedef ptr SP_ORIGINAL_FILE_INFO_A
    
    SP_ORIGINAL_FILE_INFO_W struct
      cbSize DWORD ?
      OriginalInfName WCHAR MAX_PATH dup (?)
      OriginalCatalogName WCHAR MAX_PATH dup (?)
    SP_ORIGINAL_FILE_INFO_W ends
    _SP_ORIGINAL_FILE_INFO_W typedef SP_ORIGINAL_FILE_INFO_W
    PSP_ORIGINAL_FILE_INFO_W typedef ptr SP_ORIGINAL_FILE_INFO_W
    
    ifdef UNICODE
      SP_ORIGINAL_FILE_INFO typedef SP_ORIGINAL_FILE_INFO_W
      PSP_ORIGINAL_FILE_INFO typedef PSP_ORIGINAL_FILE_INFO_W
    else
      SP_ORIGINAL_FILE_INFO typedef SP_ORIGINAL_FILE_INFO_A
      PSP_ORIGINAL_FILE_INFO typedef PSP_ORIGINAL_FILE_INFO_A
    endif
    INF_STYLE_NONE equ 00000000h
    INF_STYLE_OLDNT equ 00000001h
    INF_STYLE_WIN4 equ 00000002h
    INF_STYLE_CACHE_ENABLE equ 00000010h
    INF_STYLE_CACHE_DISABLE equ 00000020h
    if _SETUPAPI_VER ge _WIN32_WINNT_WS03
      INF_STYLE_CACHE_IGNORE equ 00000040h
    endif
    DIRID_ABSOLUTE equ -1
    DIRID_ABSOLUTE_16BIT equ 0ffffh
    DIRID_NULL equ 0
    DIRID_SRCPATH equ 1
    DIRID_WINDOWS equ 10
    DIRID_SYSTEM equ 11
    DIRID_DRIVERS equ 12
    DIRID_IOSUBSYS equ <DIRID_DRIVERS>
    DIRID_DRIVER_STORE equ 13
    DIRID_INF equ 17
    DIRID_HELP equ 18
    DIRID_FONTS equ 20
    DIRID_VIEWERS equ 21
    DIRID_COLOR equ 23
    DIRID_APPS equ 24
    DIRID_SHARED equ 25
    DIRID_BOOT equ 30
    DIRID_SYSTEM16 equ 50
    DIRID_SPOOL equ 51
    DIRID_SPOOLDRIVERS equ 52
    DIRID_USERPROFILE equ 53
    DIRID_LOADER equ 54
    DIRID_PRINTPROCESSOR equ 55
    DIRID_DEFAULT equ <DIRID_SYSTEM>
    DIRID_COMMON_STARTMENU equ 16406
    DIRID_COMMON_PROGRAMS equ 16407
    DIRID_COMMON_STARTUP equ 16408
    DIRID_COMMON_DESKTOPDIRECTORY equ 16409
    DIRID_COMMON_FAVORITES equ 16415
    DIRID_COMMON_APPDATA equ 16419
    DIRID_PROGRAM_FILES equ 16422
    DIRID_SYSTEM_X86 equ 16425
    DIRID_PROGRAM_FILES_X86 equ 16426
    DIRID_PROGRAM_FILES_COMMON equ 16427
    DIRID_PROGRAM_FILES_COMMONX86 equ 16428
    DIRID_COMMON_TEMPLATES equ 16429
    DIRID_COMMON_DOCUMENTS equ 16430
    DIRID_USER equ 8000h
    TYPE_PSP_FILE_CALLBACK_A typedef proto WIN_STD_CALL_CONV :PVOID, :UINT, :UINT_PTR, :UINT_PTR
    PSP_FILE_CALLBACK_A typedef ptr TYPE_PSP_FILE_CALLBACK_A
    TYPE_PSP_FILE_CALLBACK_W typedef proto WIN_STD_CALL_CONV :PVOID, :UINT, :UINT_PTR, :UINT_PTR
    PSP_FILE_CALLBACK_W typedef ptr TYPE_PSP_FILE_CALLBACK_W
    ifdef UNICODE
      PSP_FILE_CALLBACK equ <PSP_FILE_CALLBACK_W>
    else
      PSP_FILE_CALLBACK equ <PSP_FILE_CALLBACK_A>
    endif
    SPFILENOTIFY_STARTQUEUE equ 00000001h
    SPFILENOTIFY_ENDQUEUE equ 00000002h
    SPFILENOTIFY_STARTSUBQUEUE equ 00000003h
    SPFILENOTIFY_ENDSUBQUEUE equ 00000004h
    SPFILENOTIFY_STARTDELETE equ 00000005h
    SPFILENOTIFY_ENDDELETE equ 00000006h
    SPFILENOTIFY_DELETEERROR equ 00000007h
    SPFILENOTIFY_STARTRENAME equ 00000008h
    SPFILENOTIFY_ENDRENAME equ 00000009h
    SPFILENOTIFY_RENAMEERROR equ 0000000ah
    SPFILENOTIFY_STARTCOPY equ 0000000bh
    SPFILENOTIFY_ENDCOPY equ 0000000ch
    SPFILENOTIFY_COPYERROR equ 0000000dh
    SPFILENOTIFY_NEEDMEDIA equ 0000000eh
    SPFILENOTIFY_QUEUESCAN equ 0000000fh
    SPFILENOTIFY_CABINETINFO equ 00000010h
    SPFILENOTIFY_FILEINCABINET equ 00000011h
    SPFILENOTIFY_NEEDNEWCABINET equ 00000012h
    SPFILENOTIFY_FILEEXTRACTED equ 00000013h
    SPFILENOTIFY_FILEOPDELAYED equ 00000014h
    SPFILENOTIFY_STARTBACKUP equ 00000015h
    SPFILENOTIFY_BACKUPERROR equ 00000016h
    SPFILENOTIFY_ENDBACKUP equ 00000017h
    SPFILENOTIFY_QUEUESCAN_EX equ 00000018h
    SPFILENOTIFY_STARTREGISTRATION equ 00000019h
    SPFILENOTIFY_ENDREGISTRATION equ 00000020h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SPFILENOTIFY_QUEUESCAN_SIGNERINFO equ 00000040h
    endif
    SPFILENOTIFY_LANGMISMATCH equ 00010000h
    SPFILENOTIFY_TARGETEXISTS equ 00020000h
    SPFILENOTIFY_TARGETNEWER equ 00040000h
    FILEOP_COPY equ 0
    FILEOP_RENAME equ 1
    FILEOP_DELETE equ 2
    FILEOP_BACKUP equ 3
    FILEOP_ABORT equ 0
    FILEOP_DOIT equ 1
    FILEOP_SKIP equ 2
    FILEOP_RETRY equ <FILEOP_DOIT>
    FILEOP_NEWPATH equ 4
    COPYFLG_WARN_IF_SKIP equ 00000001h
    COPYFLG_NOSKIP equ 00000002h
    COPYFLG_NOVERSIONCHECK equ 00000004h
    COPYFLG_FORCE_FILE_IN_USE equ 00000008h
    COPYFLG_NO_OVERWRITE equ 00000010h
    COPYFLG_NO_VERSION_DIALOG equ 00000020h
    COPYFLG_OVERWRITE_OLDER_ONLY equ 00000040h
    COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE equ 00000100h
    COPYFLG_REPLACEONLY equ 00000400h
    COPYFLG_NODECOMP equ 00000800h
    COPYFLG_REPLACE_BOOT_FILE equ 00001000h
    COPYFLG_NOPRUNE equ 00002000h
    COPYFLG_IN_USE_TRY_RENAME equ 00004000h
    DELFLG_IN_USE equ 00000001h
    DELFLG_IN_USE1 equ 00010000h
    FILEPATHS_A struct
      Target PCSTR ?
      Source PCSTR ?
      Win32Error UINT ?
      Flags DWORD ?
    FILEPATHS_A ends
    _FILEPATHS_A typedef FILEPATHS_A
    PFILEPATHS_A typedef ptr FILEPATHS_A
    
    FILEPATHS_W struct
      Target PCWSTR ?
      Source PCWSTR ?
      Win32Error UINT ?
      Flags DWORD ?
    FILEPATHS_W ends
    _FILEPATHS_W typedef FILEPATHS_W
    PFILEPATHS_W typedef ptr FILEPATHS_W
    
    ifdef UNICODE
      FILEPATHS typedef FILEPATHS_W
      PFILEPATHS typedef PFILEPATHS_W
    else
      FILEPATHS typedef FILEPATHS_A
      PFILEPATHS typedef PFILEPATHS_A
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FILEPATHS_SIGNERINFO_A struct
        Target PCSTR ?
        Source PCSTR ?
        Win32Error UINT ?
        Flags DWORD ?
        DigitalSigner PCSTR ?
        Version PCSTR ?
        CatalogFile PCSTR ?
      FILEPATHS_SIGNERINFO_A ends
      _FILEPATHS_SIGNERINFO_A typedef FILEPATHS_SIGNERINFO_A
      PFILEPATHS_SIGNERINFO_A typedef ptr FILEPATHS_SIGNERINFO_A
      
      FILEPATHS_SIGNERINFO_W struct
        Target PCWSTR ?
        Source PCWSTR ?
        Win32Error UINT ?
        Flags DWORD ?
        DigitalSigner PCWSTR ?
        Version PCWSTR ?
        CatalogFile PCWSTR ?
      FILEPATHS_SIGNERINFO_W ends
      _FILEPATHS_SIGNERINFO_W typedef FILEPATHS_SIGNERINFO_W
      PFILEPATHS_SIGNERINFO_W typedef ptr FILEPATHS_SIGNERINFO_W
      
      ifdef UNICODE
        FILEPATHS_SIGNERINFO typedef FILEPATHS_SIGNERINFO_W
        PFILEPATHS_SIGNERINFO typedef PFILEPATHS_SIGNERINFO_W
      else
        FILEPATHS_SIGNERINFO typedef FILEPATHS_SIGNERINFO_A
        PFILEPATHS_SIGNERINFO typedef PFILEPATHS_SIGNERINFO_A
      endif
    endif
    SOURCE_MEDIA_A struct
      Reserved PCSTR ?
      Tagfile PCSTR ?
      Description PCSTR ?
      SourcePath PCSTR ?
      SourceFile PCSTR ?
      Flags DWORD ?
    SOURCE_MEDIA_A ends
    _SOURCE_MEDIA_A typedef SOURCE_MEDIA_A
    PSOURCE_MEDIA_A typedef ptr SOURCE_MEDIA_A
    
    SOURCE_MEDIA_W struct
      Reserved PCWSTR ?
      Tagfile PCWSTR ?
      Description PCWSTR ?
      SourcePath PCWSTR ?
      SourceFile PCWSTR ?
      Flags DWORD ?
    SOURCE_MEDIA_W ends
    _SOURCE_MEDIA_W typedef SOURCE_MEDIA_W
    PSOURCE_MEDIA_W typedef ptr SOURCE_MEDIA_W
    
    ifdef UNICODE
      SOURCE_MEDIA typedef SOURCE_MEDIA_W
      PSOURCE_MEDIA typedef PSOURCE_MEDIA_W
    else
      SOURCE_MEDIA typedef SOURCE_MEDIA_A
      PSOURCE_MEDIA typedef PSOURCE_MEDIA_A
    endif
    CABINET_INFO_A struct
      CabinetPath PCSTR ?
      CabinetFile PCSTR ?
      DiskName PCSTR ?
      SetId USHORT ?
      CabinetNumber USHORT ?
    CABINET_INFO_A ends
    _CABINET_INFO_A typedef CABINET_INFO_A
    PCABINET_INFO_A typedef ptr CABINET_INFO_A
    
    CABINET_INFO_W struct
      CabinetPath PCWSTR ?
      CabinetFile PCWSTR ?
      DiskName PCWSTR ?
      SetId USHORT ?
      CabinetNumber USHORT ?
    CABINET_INFO_W ends
    _CABINET_INFO_W typedef CABINET_INFO_W
    PCABINET_INFO_W typedef ptr CABINET_INFO_W
    
    ifdef UNICODE
      CABINET_INFO typedef CABINET_INFO_W
      PCABINET_INFO typedef PCABINET_INFO_W
    else
      CABINET_INFO typedef CABINET_INFO_A
      PCABINET_INFO typedef PCABINET_INFO_A
    endif
    FILE_IN_CABINET_INFO_A struct
      NameInCabinet PCSTR ?
      FileSize DWORD ?
      Win32Error DWORD ?
      DosDate WORD ?
      DosTime WORD ?
      DosAttribs WORD ?
      FullTargetName CHAR MAX_PATH dup (?)
    FILE_IN_CABINET_INFO_A ends
    _FILE_IN_CABINET_INFO_A typedef FILE_IN_CABINET_INFO_A
    PFILE_IN_CABINET_INFO_A typedef ptr FILE_IN_CABINET_INFO_A
    
    FILE_IN_CABINET_INFO_W struct
      NameInCabinet PCWSTR ?
      FileSize DWORD ?
      Win32Error DWORD ?
      DosDate WORD ?
      DosTime WORD ?
      DosAttribs WORD ?
      FullTargetName WCHAR MAX_PATH dup (?)
    FILE_IN_CABINET_INFO_W ends
    _FILE_IN_CABINET_INFO_W typedef FILE_IN_CABINET_INFO_W
    PFILE_IN_CABINET_INFO_W typedef ptr FILE_IN_CABINET_INFO_W
    
    ifdef UNICODE
      FILE_IN_CABINET_INFO typedef FILE_IN_CABINET_INFO_W
      PFILE_IN_CABINET_INFO typedef PFILE_IN_CABINET_INFO_W
    else
      FILE_IN_CABINET_INFO typedef FILE_IN_CABINET_INFO_A
      PFILE_IN_CABINET_INFO typedef PFILE_IN_CABINET_INFO_A
    endif
    SP_REGISTER_CONTROL_STATUSA struct
      cbSize DWORD ?
      FileName PCSTR ?
      Win32Error DWORD ?
      FailureCode DWORD ?
    SP_REGISTER_CONTROL_STATUSA ends
    _SP_REGISTER_CONTROL_STATUSA typedef SP_REGISTER_CONTROL_STATUSA
    PSP_REGISTER_CONTROL_STATUSA typedef ptr SP_REGISTER_CONTROL_STATUSA
    
    SP_REGISTER_CONTROL_STATUSW struct
      cbSize DWORD ?
      FileName PCWSTR ?
      Win32Error DWORD ?
      FailureCode DWORD ?
    SP_REGISTER_CONTROL_STATUSW ends
    _SP_REGISTER_CONTROL_STATUSW typedef SP_REGISTER_CONTROL_STATUSW
    PSP_REGISTER_CONTROL_STATUSW typedef ptr SP_REGISTER_CONTROL_STATUSW
    
    ifdef UNICODE
      SP_REGISTER_CONTROL_STATUS typedef SP_REGISTER_CONTROL_STATUSW
      PSP_REGISTER_CONTROL_STATUS typedef PSP_REGISTER_CONTROL_STATUSW
    else
      SP_REGISTER_CONTROL_STATUS typedef SP_REGISTER_CONTROL_STATUSA
      PSP_REGISTER_CONTROL_STATUS typedef PSP_REGISTER_CONTROL_STATUSA
    endif
    SPREG_SUCCESS equ 00000000h
    SPREG_LOADLIBRARY equ 00000001h
    SPREG_GETPROCADDR equ 00000002h
    SPREG_REGSVR equ 00000003h
    SPREG_DLLINSTALL equ 00000004h
    SPREG_TIMEOUT equ 00000005h
    SPREG_UNKNOWN equ 0FFFFFFFFh
    HSPFILEQ typedef PVOID
    SP_FILE_COPY_PARAMS_A struct
      cbSize DWORD ?
      QueueHandle HSPFILEQ ?
      SourceRootPath PCSTR ?
      SourcePath PCSTR ?
      SourceFilename PCSTR ?
      SourceDescription PCSTR ?
      SourceTagfile PCSTR ?
      TargetDirectory PCSTR ?
      TargetFilename PCSTR ?
      CopyStyle DWORD ?
      LayoutInf HINF ?
      SecurityDescriptor PCSTR ?
    SP_FILE_COPY_PARAMS_A ends
    _SP_FILE_COPY_PARAMS_A typedef SP_FILE_COPY_PARAMS_A
    PSP_FILE_COPY_PARAMS_A typedef ptr SP_FILE_COPY_PARAMS_A
    
    SP_FILE_COPY_PARAMS_W struct
      cbSize DWORD ?
      QueueHandle HSPFILEQ ?
      SourceRootPath PCWSTR ?
      SourcePath PCWSTR ?
      SourceFilename PCWSTR ?
      SourceDescription PCWSTR ?
      SourceTagfile PCWSTR ?
      TargetDirectory PCWSTR ?
      TargetFilename PCWSTR ?
      CopyStyle DWORD ?
      LayoutInf HINF ?
      SecurityDescriptor PCWSTR ?
    SP_FILE_COPY_PARAMS_W ends
    _SP_FILE_COPY_PARAMS_W typedef SP_FILE_COPY_PARAMS_W
    PSP_FILE_COPY_PARAMS_W typedef ptr SP_FILE_COPY_PARAMS_W
    
    ifdef UNICODE
      SP_FILE_COPY_PARAMS typedef SP_FILE_COPY_PARAMS_W
      PSP_FILE_COPY_PARAMS typedef PSP_FILE_COPY_PARAMS_W
    else
      SP_FILE_COPY_PARAMS typedef SP_FILE_COPY_PARAMS_A
      PSP_FILE_COPY_PARAMS typedef PSP_FILE_COPY_PARAMS_A
    endif
    HDSKSPC typedef PVOID
    HDEVINFO typedef PVOID
    SP_DEVINFO_DATA struct
      cbSize DWORD ?
      ClassGuid GUID <>
      DevInst DWORD ?
      Reserved ULONG_PTR ?
    SP_DEVINFO_DATA ends
    _SP_DEVINFO_DATA typedef SP_DEVINFO_DATA
    PSP_DEVINFO_DATA typedef ptr SP_DEVINFO_DATA
    
    SP_DEVICE_INTERFACE_DATA struct
      cbSize DWORD ?
      InterfaceClassGuid GUID <>
      Flags DWORD ?
      Reserved ULONG_PTR ?
    SP_DEVICE_INTERFACE_DATA ends
    _SP_DEVICE_INTERFACE_DATA typedef SP_DEVICE_INTERFACE_DATA
    PSP_DEVICE_INTERFACE_DATA typedef ptr SP_DEVICE_INTERFACE_DATA
    
    SPINT_ACTIVE equ 00000001h
    SPINT_DEFAULT equ 00000002h
    SPINT_REMOVED equ 00000004h
    SP_INTERFACE_DEVICE_DATA typedef SP_DEVICE_INTERFACE_DATA
    PSP_INTERFACE_DEVICE_DATA typedef PSP_DEVICE_INTERFACE_DATA
    SPID_ACTIVE equ <SPINT_ACTIVE>
    SPID_DEFAULT equ <SPINT_DEFAULT>
    SPID_REMOVED equ <SPINT_REMOVED>
    SP_DEVICE_INTERFACE_DETAIL_DATA_A struct
      cbSize DWORD ?
      DevicePath CHAR ANYSIZE_ARRAY dup (?)
    SP_DEVICE_INTERFACE_DETAIL_DATA_A ends
    _SP_DEVICE_INTERFACE_DETAIL_DATA_A typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A
    PSP_DEVICE_INTERFACE_DETAIL_DATA_A typedef ptr SP_DEVICE_INTERFACE_DETAIL_DATA_A
    
    SP_DEVICE_INTERFACE_DETAIL_DATA_W struct
      cbSize DWORD ?
      DevicePath WCHAR ANYSIZE_ARRAY dup (?)
    SP_DEVICE_INTERFACE_DETAIL_DATA_W ends
    _SP_DEVICE_INTERFACE_DETAIL_DATA_W typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W
    PSP_DEVICE_INTERFACE_DETAIL_DATA_W typedef ptr SP_DEVICE_INTERFACE_DETAIL_DATA_W
    
    ifdef UNICODE
      SP_DEVICE_INTERFACE_DETAIL_DATA typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W
      PSP_DEVICE_INTERFACE_DETAIL_DATA typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W
    else
      SP_DEVICE_INTERFACE_DETAIL_DATA typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A
      PSP_DEVICE_INTERFACE_DETAIL_DATA typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A
    endif
    SP_INTERFACE_DEVICE_DETAIL_DATA_W typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W
    PSP_INTERFACE_DEVICE_DETAIL_DATA_W typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W
    SP_INTERFACE_DEVICE_DETAIL_DATA_A typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A
    PSP_INTERFACE_DEVICE_DETAIL_DATA_A typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A
    ifdef UNICODE
      SP_INTERFACE_DEVICE_DETAIL_DATA typedef SP_INTERFACE_DEVICE_DETAIL_DATA_W
      PSP_INTERFACE_DEVICE_DETAIL_DATA typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_W
    else
      SP_INTERFACE_DEVICE_DETAIL_DATA typedef SP_INTERFACE_DEVICE_DETAIL_DATA_A
      PSP_INTERFACE_DEVICE_DETAIL_DATA typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_A
    endif
    SP_DEVINFO_LIST_DETAIL_DATA_A struct
      cbSize DWORD ?
      ClassGuid GUID <>
      RemoteMachineHandle HANDLE ?
      RemoteMachineName CHAR SP_MAX_MACHINENAME_LENGTH dup (?)
    SP_DEVINFO_LIST_DETAIL_DATA_A ends
    _SP_DEVINFO_LIST_DETAIL_DATA_A typedef SP_DEVINFO_LIST_DETAIL_DATA_A
    PSP_DEVINFO_LIST_DETAIL_DATA_A typedef ptr SP_DEVINFO_LIST_DETAIL_DATA_A
    
    SP_DEVINFO_LIST_DETAIL_DATA_W struct
      cbSize DWORD ?
      ClassGuid GUID <>
      RemoteMachineHandle HANDLE ?
      RemoteMachineName WCHAR SP_MAX_MACHINENAME_LENGTH dup (?)
    SP_DEVINFO_LIST_DETAIL_DATA_W ends
    _SP_DEVINFO_LIST_DETAIL_DATA_W typedef SP_DEVINFO_LIST_DETAIL_DATA_W
    PSP_DEVINFO_LIST_DETAIL_DATA_W typedef ptr SP_DEVINFO_LIST_DETAIL_DATA_W
    
    ifdef UNICODE
      SP_DEVINFO_LIST_DETAIL_DATA typedef SP_DEVINFO_LIST_DETAIL_DATA_W
      PSP_DEVINFO_LIST_DETAIL_DATA typedef PSP_DEVINFO_LIST_DETAIL_DATA_W
    else
      SP_DEVINFO_LIST_DETAIL_DATA typedef SP_DEVINFO_LIST_DETAIL_DATA_A
      PSP_DEVINFO_LIST_DETAIL_DATA typedef PSP_DEVINFO_LIST_DETAIL_DATA_A
    endif
    DIF_SELECTDEVICE equ 00000001h
    DIF_INSTALLDEVICE equ 00000002h
    DIF_ASSIGNRESOURCES equ 00000003h
    DIF_PROPERTIES equ 00000004h
    DIF_REMOVE equ 00000005h
    DIF_FIRSTTIMESETUP equ 00000006h
    DIF_FOUNDDEVICE equ 00000007h
    DIF_SELECTCLASSDRIVERS equ 00000008h
    DIF_VALIDATECLASSDRIVERS equ 00000009h
    DIF_INSTALLCLASSDRIVERS equ 0000000Ah
    DIF_CALCDISKSPACE equ 0000000Bh
    DIF_DESTROYPRIVATEDATA equ 0000000Ch
    DIF_VALIDATEDRIVER equ 0000000Dh
    DIF_DETECT equ 0000000Fh
    DIF_INSTALLWIZARD equ 00000010h
    DIF_DESTROYWIZARDDATA equ 00000011h
    DIF_PROPERTYCHANGE equ 00000012h
    DIF_ENABLECLASS equ 00000013h
    DIF_DETECTVERIFY equ 00000014h
    DIF_INSTALLDEVICEFILES equ 00000015h
    DIF_UNREMOVE equ 00000016h
    DIF_SELECTBESTCOMPATDRV equ 00000017h
    DIF_ALLOW_INSTALL equ 00000018h
    DIF_REGISTERDEVICE equ 00000019h
    DIF_NEWDEVICEWIZARD_PRESELECT equ 0000001Ah
    DIF_NEWDEVICEWIZARD_SELECT equ 0000001Bh
    DIF_NEWDEVICEWIZARD_PREANALYZE equ 0000001Ch
    DIF_NEWDEVICEWIZARD_POSTANALYZE equ 0000001Dh
    DIF_NEWDEVICEWIZARD_FINISHINSTALL equ 0000001Eh
    DIF_UNUSED1 equ 0000001Fh
    DIF_INSTALLINTERFACES equ 00000020h
    DIF_DETECTCANCEL equ 00000021h
    DIF_REGISTER_COINSTALLERS equ 00000022h
    DIF_ADDPROPERTYPAGE_ADVANCED equ 00000023h
    DIF_ADDPROPERTYPAGE_BASIC equ 00000024h
    DIF_RESERVED1 equ 00000025h
    DIF_TROUBLESHOOTER equ 00000026h
    DIF_POWERMESSAGEWAKE equ 00000027h
    DIF_ADDREMOTEPROPERTYPAGE_ADVANCED equ 00000028h
    DIF_UPDATEDRIVER_UI equ 00000029h
    DIF_FINISHINSTALL_ACTION equ 0000002Ah
    DIF_RESERVED2 equ 00000030h
    DIF_MOVEDEVICE equ 0000000Eh
    DI_FUNCTION typedef UINT
    SP_DEVINSTALL_PARAMS_A struct
      cbSize DWORD ?
      Flags DWORD ?
      FlagsEx DWORD ?
      hwndParent HWND ?
      InstallMsgHandler PSP_FILE_CALLBACK ?
      InstallMsgHandlerContext PVOID ?
      FileQueue HSPFILEQ ?
      ClassInstallReserved ULONG_PTR ?
      Reserved DWORD ?
      DriverPath CHAR MAX_PATH dup (?)
    SP_DEVINSTALL_PARAMS_A ends
    _SP_DEVINSTALL_PARAMS_A typedef SP_DEVINSTALL_PARAMS_A
    PSP_DEVINSTALL_PARAMS_A typedef ptr SP_DEVINSTALL_PARAMS_A
    
    SP_DEVINSTALL_PARAMS_W struct
      cbSize DWORD ?
      Flags DWORD ?
      FlagsEx DWORD ?
      hwndParent HWND ?
      InstallMsgHandler PSP_FILE_CALLBACK ?
      InstallMsgHandlerContext PVOID ?
      FileQueue HSPFILEQ ?
      ClassInstallReserved ULONG_PTR ?
      Reserved DWORD ?
      DriverPath WCHAR MAX_PATH dup (?)
    SP_DEVINSTALL_PARAMS_W ends
    _SP_DEVINSTALL_PARAMS_W typedef SP_DEVINSTALL_PARAMS_W
    PSP_DEVINSTALL_PARAMS_W typedef ptr SP_DEVINSTALL_PARAMS_W
    
    ifdef UNICODE
      SP_DEVINSTALL_PARAMS typedef SP_DEVINSTALL_PARAMS_W
      PSP_DEVINSTALL_PARAMS typedef PSP_DEVINSTALL_PARAMS_W
    else
      SP_DEVINSTALL_PARAMS typedef SP_DEVINSTALL_PARAMS_A
      PSP_DEVINSTALL_PARAMS typedef PSP_DEVINSTALL_PARAMS_A
    endif
    DI_SHOWOEM equ 00000001h
    DI_SHOWCOMPAT equ 00000002h
    DI_SHOWCLASS equ 00000004h
    DI_SHOWALL equ 00000007h
    DI_NOVCP equ 00000008h
    DI_DIDCOMPAT equ 00000010h
    DI_DIDCLASS equ 00000020h
    DI_AUTOASSIGNRES equ 00000040h
    DI_NEEDRESTART equ 00000080h
    DI_NEEDREBOOT equ 00000100h
    DI_NOBROWSE equ 00000200h
    DI_MULTMFGS equ 00000400h
    DI_DISABLED equ 00000800h
    DI_GENERALPAGE_ADDED equ 00001000h
    DI_RESOURCEPAGE_ADDED equ 00002000h
    DI_PROPERTIES_CHANGE equ 00004000h
    DI_INF_IS_SORTED equ 00008000h
    DI_ENUMSINGLEINF equ 00010000h
    DI_DONOTCALLCONFIGMG equ 00020000h
    DI_INSTALLDISABLED equ 00040000h
    DI_COMPAT_FROM_CLASS equ 00080000h
    DI_CLASSINSTALLPARAMS equ 00100000h
    DI_NODI_DEFAULTACTION equ 00200000h
    DI_QUIETINSTALL equ 00800000h
    DI_NOFILECOPY equ 01000000h
    DI_FORCECOPY equ 02000000h
    DI_DRIVERPAGE_ADDED equ 04000000h
    DI_USECI_SELECTSTRINGS equ 08000000h
    DI_OVERRIDE_INFFLAGS equ 10000000h
    DI_PROPS_NOCHANGEUSAGE equ 20000000h
    DI_NOSELECTICONS equ 40000000h
    DI_NOWRITE_IDS equ 80000000h
    DI_FLAGSEX_RESERVED2 equ 00000001h
    DI_FLAGSEX_RESERVED3 equ 00000002h
    DI_FLAGSEX_CI_FAILED equ 00000004h
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      DI_FLAGSEX_FINISHINSTALL_ACTION equ 00000008h
    endif
    DI_FLAGSEX_DIDINFOLIST equ 00000010h
    DI_FLAGSEX_DIDCOMPATINFO equ 00000020h
    DI_FLAGSEX_FILTERCLASSES equ 00000040h
    DI_FLAGSEX_SETFAILEDINSTALL equ 00000080h
    DI_FLAGSEX_DEVICECHANGE equ 00000100h
    DI_FLAGSEX_ALWAYSWRITEIDS equ 00000200h
    DI_FLAGSEX_PROPCHANGE_PENDING equ 00000400h
    DI_FLAGSEX_ALLOWEXCLUDEDDRVS equ 00000800h
    DI_FLAGSEX_NOUIONQUERYREMOVE equ 00001000h
    DI_FLAGSEX_USECLASSFORCOMPAT equ 00002000h
    DI_FLAGSEX_RESERVED4 equ 00004000h
    DI_FLAGSEX_NO_DRVREG_MODIFY equ 00008000h
    DI_FLAGSEX_IN_SYSTEM_SETUP equ 00010000h
    DI_FLAGSEX_INET_DRIVER equ 00020000h
    DI_FLAGSEX_APPENDDRIVERLIST equ 00040000h
    DI_FLAGSEX_PREINSTALLBACKUP equ 00080000h
    DI_FLAGSEX_BACKUPONREPLACE equ 00100000h
    DI_FLAGSEX_DRIVERLIST_FROM_URL equ 00200000h
    DI_FLAGSEX_RESERVED1 equ 00400000h
    DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS equ 00800000h
    DI_FLAGSEX_POWERPAGE_ADDED equ 01000000h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      DI_FLAGSEX_FILTERSIMILARDRIVERS equ 02000000h
      DI_FLAGSEX_INSTALLEDDRIVER equ 04000000h
      DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE equ 08000000h
      DI_FLAGSEX_ALTPLATFORM_DRVSEARCH equ 10000000h
      DI_FLAGSEX_RESTART_DEVICE_ONLY equ 20000000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      DI_FLAGSEX_RECURSIVESEARCH equ 40000000h
      DI_FLAGSEX_SEARCH_PUBLISHED_INFS equ 80000000h
    endif
    SP_CLASSINSTALL_HEADER struct
      cbSize DWORD ?
      InstallFunction DI_FUNCTION ?
    SP_CLASSINSTALL_HEADER ends
    _SP_CLASSINSTALL_HEADER typedef SP_CLASSINSTALL_HEADER
    PSP_CLASSINSTALL_HEADER typedef ptr SP_CLASSINSTALL_HEADER
    
    SP_ENABLECLASS_PARAMS struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      ClassGuid GUID <>
      EnableMessage DWORD ?
    SP_ENABLECLASS_PARAMS ends
    _SP_ENABLECLASS_PARAMS typedef SP_ENABLECLASS_PARAMS
    PSP_ENABLECLASS_PARAMS typedef ptr SP_ENABLECLASS_PARAMS
    
    ENABLECLASS_QUERY equ 0
    ENABLECLASS_SUCCESS equ 1
    ENABLECLASS_FAILURE equ 2
    DICS_ENABLE equ 00000001h
    DICS_DISABLE equ 00000002h
    DICS_PROPCHANGE equ 00000003h
    DICS_START equ 00000004h
    DICS_STOP equ 00000005h
    DICS_FLAG_GLOBAL equ 00000001h
    DICS_FLAG_CONFIGSPECIFIC equ 00000002h
    DICS_FLAG_CONFIGGENERAL equ 00000004h
    SP_PROPCHANGE_PARAMS struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      StateChange DWORD ?
      Scope DWORD ?
      HwProfile DWORD ?
    SP_PROPCHANGE_PARAMS ends
    _SP_PROPCHANGE_PARAMS typedef SP_PROPCHANGE_PARAMS
    PSP_PROPCHANGE_PARAMS typedef ptr SP_PROPCHANGE_PARAMS
    
    SP_REMOVEDEVICE_PARAMS struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Scope DWORD ?
      HwProfile DWORD ?
    SP_REMOVEDEVICE_PARAMS ends
    _SP_REMOVEDEVICE_PARAMS typedef SP_REMOVEDEVICE_PARAMS
    PSP_REMOVEDEVICE_PARAMS typedef ptr SP_REMOVEDEVICE_PARAMS
    
    DI_REMOVEDEVICE_GLOBAL equ 00000001h
    DI_REMOVEDEVICE_CONFIGSPECIFIC equ 00000002h
    SP_UNREMOVEDEVICE_PARAMS struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Scope DWORD ?
      HwProfile DWORD ?
    SP_UNREMOVEDEVICE_PARAMS ends
    _SP_UNREMOVEDEVICE_PARAMS typedef SP_UNREMOVEDEVICE_PARAMS
    PSP_UNREMOVEDEVICE_PARAMS typedef ptr SP_UNREMOVEDEVICE_PARAMS
    
    DI_UNREMOVEDEVICE_CONFIGSPECIFIC equ 00000002h
    SP_SELECTDEVICE_PARAMS_A struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Title_ CHAR MAX_TITLE_LEN dup (?)
      Instructions CHAR MAX_INSTRUCTION_LEN dup (?)
      ListLabel CHAR MAX_LABEL_LEN dup (?)
      SubTitle_ CHAR MAX_SUBTITLE_LEN dup (?)
      Reserved BYTE 2 dup (?)
    SP_SELECTDEVICE_PARAMS_A ends
    _SP_SELECTDEVICE_PARAMS_A typedef SP_SELECTDEVICE_PARAMS_A
    PSP_SELECTDEVICE_PARAMS_A typedef ptr SP_SELECTDEVICE_PARAMS_A
    
    SP_SELECTDEVICE_PARAMS_W struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Title_ WCHAR MAX_TITLE_LEN dup (?)
      Instructions WCHAR MAX_INSTRUCTION_LEN dup (?)
      ListLabel WCHAR MAX_LABEL_LEN dup (?)
      SubTitle_ WCHAR MAX_SUBTITLE_LEN dup (?)
    SP_SELECTDEVICE_PARAMS_W ends
    _SP_SELECTDEVICE_PARAMS_W typedef SP_SELECTDEVICE_PARAMS_W
    PSP_SELECTDEVICE_PARAMS_W typedef ptr SP_SELECTDEVICE_PARAMS_W
    
    ifdef UNICODE
      SP_SELECTDEVICE_PARAMS typedef SP_SELECTDEVICE_PARAMS_W
      PSP_SELECTDEVICE_PARAMS typedef PSP_SELECTDEVICE_PARAMS_W
    else
      SP_SELECTDEVICE_PARAMS typedef SP_SELECTDEVICE_PARAMS_A
      PSP_SELECTDEVICE_PARAMS typedef PSP_SELECTDEVICE_PARAMS_A
    endif
    TYPE_PDETECT_PROGRESS_NOTIFY typedef proto WIN_STD_CALL_CONV :PVOID, :DWORD
    PDETECT_PROGRESS_NOTIFY typedef ptr TYPE_PDETECT_PROGRESS_NOTIFY
    SP_DETECTDEVICE_PARAMS struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      DetectProgressNotify PDETECT_PROGRESS_NOTIFY ?
      ProgressNotifyParam PVOID ?
    SP_DETECTDEVICE_PARAMS ends
    _SP_DETECTDEVICE_PARAMS typedef SP_DETECTDEVICE_PARAMS
    PSP_DETECTDEVICE_PARAMS typedef ptr SP_DETECTDEVICE_PARAMS
    
    MAX_INSTALLWIZARD_DYNAPAGES equ 20
    SP_INSTALLWIZARD_DATA struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Flags DWORD ?
      DynamicPages HPROPSHEETPAGE MAX_INSTALLWIZARD_DYNAPAGES dup (?)
      NumDynamicPages DWORD ?
      DynamicPageFlags DWORD ?
      PrivateFlags DWORD ?
      PrivateData LPARAM ?
      hwndWizardDlg HWND ?
    SP_INSTALLWIZARD_DATA ends
    _SP_INSTALLWIZARD_DATA typedef SP_INSTALLWIZARD_DATA
    PSP_INSTALLWIZARD_DATA typedef ptr SP_INSTALLWIZARD_DATA
    
    NDW_INSTALLFLAG_DIDFACTDEFS equ 00000001h
    NDW_INSTALLFLAG_HARDWAREALLREADYIN equ 00000002h
    NDW_INSTALLFLAG_NEEDRESTART equ <DI_NEEDRESTART>
    NDW_INSTALLFLAG_NEEDREBOOT equ <DI_NEEDREBOOT>
    NDW_INSTALLFLAG_NEEDSHUTDOWN equ 00000200h
    NDW_INSTALLFLAG_EXPRESSINTRO equ 00000400h
    NDW_INSTALLFLAG_SKIPISDEVINSTALLED equ 00000800h
    NDW_INSTALLFLAG_NODETECTEDDEVS equ 00001000h
    NDW_INSTALLFLAG_INSTALLSPECIFIC equ 00002000h
    NDW_INSTALLFLAG_SKIPCLASSLIST equ 00004000h
    NDW_INSTALLFLAG_CI_PICKED_OEM equ 00008000h
    NDW_INSTALLFLAG_PCMCIAMODE equ 00010000h
    NDW_INSTALLFLAG_PCMCIADEVICE equ 00020000h
    NDW_INSTALLFLAG_USERCANCEL equ 00040000h
    NDW_INSTALLFLAG_KNOWNCLASS equ 00080000h
    DYNAWIZ_FLAG_PAGESADDED equ 00000001h
    DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT equ 00000008h
    DYNAWIZ_FLAG_INSTALLDET_NEXT equ 00000002h
    DYNAWIZ_FLAG_INSTALLDET_PREV equ 00000004h
    MIN_IDD_DYNAWIZ_RESOURCE_ID equ 10000
    MAX_IDD_DYNAWIZ_RESOURCE_ID equ 11000
    IDD_DYNAWIZ_FIRSTPAGE equ 10000
    IDD_DYNAWIZ_SELECT_PREVPAGE equ 10001
    IDD_DYNAWIZ_SELECT_NEXTPAGE equ 10002
    IDD_DYNAWIZ_ANALYZE_PREVPAGE equ 10003
    IDD_DYNAWIZ_ANALYZE_NEXTPAGE equ 10004
    IDD_DYNAWIZ_SELECTDEV_PAGE equ 10009
    IDD_DYNAWIZ_ANALYZEDEV_PAGE equ 10010
    IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE equ 10011
    IDD_DYNAWIZ_SELECTCLASS_PAGE equ 10012
    IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE equ 10006
    IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE equ 10007
    IDD_DYNAWIZ_INSTALLDETECTED_NODEVS equ 10008
    SP_NEWDEVICEWIZARD_DATA struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      Flags DWORD ?
      DynamicPages HPROPSHEETPAGE MAX_INSTALLWIZARD_DYNAPAGES dup (?)
      NumDynamicPages DWORD ?
      hwndWizardDlg HWND ?
    SP_NEWDEVICEWIZARD_DATA ends
    _SP_NEWDEVICEWIZARD_DATA typedef SP_NEWDEVICEWIZARD_DATA
    PSP_NEWDEVICEWIZARD_DATA typedef ptr SP_NEWDEVICEWIZARD_DATA
    
    SP_ADDPROPERTYPAGE_DATA typedef SP_NEWDEVICEWIZARD_DATA
    PSP_ADDPROPERTYPAGE_DATA typedef PSP_NEWDEVICEWIZARD_DATA
    SP_TROUBLESHOOTER_PARAMS_A struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      ChmFile CHAR MAX_PATH dup (?)
      HtmlTroubleShooter CHAR MAX_PATH dup (?)
    SP_TROUBLESHOOTER_PARAMS_A ends
    _SP_TROUBLESHOOTER_PARAMS_A typedef SP_TROUBLESHOOTER_PARAMS_A
    PSP_TROUBLESHOOTER_PARAMS_A typedef ptr SP_TROUBLESHOOTER_PARAMS_A
    
    SP_TROUBLESHOOTER_PARAMS_W struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      ChmFile WCHAR MAX_PATH dup (?)
      HtmlTroubleShooter WCHAR MAX_PATH dup (?)
    SP_TROUBLESHOOTER_PARAMS_W ends
    _SP_TROUBLESHOOTER_PARAMS_W typedef SP_TROUBLESHOOTER_PARAMS_W
    PSP_TROUBLESHOOTER_PARAMS_W typedef ptr SP_TROUBLESHOOTER_PARAMS_W
    
    ifdef UNICODE
      SP_TROUBLESHOOTER_PARAMS typedef SP_TROUBLESHOOTER_PARAMS_W
      PSP_TROUBLESHOOTER_PARAMS typedef PSP_TROUBLESHOOTER_PARAMS_W
    else
      SP_TROUBLESHOOTER_PARAMS typedef SP_TROUBLESHOOTER_PARAMS_A
      PSP_TROUBLESHOOTER_PARAMS typedef PSP_TROUBLESHOOTER_PARAMS_A
    endif
    SP_POWERMESSAGEWAKE_PARAMS_A struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      PowerMessageWake CHAR LINE_LEN * 2 dup (?)
    SP_POWERMESSAGEWAKE_PARAMS_A ends
    _SP_POWERMESSAGEWAKE_PARAMS_A typedef SP_POWERMESSAGEWAKE_PARAMS_A
    PSP_POWERMESSAGEWAKE_PARAMS_A typedef ptr SP_POWERMESSAGEWAKE_PARAMS_A
    
    SP_POWERMESSAGEWAKE_PARAMS_W struct
      ClassInstallHeader SP_CLASSINSTALL_HEADER <>
      PowerMessageWake WCHAR LINE_LEN * 2 dup (?)
    SP_POWERMESSAGEWAKE_PARAMS_W ends
    _SP_POWERMESSAGEWAKE_PARAMS_W typedef SP_POWERMESSAGEWAKE_PARAMS_W
    PSP_POWERMESSAGEWAKE_PARAMS_W typedef ptr SP_POWERMESSAGEWAKE_PARAMS_W
    
    ifdef UNICODE
      SP_POWERMESSAGEWAKE_PARAMS typedef SP_POWERMESSAGEWAKE_PARAMS_W
      PSP_POWERMESSAGEWAKE_PARAMS typedef PSP_POWERMESSAGEWAKE_PARAMS_W
    else
      SP_POWERMESSAGEWAKE_PARAMS typedef SP_POWERMESSAGEWAKE_PARAMS_A
      PSP_POWERMESSAGEWAKE_PARAMS typedef PSP_POWERMESSAGEWAKE_PARAMS_A
    endif
    SP_DRVINFO_DATA_V2_A struct
      cbSize DWORD ?
      DriverType DWORD ?
      Reserved ULONG_PTR ?
      Description CHAR LINE_LEN dup (?)
      MfgName CHAR LINE_LEN dup (?)
      ProviderName CHAR LINE_LEN dup (?)
      DriverDate FILETIME <>
      DriverVersion DWORDLONG ?
    SP_DRVINFO_DATA_V2_A ends
    _SP_DRVINFO_DATA_V2_A typedef SP_DRVINFO_DATA_V2_A
    PSP_DRVINFO_DATA_V2_A typedef ptr SP_DRVINFO_DATA_V2_A
    
    SP_DRVINFO_DATA_V2_W struct
      cbSize DWORD ?
      DriverType DWORD ?
      Reserved ULONG_PTR ?
      Description WCHAR LINE_LEN dup (?)
      MfgName WCHAR LINE_LEN dup (?)
      ProviderName WCHAR LINE_LEN dup (?)
      DriverDate FILETIME <>
      DriverVersion DWORDLONG ?
    SP_DRVINFO_DATA_V2_W ends
    _SP_DRVINFO_DATA_V2_W typedef SP_DRVINFO_DATA_V2_W
    PSP_DRVINFO_DATA_V2_W typedef ptr SP_DRVINFO_DATA_V2_W
    
    SP_DRVINFO_DATA_V1_A struct
      cbSize DWORD ?
      DriverType DWORD ?
      Reserved ULONG_PTR ?
      Description CHAR LINE_LEN dup (?)
      MfgName CHAR LINE_LEN dup (?)
      ProviderName CHAR LINE_LEN dup (?)
    SP_DRVINFO_DATA_V1_A ends
    _SP_DRVINFO_DATA_V1_A typedef SP_DRVINFO_DATA_V1_A
    PSP_DRVINFO_DATA_V1_A typedef ptr SP_DRVINFO_DATA_V1_A
    
    SP_DRVINFO_DATA_V1_W struct
      cbSize DWORD ?
      DriverType DWORD ?
      Reserved ULONG_PTR ?
      Description WCHAR LINE_LEN dup (?)
      MfgName WCHAR LINE_LEN dup (?)
      ProviderName WCHAR LINE_LEN dup (?)
    SP_DRVINFO_DATA_V1_W ends
    _SP_DRVINFO_DATA_V1_W typedef SP_DRVINFO_DATA_V1_W
    PSP_DRVINFO_DATA_V1_W typedef ptr SP_DRVINFO_DATA_V1_W
    
    ifdef UNICODE
      SP_DRVINFO_DATA_V1 typedef SP_DRVINFO_DATA_V1_W
      PSP_DRVINFO_DATA_V1 typedef PSP_DRVINFO_DATA_V1_W
      SP_DRVINFO_DATA_V2 typedef SP_DRVINFO_DATA_V2_W
      PSP_DRVINFO_DATA_V2 typedef PSP_DRVINFO_DATA_V2_W
    else
      SP_DRVINFO_DATA_V1 typedef SP_DRVINFO_DATA_V1_A
      PSP_DRVINFO_DATA_V1 typedef PSP_DRVINFO_DATA_V1_A
      SP_DRVINFO_DATA_V2 typedef SP_DRVINFO_DATA_V2_A
      PSP_DRVINFO_DATA_V2 typedef PSP_DRVINFO_DATA_V2_A
    endif
    if USE_SP_DRVINFO_DATA_V1 or (_SETUPAPI_VER lt _WIN32_WINNT_WIN2K)
      SP_DRVINFO_DATA_A typedef SP_DRVINFO_DATA_V1_A
      PSP_DRVINFO_DATA_A typedef PSP_DRVINFO_DATA_V1_A
      SP_DRVINFO_DATA_W typedef SP_DRVINFO_DATA_V1_W
      PSP_DRVINFO_DATA_W typedef PSP_DRVINFO_DATA_V1_W
      SP_DRVINFO_DATA typedef SP_DRVINFO_DATA_V1
      PSP_DRVINFO_DATA typedef PSP_DRVINFO_DATA_V1
    else
      SP_DRVINFO_DATA_A typedef SP_DRVINFO_DATA_V2_A
      PSP_DRVINFO_DATA_A typedef PSP_DRVINFO_DATA_V2_A
      SP_DRVINFO_DATA_W typedef SP_DRVINFO_DATA_V2_W
      PSP_DRVINFO_DATA_W typedef PSP_DRVINFO_DATA_V2_W
      SP_DRVINFO_DATA typedef SP_DRVINFO_DATA_V2
      PSP_DRVINFO_DATA typedef PSP_DRVINFO_DATA_V2
    endif
    SP_DRVINFO_DETAIL_DATA_A struct
      cbSize DWORD ?
      InfDate FILETIME <>
      CompatIDsOffset DWORD ?
      CompatIDsLength DWORD ?
      Reserved ULONG_PTR ?
      SectionName CHAR LINE_LEN dup (?)
      InfFileName CHAR MAX_PATH dup (?)
      DrvDescription CHAR LINE_LEN dup (?)
      HardwareID CHAR ANYSIZE_ARRAY dup (?)
    SP_DRVINFO_DETAIL_DATA_A ends
    _SP_DRVINFO_DETAIL_DATA_A typedef SP_DRVINFO_DETAIL_DATA_A
    PSP_DRVINFO_DETAIL_DATA_A typedef ptr SP_DRVINFO_DETAIL_DATA_A
    
    SP_DRVINFO_DETAIL_DATA_W struct
      cbSize DWORD ?
      InfDate FILETIME <>
      CompatIDsOffset DWORD ?
      CompatIDsLength DWORD ?
      Reserved ULONG_PTR ?
      SectionName WCHAR LINE_LEN dup (?)
      InfFileName WCHAR MAX_PATH dup (?)
      DrvDescription WCHAR LINE_LEN dup (?)
      HardwareID WCHAR ANYSIZE_ARRAY dup (?)
    SP_DRVINFO_DETAIL_DATA_W ends
    _SP_DRVINFO_DETAIL_DATA_W typedef SP_DRVINFO_DETAIL_DATA_W
    PSP_DRVINFO_DETAIL_DATA_W typedef ptr SP_DRVINFO_DETAIL_DATA_W
    
    ifdef UNICODE
      SP_DRVINFO_DETAIL_DATA typedef SP_DRVINFO_DETAIL_DATA_W
      PSP_DRVINFO_DETAIL_DATA typedef PSP_DRVINFO_DETAIL_DATA_W
    else
      SP_DRVINFO_DETAIL_DATA typedef SP_DRVINFO_DETAIL_DATA_A
      PSP_DRVINFO_DETAIL_DATA typedef PSP_DRVINFO_DETAIL_DATA_A
    endif
    SP_DRVINSTALL_PARAMS struct
      cbSize DWORD ?
      Rank DWORD ?
      Flags DWORD ?
      PrivateData DWORD_PTR ?
      Reserved DWORD ?
    SP_DRVINSTALL_PARAMS ends
    _SP_DRVINSTALL_PARAMS typedef SP_DRVINSTALL_PARAMS
    PSP_DRVINSTALL_PARAMS typedef ptr SP_DRVINSTALL_PARAMS
    
    DNF_DUPDESC equ 00000001h
    DNF_OLDDRIVER equ 00000002h
    DNF_EXCLUDEFROMLIST equ 00000004h
    DNF_NODRIVER equ 00000008h
    DNF_LEGACYINF equ 00000010h
    DNF_CLASS_DRIVER equ 00000020h
    DNF_COMPATIBLE_DRIVER equ 00000040h
    DNF_INET_DRIVER equ 00000080h
    DNF_UNUSED1 equ 00000100h
    DNF_UNUSED2 equ 00000200h
    DNF_OLD_INET_DRIVER equ 00000400h
    DNF_BAD_DRIVER equ 00000800h
    DNF_DUPPROVIDER equ 00001000h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      DNF_INF_IS_SIGNED equ 00002000h
      DNF_OEM_F6_INF equ 00004000h
      DNF_DUPDRIVERVER equ 00008000h
      DNF_BASIC_DRIVER equ 00010000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WS03
      DNF_AUTHENTICODE_SIGNED equ 00020000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      DNF_INSTALLEDDRIVER equ 00040000h
      DNF_ALWAYSEXCLUDEFROMLIST equ 00080000h
      DNF_INBOX_DRIVER equ 00100000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN7
      DNF_REQUESTADDITIONALSOFTWARE equ 00200000h
    endif
    DNF_UNUSED_22 equ 00400000h
    DNF_UNUSED_23 equ 00800000h
    DNF_UNUSED_24 equ 01000000h
    DNF_UNUSED_25 equ 02000000h
    DNF_UNUSED_26 equ 04000000h
    DNF_UNUSED_27 equ 08000000h
    DNF_UNUSED_28 equ 10000000h
    DNF_UNUSED_29 equ 20000000h
    DNF_UNUSED_30 equ 40000000h
    DNF_UNUSED_31 equ 80000000h
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      DRIVER_HARDWAREID_RANK equ 00000FFFh
      DRIVER_HARDWAREID_MASK equ 80000FFFh
      DRIVER_UNTRUSTED_RANK equ 80000000h
      DRIVER_W9X_SUSPECT_RANK equ 0C0000000h
    else
      DRIVER_HARDWAREID_RANK equ 00000FFFh
      DRIVER_COMPATID_RANK equ 00003FFFh
      DRIVER_UNTRUSTED_RANK equ 00008000h
      DRIVER_UNTRUSTED_HARDWAREID_RANK equ 00008FFFh
      DRIVER_UNTRUSTED_COMPATID_RANK equ 0000BFFFh
      DRIVER_W9X_SUSPECT_RANK equ 0000C000h
      DRIVER_W9X_SUSPECT_HARDWAREID_RANK equ 0000CFFFh
      DRIVER_W9X_SUSPECT_COMPATID_RANK equ 0000FFFFh
    endif
    TYPE_PSP_DETSIG_CMPPROC typedef proto WIN_STD_CALL_CONV :HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DEVINFO_DATA, :PVOID
    PSP_DETSIG_CMPPROC typedef ptr TYPE_PSP_DETSIG_CMPPROC
    COINSTALLER_CONTEXT_DATA struct
      PostProcessing BOOL ?
      InstallResult DWORD ?
      PrivateData PVOID ?
    COINSTALLER_CONTEXT_DATA ends
    _COINSTALLER_CONTEXT_DATA typedef COINSTALLER_CONTEXT_DATA
    PCOINSTALLER_CONTEXT_DATA typedef ptr COINSTALLER_CONTEXT_DATA
    
    SP_CLASSIMAGELIST_DATA struct
      cbSize DWORD ?
      ImageList HIMAGELIST ?
      Reserved ULONG_PTR ?
    SP_CLASSIMAGELIST_DATA ends
    _SP_CLASSIMAGELIST_DATA typedef SP_CLASSIMAGELIST_DATA
    PSP_CLASSIMAGELIST_DATA typedef ptr SP_CLASSIMAGELIST_DATA
    
    SP_PROPSHEETPAGE_REQUEST struct
      cbSize DWORD ?
      PageRequested DWORD ?
      DeviceInfoSet HDEVINFO ?
      DeviceInfoData PSP_DEVINFO_DATA ?
    SP_PROPSHEETPAGE_REQUEST ends
    _SP_PROPSHEETPAGE_REQUEST typedef SP_PROPSHEETPAGE_REQUEST
    PSP_PROPSHEETPAGE_REQUEST typedef ptr SP_PROPSHEETPAGE_REQUEST
    
    SPPSR_SELECT_DEVICE_RESOURCES equ 1
    SPPSR_ENUM_BASIC_DEVICE_PROPERTIES equ 2
    SPPSR_ENUM_ADV_DEVICE_PROPERTIES equ 3
    SP_BACKUP_QUEUE_PARAMS_V2_A struct
      cbSize DWORD ?
      FullInfPath CHAR MAX_PATH dup (?)
      FilenameOffset INT_ ?
      ReinstallInstance CHAR MAX_PATH dup (?)
    SP_BACKUP_QUEUE_PARAMS_V2_A ends
    _SP_BACKUP_QUEUE_PARAMS_V2_A typedef SP_BACKUP_QUEUE_PARAMS_V2_A
    PSP_BACKUP_QUEUE_PARAMS_V2_A typedef ptr SP_BACKUP_QUEUE_PARAMS_V2_A
    
    SP_BACKUP_QUEUE_PARAMS_V2_W struct
      cbSize DWORD ?
      FullInfPath WCHAR MAX_PATH dup (?)
      FilenameOffset INT_ ?
      ReinstallInstance WCHAR MAX_PATH dup (?)
    SP_BACKUP_QUEUE_PARAMS_V2_W ends
    _SP_BACKUP_QUEUE_PARAMS_V2_W typedef SP_BACKUP_QUEUE_PARAMS_V2_W
    PSP_BACKUP_QUEUE_PARAMS_V2_W typedef ptr SP_BACKUP_QUEUE_PARAMS_V2_W
    
    SP_BACKUP_QUEUE_PARAMS_V1_A struct
      cbSize DWORD ?
      FullInfPath CHAR MAX_PATH dup (?)
      FilenameOffset INT_ ?
    SP_BACKUP_QUEUE_PARAMS_V1_A ends
    _SP_BACKUP_QUEUE_PARAMS_V1_A typedef SP_BACKUP_QUEUE_PARAMS_V1_A
    PSP_BACKUP_QUEUE_PARAMS_V1_A typedef ptr SP_BACKUP_QUEUE_PARAMS_V1_A
    
    SP_BACKUP_QUEUE_PARAMS_V1_W struct
      cbSize DWORD ?
      FullInfPath WCHAR MAX_PATH dup (?)
      FilenameOffset INT_ ?
    SP_BACKUP_QUEUE_PARAMS_V1_W ends
    _SP_BACKUP_QUEUE_PARAMS_V1_W typedef SP_BACKUP_QUEUE_PARAMS_V1_W
    PSP_BACKUP_QUEUE_PARAMS_V1_W typedef ptr SP_BACKUP_QUEUE_PARAMS_V1_W
    
    ifdef UNICODE
      SP_BACKUP_QUEUE_PARAMS_V1 typedef SP_BACKUP_QUEUE_PARAMS_V1_W
      PSP_BACKUP_QUEUE_PARAMS_V1 typedef PSP_BACKUP_QUEUE_PARAMS_V1_W
      SP_BACKUP_QUEUE_PARAMS_V2 typedef SP_BACKUP_QUEUE_PARAMS_V2_W
      PSP_BACKUP_QUEUE_PARAMS_V2 typedef PSP_BACKUP_QUEUE_PARAMS_V2_W
    else
      SP_BACKUP_QUEUE_PARAMS_V1 typedef SP_BACKUP_QUEUE_PARAMS_V1_A
      PSP_BACKUP_QUEUE_PARAMS_V1 typedef PSP_BACKUP_QUEUE_PARAMS_V1_A
      SP_BACKUP_QUEUE_PARAMS_V2 typedef SP_BACKUP_QUEUE_PARAMS_V2_A
      PSP_BACKUP_QUEUE_PARAMS_V2 typedef PSP_BACKUP_QUEUE_PARAMS_V2_A
    endif
    if USE_SP_BACKUP_QUEUE_PARAMS_V1 or (_SETUPAPI_VER lt _WIN32_WINNT_WINXP)
      SP_BACKUP_QUEUE_PARAMS_A typedef SP_BACKUP_QUEUE_PARAMS_V1_A
      PSP_BACKUP_QUEUE_PARAMS_A typedef PSP_BACKUP_QUEUE_PARAMS_V1_A
      SP_BACKUP_QUEUE_PARAMS_W typedef SP_BACKUP_QUEUE_PARAMS_V1_W
      PSP_BACKUP_QUEUE_PARAMS_W typedef PSP_BACKUP_QUEUE_PARAMS_V1_W
      SP_BACKUP_QUEUE_PARAMS typedef SP_BACKUP_QUEUE_PARAMS_V1
      PSP_BACKUP_QUEUE_PARAMS typedef PSP_BACKUP_QUEUE_PARAMS_V1
    else
      SP_BACKUP_QUEUE_PARAMS_A typedef SP_BACKUP_QUEUE_PARAMS_V2_A
      PSP_BACKUP_QUEUE_PARAMS_A typedef PSP_BACKUP_QUEUE_PARAMS_V2_A
      SP_BACKUP_QUEUE_PARAMS_W typedef SP_BACKUP_QUEUE_PARAMS_V2_W
      PSP_BACKUP_QUEUE_PARAMS_W typedef PSP_BACKUP_QUEUE_PARAMS_V2_W
      SP_BACKUP_QUEUE_PARAMS typedef SP_BACKUP_QUEUE_PARAMS_V2
      PSP_BACKUP_QUEUE_PARAMS typedef PSP_BACKUP_QUEUE_PARAMS_V2
    endif
    ifndef _SPAPI_ERRORS
      _SPAPI_ERRORS equ <>
      ERROR_EXPECTED_SECTION_NAME equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0)
      ERROR_BAD_SECTION_NAME_LINE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 1)
      ERROR_SECTION_NAME_TOO_LONG equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 2)
      ERROR_GENERAL_SYNTAX equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 3)
      ERROR_WRONG_INF_STYLE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 100h)
      ERROR_SECTION_NOT_FOUND equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 101h)
      ERROR_LINE_NOT_FOUND equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 102h)
      ERROR_NO_BACKUP equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 103h)
      ERROR_NO_ASSOCIATED_CLASS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 200h)
      ERROR_CLASS_MISMATCH equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 201h)
      ERROR_DUPLICATE_FOUND equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 202h)
      ERROR_NO_DRIVER_SELECTED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 203h)
      ERROR_KEY_DOES_NOT_EXIST equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 204h)
      ERROR_INVALID_DEVINST_NAME equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 205h)
      ERROR_INVALID_CLASS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 206h)
      ERROR_DEVINST_ALREADY_EXISTS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 207h)
      ERROR_DEVINFO_NOT_REGISTERED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 208h)
      ERROR_INVALID_REG_PROPERTY equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 209h)
      ERROR_NO_INF equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Ah)
      ERROR_NO_SUCH_DEVINST equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Bh)
      ERROR_CANT_LOAD_CLASS_ICON equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Ch)
      ERROR_INVALID_CLASS_INSTALLER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Dh)
      ERROR_DI_DO_DEFAULT equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Eh)
      ERROR_DI_NOFILECOPY equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 20Fh)
      ERROR_INVALID_HWPROFILE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 210h)
      ERROR_NO_DEVICE_SELECTED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 211h)
      ERROR_DEVINFO_LIST_LOCKED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 212h)
      ERROR_DEVINFO_DATA_LOCKED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 213h)
      ERROR_DI_BAD_PATH equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 214h)
      ERROR_NO_CLASSINSTALL_PARAMS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 215h)
      ERROR_FILEQUEUE_LOCKED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 216h)
      ERROR_BAD_SERVICE_INSTALLSECT equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 217h)
      ERROR_NO_CLASS_DRIVER_LIST equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 218h)
      ERROR_NO_ASSOCIATED_SERVICE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 219h)
      ERROR_NO_DEFAULT_DEVICE_INTERFACE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Ah)
      ERROR_DEVICE_INTERFACE_ACTIVE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Bh)
      ERROR_DEVICE_INTERFACE_REMOVED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Ch)
      ERROR_BAD_INTERFACE_INSTALLSECT equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Dh)
      ERROR_NO_SUCH_INTERFACE_CLASS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Eh)
      ERROR_INVALID_REFERENCE_STRING equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 21Fh)
      ERROR_INVALID_MACHINENAME equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 220h)
      ERROR_REMOTE_COMM_FAILURE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 221h)
      ERROR_MACHINE_UNAVAILABLE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 222h)
      ERROR_NO_CONFIGMGR_SERVICES equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 223h)
      ERROR_INVALID_PROPPAGE_PROVIDER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 224h)
      ERROR_NO_SUCH_DEVICE_INTERFACE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 225h)
      ERROR_DI_POSTPROCESSING_REQUIRED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 226h)
      ERROR_INVALID_COINSTALLER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 227h)
      ERROR_NO_COMPAT_DRIVERS equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 228h)
      ERROR_NO_DEVICE_ICON equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 229h)
      ERROR_INVALID_INF_LOGCONFIG equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Ah)
      ERROR_DI_DONT_INSTALL equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Bh)
      ERROR_INVALID_FILTER_DRIVER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Ch)
      ERROR_NON_WINDOWS_NT_DRIVER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Dh)
      ERROR_NON_WINDOWS_DRIVER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Eh)
      ERROR_NO_CATALOG_FOR_OEM_INF equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 22Fh)
      ERROR_DEVINSTALL_QUEUE_NONNATIVE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 230h)
      ERROR_NOT_DISABLEABLE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 231h)
      ERROR_CANT_REMOVE_DEVINST equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 232h)
      ERROR_INVALID_TARGET equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 233h)
      ERROR_DRIVER_NONNATIVE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 234h)
      ERROR_IN_WOW64 equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 235h)
      ERROR_SET_SYSTEM_RESTORE_POINT equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 236h)
      ERROR_SCE_DISABLED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 238h)
      ERROR_UNKNOWN_EXCEPTION equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 239h)
      ERROR_PNP_REGISTRY_ERROR equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Ah)
      ERROR_REMOTE_REQUEST_UNSUPPORTED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Bh)
      ERROR_NOT_AN_INSTALLED_OEM_INF equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Ch)
      ERROR_INF_IN_USE_BY_DEVICES equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Dh)
      ERROR_DI_FUNCTION_OBSOLETE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Eh)
      ERROR_NO_AUTHENTICODE_CATALOG equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 23Fh)
      ERROR_AUTHENTICODE_DISALLOWED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 240h)
      ERROR_AUTHENTICODE_TRUSTED_PUBLISHER equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 241h)
      ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 242h)
      ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 243h)
      ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 244h)
      ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 245h)
      ERROR_DEVICE_INSTALLER_NOT_READY equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 246h)
      ERROR_DRIVER_STORE_ADD_FAILED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 247h)
      ERROR_DEVICE_INSTALL_BLOCKED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 248h)
      ERROR_DRIVER_INSTALL_BLOCKED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 249h)
      ERROR_WRONG_INF_TYPE equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 24Ah)
      ERROR_FILE_HASH_NOT_IN_CATALOG equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 24Bh)
      ERROR_DRIVER_STORE_DELETE_FAILED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 24Ch)
      ERROR_UNRECOVERABLE_STACK_OVERFLOW equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 300h)
      EXCEPTION_SPAPI_UNRECOVERABLE_STACK_OVERFLOW equ <ERROR_UNRECOVERABLE_STACK_OVERFLOW>
      ERROR_NO_DEFAULT_INTERFACE_DEVICE equ <ERROR_NO_DEFAULT_DEVICE_INTERFACE>
      ERROR_INTERFACE_DEVICE_ACTIVE equ <ERROR_DEVICE_INTERFACE_ACTIVE>
      ERROR_INTERFACE_DEVICE_REMOVED equ <ERROR_DEVICE_INTERFACE_REMOVED>
      ERROR_NO_SUCH_INTERFACE_DEVICE equ <ERROR_NO_SUCH_DEVICE_INTERFACE>
      ERROR_NOT_INSTALLED equ (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 1000h)
    endif
    @DefProto DllImport, SetupGetInfInformationA, WIN_STD_CALL_CONV,, <:LPCVOID, :DWORD, :PSP_INF_INFORMATION, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupGetInfInformationW, WIN_STD_CALL_CONV,, <:LPCVOID, :DWORD, :PSP_INF_INFORMATION, :DWORD, :PDWORD>, 20
    INFINFO_INF_SPEC_IS_HINF equ 1
    INFINFO_INF_NAME_IS_ABSOLUTE equ 2
    INFINFO_DEFAULT_SEARCH equ 3
    INFINFO_REVERSE_DEFAULT_SEARCH equ 4
    INFINFO_INF_PATH_LIST_SEARCH equ 5
    ifdef UNICODE
      SetupGetInfInformation equ <SetupGetInfInformationW>
    else
      SetupGetInfInformation equ <SetupGetInfInformationA>
    endif
    @DefProto DllImport, SetupQueryInfFileInformationA, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PSTR, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupQueryInfFileInformationW, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PWSTR, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupQueryInfFileInformation equ <SetupQueryInfFileInformationW>
    else
      SetupQueryInfFileInformation equ <SetupQueryInfFileInformationA>
    endif
    @DefProto DllImport, SetupQueryInfOriginalFileInformationA, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PSP_ALTPLATFORM_INFO, :PSP_ORIGINAL_FILE_INFO_A>, 16
    @DefProto DllImport, SetupQueryInfOriginalFileInformationW, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PSP_ALTPLATFORM_INFO, :PSP_ORIGINAL_FILE_INFO_W>, 16
    ifdef UNICODE
      SetupQueryInfOriginalFileInformation equ <SetupQueryInfOriginalFileInformationW>
    else
      SetupQueryInfOriginalFileInformation equ <SetupQueryInfOriginalFileInformationA>
    endif
    @DefProto DllImport, SetupQueryInfVersionInformationA, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PCSTR, :PSTR, :DWORD, :PDWORD>, 24
    @DefProto DllImport, SetupQueryInfVersionInformationW, WIN_STD_CALL_CONV,, <:PSP_INF_INFORMATION, :UINT, :PCWSTR, :PWSTR, :DWORD, :PDWORD>, 24
    ifdef UNICODE
      SetupQueryInfVersionInformation equ <SetupQueryInfVersionInformationW>
    else
      SetupQueryInfVersionInformation equ <SetupQueryInfVersionInformationA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      @DefProto DllImport, SetupGetInfDriverStoreLocationA, WIN_STD_CALL_CONV,, <:PCSTR, :PSP_ALTPLATFORM_INFO, :PCSTR, :PSTR, :DWORD, :PDWORD>, 24
      @DefProto DllImport, SetupGetInfDriverStoreLocationW, WIN_STD_CALL_CONV,, <:PCWSTR, :PSP_ALTPLATFORM_INFO, :PCWSTR, :PWSTR, :DWORD, :PDWORD>, 24
      ifdef UNICODE
        SetupGetInfDriverStoreLocation equ <SetupGetInfDriverStoreLocationW>
      else
        SetupGetInfDriverStoreLocation equ <SetupGetInfDriverStoreLocationA>
      endif
      @DefProto DllImport, SetupGetInfPublishedNameA, WIN_STD_CALL_CONV,, <:PCSTR, :PSTR, :DWORD, :PDWORD>, 16
      @DefProto DllImport, SetupGetInfPublishedNameW, WIN_STD_CALL_CONV,, <:PCWSTR, :PWSTR, :DWORD, :PDWORD>, 16
      ifdef UNICODE
        SetupGetInfPublishedName equ <SetupGetInfPublishedNameW>
      else
        SetupGetInfPublishedName equ <SetupGetInfPublishedNameA>
      endif
    endif
    @DefProto DllImport, SetupGetInfFileListA, WIN_STD_CALL_CONV,, <:PCSTR, :DWORD, :PSTR, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupGetInfFileListW, WIN_STD_CALL_CONV,, <:PCWSTR, :DWORD, :PWSTR, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupGetInfFileList equ <SetupGetInfFileListW>
    else
      SetupGetInfFileList equ <SetupGetInfFileListA>
    endif
    @DefProto DllImport, SetupOpenInfFileW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :DWORD, :PUINT>, 16
    @DefProto DllImport, SetupOpenInfFileA, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :DWORD, :PUINT>, 16
    ifdef UNICODE
      SetupOpenInfFile equ <SetupOpenInfFileW>
    else
      SetupOpenInfFile equ <SetupOpenInfFileA>
    endif
    @DefProto DllImport, SetupOpenMasterInf, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SetupOpenAppendInfFileW, WIN_STD_CALL_CONV,, <:PCWSTR, :HINF, :PUINT>, 12
    @DefProto DllImport, SetupOpenAppendInfFileA, WIN_STD_CALL_CONV,, <:PCSTR, :HINF, :PUINT>, 12
    ifdef UNICODE
      SetupOpenAppendInfFile equ <SetupOpenAppendInfFileW>
    else
      SetupOpenAppendInfFile equ <SetupOpenAppendInfFileA>
    endif
    @DefProto DllImport, SetupCloseInfFile, WIN_STD_CALL_CONV,, <:HINF>, 4
    @DefProto DllImport, SetupFindFirstLineA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :PCSTR, :PINFCONTEXT>, 16
    @DefProto DllImport, SetupFindFirstLineW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :PCWSTR, :PINFCONTEXT>, 16
    ifdef UNICODE
      SetupFindFirstLine equ <SetupFindFirstLineW>
    else
      SetupFindFirstLine equ <SetupFindFirstLineA>
    endif
    @DefProto DllImport, SetupFindNextLine, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :PINFCONTEXT>, 8
    @DefProto DllImport, SetupFindNextMatchLineA, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :PCSTR, :PINFCONTEXT>, 12
    @DefProto DllImport, SetupFindNextMatchLineW, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :PCWSTR, :PINFCONTEXT>, 12
    ifdef UNICODE
      SetupFindNextMatchLine equ <SetupFindNextMatchLineW>
    else
      SetupFindNextMatchLine equ <SetupFindNextMatchLineA>
    endif
    @DefProto DllImport, SetupGetLineByIndexA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :DWORD, :PINFCONTEXT>, 16
    @DefProto DllImport, SetupGetLineByIndexW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :DWORD, :PINFCONTEXT>, 16
    ifdef UNICODE
      SetupGetLineByIndex equ <SetupGetLineByIndexW>
    else
      SetupGetLineByIndex equ <SetupGetLineByIndexA>
    endif
    @DefProto DllImport, SetupGetLineCountA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR>, 8
    @DefProto DllImport, SetupGetLineCountW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR>, 8
    ifdef UNICODE
      SetupGetLineCount equ <SetupGetLineCountW>
    else
      SetupGetLineCount equ <SetupGetLineCountA>
    endif
    @DefProto DllImport, SetupGetLineTextA, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :HINF, :PCSTR, :PCSTR, :PSTR, :DWORD, :PDWORD>, 28
    @DefProto DllImport, SetupGetLineTextW, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :HINF, :PCWSTR, :PCWSTR, :PWSTR, :DWORD, :PDWORD>, 28
    ifdef UNICODE
      SetupGetLineText equ <SetupGetLineTextW>
    else
      SetupGetLineText equ <SetupGetLineTextA>
    endif
    @DefProto DllImport, SetupGetFieldCount, WIN_STD_CALL_CONV,, <:PINFCONTEXT>, 4
    @DefProto DllImport, SetupGetStringFieldA, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PSTR, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupGetStringFieldW, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PWSTR, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupGetStringField equ <SetupGetStringFieldW>
    else
      SetupGetStringField equ <SetupGetStringFieldA>
    endif
    @DefProto DllImport, SetupGetIntField, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PINT>, 12
    @DefProto DllImport, SetupGetMultiSzFieldA, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PSTR, :DWORD, :LPDWORD>, 20
    @DefProto DllImport, SetupGetMultiSzFieldW, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PWSTR, :DWORD, :LPDWORD>, 20
    ifdef UNICODE
      SetupGetMultiSzField equ <SetupGetMultiSzFieldW>
    else
      SetupGetMultiSzField equ <SetupGetMultiSzFieldA>
    endif
    @DefProto DllImport, SetupGetBinaryField, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :DWORD, :PBYTE, :DWORD, :LPDWORD>, 20
    @DefProto DllImport, SetupGetFileCompressionInfoA, WIN_STD_CALL_CONV,, <:PCSTR, :ptr PSTR, :PDWORD, :PDWORD, :PUINT>, 20
    @DefProto DllImport, SetupGetFileCompressionInfoW, WIN_STD_CALL_CONV,, <:PCWSTR, :ptr PWSTR, :PDWORD, :PDWORD, :PUINT>, 20
    ifdef UNICODE
      SetupGetFileCompressionInfo equ <SetupGetFileCompressionInfoW>
    else
      SetupGetFileCompressionInfo equ <SetupGetFileCompressionInfoA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupGetFileCompressionInfoExA, WIN_STD_CALL_CONV,, <:PCSTR, :PSTR, :DWORD, :PDWORD, :PDWORD, :PDWORD, :PUINT>, 28
      @DefProto DllImport, SetupGetFileCompressionInfoExW, WIN_STD_CALL_CONV,, <:PCWSTR, :PWSTR, :DWORD, :PDWORD, :PDWORD, :PDWORD, :PUINT>, 28
      ifdef UNICODE
        SetupGetFileCompressionInfoEx equ <SetupGetFileCompressionInfoExW>
      else
        SetupGetFileCompressionInfoEx equ <SetupGetFileCompressionInfoExA>
      endif
    endif
    FILE_COMPRESSION_NONE equ 0
    FILE_COMPRESSION_WINLZA equ 1
    FILE_COMPRESSION_MSZIP equ 2
    FILE_COMPRESSION_NTCAB equ 3
    @DefProto DllImport, SetupDecompressOrCopyFileA, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PUINT>, 12
    @DefProto DllImport, SetupDecompressOrCopyFileW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :PUINT>, 12
    ifdef UNICODE
      SetupDecompressOrCopyFile equ <SetupDecompressOrCopyFileW>
    else
      SetupDecompressOrCopyFile equ <SetupDecompressOrCopyFileA>
    endif
    @DefProto DllImport, SetupGetSourceFileLocationA, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCSTR, :PUINT, :PSTR, :DWORD, :PDWORD>, 28
    @DefProto DllImport, SetupGetSourceFileLocationW, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCWSTR, :PUINT, :PWSTR, :DWORD, :PDWORD>, 28
    ifdef UNICODE
      SetupGetSourceFileLocation equ <SetupGetSourceFileLocationW>
    else
      SetupGetSourceFileLocation equ <SetupGetSourceFileLocationA>
    endif
    @DefProto DllImport, SetupGetSourceFileSizeA, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCSTR, :PCSTR, :PDWORD, :UINT>, 24
    @DefProto DllImport, SetupGetSourceFileSizeW, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCWSTR, :PCWSTR, :PDWORD, :UINT>, 24
    ifdef UNICODE
      SetupGetSourceFileSize equ <SetupGetSourceFileSizeW>
    else
      SetupGetSourceFileSize equ <SetupGetSourceFileSizeA>
    endif
    @DefProto DllImport, SetupGetTargetPathA, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCSTR, :PSTR, :DWORD, :PDWORD>, 24
    @DefProto DllImport, SetupGetTargetPathW, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCWSTR, :PWSTR, :DWORD, :PDWORD>, 24
    ifdef UNICODE
      SetupGetTargetPath equ <SetupGetTargetPathW>
    else
      SetupGetTargetPath equ <SetupGetTargetPathA>
    endif
    SRCLIST_TEMPORARY equ 00000001h
    SRCLIST_NOBROWSE equ 00000002h
    SRCLIST_SYSTEM equ 00000010h
    SRCLIST_USER equ 00000020h
    SRCLIST_SYSIFADMIN equ 00000040h
    SRCLIST_SUBDIRS equ 00000100h
    SRCLIST_APPEND equ 00000200h
    SRCLIST_NOSTRIPPLATFORM equ 00000400h
    @DefProto DllImport, SetupSetSourceListA, WIN_STD_CALL_CONV,, <:DWORD, :ptr PCSTR, :UINT>, 12
    @DefProto DllImport, SetupSetSourceListW, WIN_STD_CALL_CONV,, <:DWORD, :ptr PCWSTR, :UINT>, 12
    ifdef UNICODE
      SetupSetSourceList equ <SetupSetSourceListW>
    else
      SetupSetSourceList equ <SetupSetSourceListA>
    endif
    @DefProto DllImport, SetupCancelTemporarySourceList, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SetupAddToSourceListA, WIN_STD_CALL_CONV,, <:DWORD, :PCSTR>, 8
    @DefProto DllImport, SetupAddToSourceListW, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR>, 8
    ifdef UNICODE
      SetupAddToSourceList equ <SetupAddToSourceListW>
    else
      SetupAddToSourceList equ <SetupAddToSourceListA>
    endif
    @DefProto DllImport, SetupRemoveFromSourceListA, WIN_STD_CALL_CONV,, <:DWORD, :PCSTR>, 8
    @DefProto DllImport, SetupRemoveFromSourceListW, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR>, 8
    ifdef UNICODE
      SetupRemoveFromSourceList equ <SetupRemoveFromSourceListW>
    else
      SetupRemoveFromSourceList equ <SetupRemoveFromSourceListA>
    endif
    @DefProto DllImport, SetupQuerySourceListA, WIN_STD_CALL_CONV,, <:DWORD, :ptr ptr PCSTR, :PUINT>, 12
    @DefProto DllImport, SetupQuerySourceListW, WIN_STD_CALL_CONV,, <:DWORD, :ptr ptr PCWSTR, :PUINT>, 12
    ifdef UNICODE
      SetupQuerySourceList equ <SetupQuerySourceListW>
    else
      SetupQuerySourceList equ <SetupQuerySourceListA>
    endif
    @DefProto DllImport, SetupFreeSourceListA, WIN_STD_CALL_CONV,, <:ptr ptr PCSTR, :UINT>, 8
    @DefProto DllImport, SetupFreeSourceListW, WIN_STD_CALL_CONV,, <:ptr ptr PCWSTR, :UINT>, 8
    ifdef UNICODE
      SetupFreeSourceList equ <SetupFreeSourceListW>
    else
      SetupFreeSourceList equ <SetupFreeSourceListA>
    endif
    @DefProto DllImport, SetupPromptForDiskA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :DWORD, :PSTR, :DWORD, :PDWORD>, 40
    @DefProto DllImport, SetupPromptForDiskW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD, :PWSTR, :DWORD, :PDWORD>, 40
    ifdef UNICODE
      SetupPromptForDisk equ <SetupPromptForDiskW>
    else
      SetupPromptForDisk equ <SetupPromptForDiskA>
    endif
    @DefProto DllImport, SetupCopyErrorA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :UINT, :DWORD, :PSTR, :DWORD, :PDWORD>, 44
    @DefProto DllImport, SetupCopyErrorW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :UINT, :DWORD, :PWSTR, :DWORD, :PDWORD>, 44
    ifdef UNICODE
      SetupCopyError equ <SetupCopyErrorW>
    else
      SetupCopyError equ <SetupCopyErrorA>
    endif
    @DefProto DllImport, SetupRenameErrorA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :PCSTR, :PCSTR, :UINT, :DWORD>, 24
    @DefProto DllImport, SetupRenameErrorW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :PCWSTR, :PCWSTR, :UINT, :DWORD>, 24
    ifdef UNICODE
      SetupRenameError equ <SetupRenameErrorW>
    else
      SetupRenameError equ <SetupRenameErrorA>
    endif
    @DefProto DllImport, SetupDeleteErrorA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :PCSTR, :UINT, :DWORD>, 20
    @DefProto DllImport, SetupDeleteErrorW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :PCWSTR, :UINT, :DWORD>, 20
    ifdef UNICODE
      SetupDeleteError equ <SetupDeleteErrorW>
    else
      SetupDeleteError equ <SetupDeleteErrorA>
    endif
    @DefProto DllImport, SetupBackupErrorA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :PCSTR, :PCSTR, :UINT, :DWORD>, 24
    @DefProto DllImport, SetupBackupErrorW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :PCWSTR, :PCWSTR, :UINT, :DWORD>, 24
    ifdef UNICODE
      SetupBackupError equ <SetupBackupErrorW>
    else
      SetupBackupError equ <SetupBackupErrorA>
    endif
    IDF_NOBROWSE equ 00000001h
    IDF_NOSKIP equ 00000002h
    IDF_NODETAILS equ 00000004h
    IDF_NOCOMPRESSED equ 00000008h
    IDF_CHECKFIRST equ 00000100h
    IDF_NOBEEP equ 00000200h
    IDF_NOFOREGROUND equ 00000400h
    IDF_WARNIFSKIP equ 00000800h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      IDF_NOREMOVABLEMEDIAPROMPT equ 00001000h
      IDF_USEDISKNAMEASPROMPT equ 00002000h
      IDF_OEMDISK equ 80000000h
    endif
    DPROMPT_SUCCESS equ 0
    DPROMPT_CANCEL equ 1
    DPROMPT_SKIPFILE equ 2
    DPROMPT_BUFFERTOOSMALL equ 3
    DPROMPT_OUTOFMEMORY equ 4
    @DefProto DllImport, SetupSetDirectoryIdA, WIN_STD_CALL_CONV,, <:HINF, :DWORD, :PCSTR>, 12
    @DefProto DllImport, SetupSetDirectoryIdW, WIN_STD_CALL_CONV,, <:HINF, :DWORD, :PCWSTR>, 12
    ifdef UNICODE
      SetupSetDirectoryId equ <SetupSetDirectoryIdW>
    else
      SetupSetDirectoryId equ <SetupSetDirectoryIdA>
    endif
    @DefProto DllImport, SetupSetDirectoryIdExA, WIN_STD_CALL_CONV,, <:HINF, :DWORD, :PCSTR, :DWORD, :DWORD, :PVOID>, 24
    @DefProto DllImport, SetupSetDirectoryIdExW, WIN_STD_CALL_CONV,, <:HINF, :DWORD, :PCWSTR, :DWORD, :DWORD, :PVOID>, 24
    ifdef UNICODE
      SetupSetDirectoryIdEx equ <SetupSetDirectoryIdExW>
    else
      SetupSetDirectoryIdEx equ <SetupSetDirectoryIdExA>
    endif
    SETDIRID_NOT_FULL_PATH equ 00000001h
    @DefProto DllImport, SetupGetSourceInfoA, WIN_STD_CALL_CONV,, <:HINF, :UINT, :UINT, :PSTR, :DWORD, :PDWORD>, 24
    @DefProto DllImport, SetupGetSourceInfoW, WIN_STD_CALL_CONV,, <:HINF, :UINT, :UINT, :PWSTR, :DWORD, :PDWORD>, 24
    ifdef UNICODE
      SetupGetSourceInfo equ <SetupGetSourceInfoW>
    else
      SetupGetSourceInfo equ <SetupGetSourceInfoA>
    endif
    SRCINFO_PATH equ 1
    SRCINFO_TAGFILE equ 2
    SRCINFO_DESCRIPTION equ 3
    SRCINFO_FLAGS equ 4
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SRCINFO_TAGFILE2 equ 5
      SRC_FLAGS_CABFILE equ 0010h
    endif
    @DefProto DllImport, SetupInstallFileA, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCSTR, :PCSTR, :PCSTR, :DWORD, :PSP_FILE_CALLBACK_A, :PVOID>, 32
    @DefProto DllImport, SetupInstallFileW, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD, :PSP_FILE_CALLBACK_W, :PVOID>, 32
    ifdef UNICODE
      SetupInstallFile equ <SetupInstallFileW>
    else
      SetupInstallFile equ <SetupInstallFileA>
    endif
    @DefProto DllImport, SetupInstallFileExA, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCSTR, :PCSTR, :PCSTR, :DWORD, :PSP_FILE_CALLBACK_A, :PVOID, :PBOOL>, 36
    @DefProto DllImport, SetupInstallFileExW, WIN_STD_CALL_CONV,, <:HINF, :PINFCONTEXT, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD, :PSP_FILE_CALLBACK_W, :PVOID, :PBOOL>, 36
    ifdef UNICODE
      SetupInstallFileEx equ <SetupInstallFileExW>
    else
      SetupInstallFileEx equ <SetupInstallFileExA>
    endif
    SP_COPY_DELETESOURCE equ 0000001h
    SP_COPY_REPLACEONLY equ 0000002h
    SP_COPY_NEWER equ 0000004h
    SP_COPY_NEWER_OR_SAME equ <SP_COPY_NEWER>
    SP_COPY_NOOVERWRITE equ 0000008h
    SP_COPY_NODECOMP equ 0000010h
    SP_COPY_LANGUAGEAWARE equ 0000020h
    SP_COPY_SOURCE_ABSOLUTE equ 0000040h
    SP_COPY_SOURCEPATH_ABSOLUTE equ 0000080h
    SP_COPY_IN_USE_NEEDS_REBOOT equ 0000100h
    SP_COPY_FORCE_IN_USE equ 0000200h
    SP_COPY_NOSKIP equ 0000400h
    SP_FLAG_CABINETCONTINUATION equ 0000800h
    SP_COPY_FORCE_NOOVERWRITE equ 0001000h
    SP_COPY_FORCE_NEWER equ 0002000h
    SP_COPY_WARNIFSKIP equ 0004000h
    SP_COPY_NOBROWSE equ 0008000h
    SP_COPY_NEWER_ONLY equ 0010000h
    SP_COPY_RESERVED equ 0020000h
    SP_COPY_OEMINF_CATALOG_ONLY equ 0040000h
    SP_COPY_REPLACE_BOOT_FILE equ 0080000h
    SP_COPY_NOPRUNE equ 0100000h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SP_COPY_OEM_F6_INF equ 0200000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SP_COPY_ALREADYDECOMP equ 0400000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      SP_COPY_WINDOWS_SIGNED equ 1000000h
      SP_COPY_PNPLOCKED equ 2000000h
      SP_COPY_IN_USE_TRY_RENAME equ 4000000h
      SP_COPY_INBOX_INF equ 8000000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN7
      SP_COPY_HARDLINK equ 10000000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SP_BACKUP_BACKUPPASS equ 00000001h
      SP_BACKUP_DEMANDPASS equ 00000002h
      SP_BACKUP_SPECIAL equ 00000004h
      SP_BACKUP_BOOTFILE equ 00000008h
    endif
    @DefProto DllImport, SetupOpenFileQueue, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SetupCloseFileQueue, WIN_STD_CALL_CONV,, <:HSPFILEQ>, 4
    @DefProto DllImport, SetupSetFileQueueAlternatePlatformA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PSP_ALTPLATFORM_INFO, :PCSTR>, 12
    @DefProto DllImport, SetupSetFileQueueAlternatePlatformW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PSP_ALTPLATFORM_INFO, :PCWSTR>, 12
    ifdef UNICODE
      SetupSetFileQueueAlternatePlatform equ <SetupSetFileQueueAlternatePlatformW>
    else
      SetupSetFileQueueAlternatePlatform equ <SetupSetFileQueueAlternatePlatformA>
    endif
    @DefProto DllImport, SetupSetPlatformPathOverrideA, WIN_STD_CALL_CONV,, <:PCSTR>, 4
    @DefProto DllImport, SetupSetPlatformPathOverrideW, WIN_STD_CALL_CONV,, <:PCWSTR>, 4
    ifdef UNICODE
      SetupSetPlatformPathOverride equ <SetupSetPlatformPathOverrideW>
    else
      SetupSetPlatformPathOverride equ <SetupSetPlatformPathOverrideA>
    endif
    @DefProto DllImport, SetupQueueCopyA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :PCSTR, :DWORD>, 36
    @DefProto DllImport, SetupQueueCopyW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD>, 36
    ifdef UNICODE
      SetupQueueCopy equ <SetupQueueCopyW>
    else
      SetupQueueCopy equ <SetupQueueCopyA>
    endif
    @DefProto DllImport, SetupQueueCopyIndirectA, WIN_STD_CALL_CONV,, <:PSP_FILE_COPY_PARAMS_A>, 4
    @DefProto DllImport, SetupQueueCopyIndirectW, WIN_STD_CALL_CONV,, <:PSP_FILE_COPY_PARAMS_W>, 4
    ifdef UNICODE
      SetupQueueCopyIndirect equ <SetupQueueCopyIndirectW>
    else
      SetupQueueCopyIndirect equ <SetupQueueCopyIndirectA>
    endif
    @DefProto DllImport, SetupQueueDefaultCopyA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :PCSTR, :PCSTR, :PCSTR, :DWORD>, 24
    @DefProto DllImport, SetupQueueDefaultCopyW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD>, 24
    ifdef UNICODE
      SetupQueueDefaultCopy equ <SetupQueueDefaultCopyW>
    else
      SetupQueueDefaultCopy equ <SetupQueueDefaultCopyA>
    endif
    @DefProto DllImport, SetupQueueCopySectionA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCSTR, :HINF, :HINF, :PCSTR, :DWORD>, 24
    @DefProto DllImport, SetupQueueCopySectionW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCWSTR, :HINF, :HINF, :PCWSTR, :DWORD>, 24
    ifdef UNICODE
      SetupQueueCopySection equ <SetupQueueCopySectionW>
    else
      SetupQueueCopySection equ <SetupQueueCopySectionA>
    endif
    @DefProto DllImport, SetupQueueDeleteA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCSTR, :PCSTR>, 12
    @DefProto DllImport, SetupQueueDeleteW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCWSTR, :PCWSTR>, 12
    ifdef UNICODE
      SetupQueueDelete equ <SetupQueueDeleteW>
    else
      SetupQueueDelete equ <SetupQueueDeleteA>
    endif
    @DefProto DllImport, SetupQueueDeleteSectionA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :HINF, :PCSTR>, 16
    @DefProto DllImport, SetupQueueDeleteSectionW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :HINF, :PCWSTR>, 16
    ifdef UNICODE
      SetupQueueDeleteSection equ <SetupQueueDeleteSectionW>
    else
      SetupQueueDeleteSection equ <SetupQueueDeleteSectionA>
    endif
    @DefProto DllImport, SetupQueueRenameA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCSTR, :PCSTR, :PCSTR, :PCSTR>, 20
    @DefProto DllImport, SetupQueueRenameW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR>, 20
    ifdef UNICODE
      SetupQueueRename equ <SetupQueueRenameW>
    else
      SetupQueueRename equ <SetupQueueRenameA>
    endif
    @DefProto DllImport, SetupQueueRenameSectionA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :HINF, :PCSTR>, 16
    @DefProto DllImport, SetupQueueRenameSectionW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HINF, :HINF, :PCWSTR>, 16
    ifdef UNICODE
      SetupQueueRenameSection equ <SetupQueueRenameSectionW>
    else
      SetupQueueRenameSection equ <SetupQueueRenameSectionA>
    endif
    @DefProto DllImport, SetupCommitFileQueueA, WIN_STD_CALL_CONV,, <:HWND, :HSPFILEQ, :PSP_FILE_CALLBACK_A, :PVOID>, 16
    @DefProto DllImport, SetupCommitFileQueueW, WIN_STD_CALL_CONV,, <:HWND, :HSPFILEQ, :PSP_FILE_CALLBACK_W, :PVOID>, 16
    ifdef UNICODE
      SetupCommitFileQueue equ <SetupCommitFileQueueW>
    else
      SetupCommitFileQueue equ <SetupCommitFileQueueA>
    endif
    @DefProto DllImport, SetupScanFileQueueA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :DWORD, :HWND, :PSP_FILE_CALLBACK_A, :PVOID, :PDWORD>, 24
    @DefProto DllImport, SetupScanFileQueueW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :DWORD, :HWND, :PSP_FILE_CALLBACK_W, :PVOID, :PDWORD>, 24
    ifdef UNICODE
      SetupScanFileQueue equ <SetupScanFileQueueW>
    else
      SetupScanFileQueue equ <SetupScanFileQueueA>
    endif
    SPQ_SCAN_FILE_PRESENCE equ 00000001h
    SPQ_SCAN_FILE_VALIDITY equ 00000002h
    SPQ_SCAN_USE_CALLBACK equ 00000004h
    SPQ_SCAN_USE_CALLBACKEX equ 00000008h
    SPQ_SCAN_INFORM_USER equ 00000010h
    SPQ_SCAN_PRUNE_COPY_QUEUE equ 00000020h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SPQ_SCAN_USE_CALLBACK_SIGNERINFO equ 00000040h
      SPQ_SCAN_PRUNE_DELREN equ 00000080h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE equ 00000100h
      SPQ_SCAN_FILE_COMPARISON equ 00000200h
      SPQ_SCAN_ACTIVATE_DRP equ 00000400h
    endif
    SPQ_DELAYED_COPY equ 00000001h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupGetFileQueueCount, WIN_STD_CALL_CONV,, <:HSPFILEQ, :UINT, :PUINT>, 12
      @DefProto DllImport, SetupGetFileQueueFlags, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PDWORD>, 8
      @DefProto DllImport, SetupSetFileQueueFlags, WIN_STD_CALL_CONV,, <:HSPFILEQ, :DWORD, :DWORD>, 12
      SPQ_FLAG_BACKUP_AWARE equ 00000001h
      SPQ_FLAG_ABORT_IF_UNSIGNED equ 00000002h
      SPQ_FLAG_FILES_MODIFIED equ 00000004h
      SPQ_FLAG_DO_SHUFFLEMOVE equ 00000008h
      SPQ_FLAG_VALID equ 0000000Fh
    endif
    SPOST_NONE equ 0
    SPOST_PATH equ 1
    SPOST_URL equ 2
    SPOST_MAX equ 3
    @DefProto DllImport, SetupCopyOEMInfA, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :DWORD, :DWORD, :PSTR, :DWORD, :PDWORD, :ptr PSTR>, 32
    @DefProto DllImport, SetupCopyOEMInfW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :DWORD, :DWORD, :PWSTR, :DWORD, :PDWORD, :ptr PWSTR>, 32
    ifdef UNICODE
      SetupCopyOEMInf equ <SetupCopyOEMInfW>
    else
      SetupCopyOEMInf equ <SetupCopyOEMInfA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SUOI_FORCEDELETE equ 00000001h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      SUOI_INTERNAL1 equ 00000002h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupUninstallOEMInfA, WIN_STD_CALL_CONV,, <:PCSTR, :DWORD, :PVOID>, 12
      @DefProto DllImport, SetupUninstallOEMInfW, WIN_STD_CALL_CONV,, <:PCWSTR, :DWORD, :PVOID>, 12
      ifdef UNICODE
        SetupUninstallOEMInf equ <SetupUninstallOEMInfW>
      else
        SetupUninstallOEMInf equ <SetupUninstallOEMInfA>
      endif
      @DefProto DllImport, SetupUninstallNewlyCopiedInfs, WIN_STD_CALL_CONV,, <:HSPFILEQ, :DWORD, :PVOID>, 12
    endif
    @DefProto DllImport, SetupCreateDiskSpaceListA, WIN_STD_CALL_CONV,, <:PVOID, :DWORD, :UINT>, 12
    @DefProto DllImport, SetupCreateDiskSpaceListW, WIN_STD_CALL_CONV,, <:PVOID, :DWORD, :UINT>, 12
    ifdef UNICODE
      SetupCreateDiskSpaceList equ <SetupCreateDiskSpaceListW>
    else
      SetupCreateDiskSpaceList equ <SetupCreateDiskSpaceListA>
    endif
    SPDSL_IGNORE_DISK equ 00000001h
    SPDSL_DISALLOW_NEGATIVE_ADJUST equ 00000002h
    @DefProto DllImport, SetupDuplicateDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :PVOID, :DWORD, :UINT>, 16
    @DefProto DllImport, SetupDuplicateDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :PVOID, :DWORD, :UINT>, 16
    ifdef UNICODE
      SetupDuplicateDiskSpaceList equ <SetupDuplicateDiskSpaceListW>
    else
      SetupDuplicateDiskSpaceList equ <SetupDuplicateDiskSpaceListA>
    endif
    @DefProto DllImport, SetupDestroyDiskSpaceList, WIN_STD_CALL_CONV,, <:HDSKSPC>, 4
    @DefProto DllImport, SetupQueryDrivesInDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :PSTR, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupQueryDrivesInDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :PWSTR, :DWORD, :PDWORD>, 16
    ifdef UNICODE
      SetupQueryDrivesInDiskSpaceList equ <SetupQueryDrivesInDiskSpaceListW>
    else
      SetupQueryDrivesInDiskSpaceList equ <SetupQueryDrivesInDiskSpaceListA>
    endif
    @DefProto DllImport, SetupQuerySpaceRequiredOnDriveA, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCSTR, :ptr LONGLONG, :PVOID, :UINT>, 20
    @DefProto DllImport, SetupQuerySpaceRequiredOnDriveW, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCWSTR, :ptr LONGLONG, :PVOID, :UINT>, 20
    ifdef UNICODE
      SetupQuerySpaceRequiredOnDrive equ <SetupQuerySpaceRequiredOnDriveW>
    else
      SetupQuerySpaceRequiredOnDrive equ <SetupQuerySpaceRequiredOnDriveA>
    endif
    @DefProto DllImport, SetupAdjustDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :LPCSTR, :LONGLONG, :PVOID, :UINT>, 24
    @DefProto DllImport, SetupAdjustDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :LPCWSTR, :LONGLONG, :PVOID, :UINT>, 24
    ifdef UNICODE
      SetupAdjustDiskSpaceList equ <SetupAdjustDiskSpaceListW>
    else
      SetupAdjustDiskSpaceList equ <SetupAdjustDiskSpaceListA>
    endif
    @DefProto DllImport, SetupAddToDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCSTR, :LONGLONG, :UINT, :PVOID, :UINT>, 28
    @DefProto DllImport, SetupAddToDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCWSTR, :LONGLONG, :UINT, :PVOID, :UINT>, 28
    ifdef UNICODE
      SetupAddToDiskSpaceList equ <SetupAddToDiskSpaceListW>
    else
      SetupAddToDiskSpaceList equ <SetupAddToDiskSpaceListA>
    endif
    @DefProto DllImport, SetupAddSectionToDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCSTR, :UINT, :PVOID, :UINT>, 28
    @DefProto DllImport, SetupAddSectionToDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCWSTR, :UINT, :PVOID, :UINT>, 28
    ifdef UNICODE
      SetupAddSectionToDiskSpaceList equ <SetupAddSectionToDiskSpaceListW>
    else
      SetupAddSectionToDiskSpaceList equ <SetupAddSectionToDiskSpaceListA>
    endif
    @DefProto DllImport, SetupAddInstallSectionToDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCSTR, :PVOID, :UINT>, 24
    @DefProto DllImport, SetupAddInstallSectionToDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCWSTR, :PVOID, :UINT>, 24
    ifdef UNICODE
      SetupAddInstallSectionToDiskSpaceList equ <SetupAddInstallSectionToDiskSpaceListW>
    else
      SetupAddInstallSectionToDiskSpaceList equ <SetupAddInstallSectionToDiskSpaceListA>
    endif
    @DefProto DllImport, SetupRemoveFromDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCSTR, :UINT, :PVOID, :UINT>, 20
    @DefProto DllImport, SetupRemoveFromDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :PCWSTR, :UINT, :PVOID, :UINT>, 20
    ifdef UNICODE
      SetupRemoveFromDiskSpaceList equ <SetupRemoveFromDiskSpaceListW>
    else
      SetupRemoveFromDiskSpaceList equ <SetupRemoveFromDiskSpaceListA>
    endif
    @DefProto DllImport, SetupRemoveSectionFromDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCSTR, :UINT, :PVOID, :UINT>, 28
    @DefProto DllImport, SetupRemoveSectionFromDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCWSTR, :UINT, :PVOID, :UINT>, 28
    ifdef UNICODE
      SetupRemoveSectionFromDiskSpaceList equ <SetupRemoveSectionFromDiskSpaceListW>
    else
      SetupRemoveSectionFromDiskSpaceList equ <SetupRemoveSectionFromDiskSpaceListA>
    endif
    @DefProto DllImport, SetupRemoveInstallSectionFromDiskSpaceListA, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCSTR, :PVOID, :UINT>, 24
    @DefProto DllImport, SetupRemoveInstallSectionFromDiskSpaceListW, WIN_STD_CALL_CONV,, <:HDSKSPC, :HINF, :HINF, :PCWSTR, :PVOID, :UINT>, 24
    ifdef UNICODE
      SetupRemoveInstallSectionFromDiskSpaceList equ <SetupRemoveInstallSectionFromDiskSpaceListW>
    else
      SetupRemoveInstallSectionFromDiskSpaceList equ <SetupRemoveInstallSectionFromDiskSpaceListA>
    endif
    @DefProto DllImport, SetupIterateCabinetA, WIN_STD_CALL_CONV,, <:PCSTR, :DWORD, :PSP_FILE_CALLBACK_A, :PVOID>, 16
    @DefProto DllImport, SetupIterateCabinetW, WIN_STD_CALL_CONV,, <:PCWSTR, :DWORD, :PSP_FILE_CALLBACK_W, :PVOID>, 16
    ifdef UNICODE
      SetupIterateCabinet equ <SetupIterateCabinetW>
    else
      SetupIterateCabinet equ <SetupIterateCabinetA>
    endif
    @DefProto DllImport, SetupPromptReboot, WIN_STD_CALL_CONV,, <:HSPFILEQ, :HWND, :BOOL>, 12
    SPFILEQ_FILE_IN_USE equ 00000001h
    SPFILEQ_REBOOT_RECOMMENDED equ 00000002h
    SPFILEQ_REBOOT_IN_PROGRESS equ 00000004h
    @DefProto DllImport, SetupInitDefaultQueueCallback, WIN_STD_CALL_CONV,, <:HWND>, 4
    @DefProto DllImport, SetupInitDefaultQueueCallbackEx, WIN_STD_CALL_CONV,, <:HWND, :HWND, :UINT, :DWORD, :PVOID>, 20
    @DefProto DllImport, SetupTermDefaultQueueCallback, WIN_STD_CALL_CONV,, <:PVOID>, 4
    @DefProto DllImport, SetupDefaultQueueCallbackA, WIN_STD_CALL_CONV,, <:PVOID, :UINT, :UINT_PTR, :UINT_PTR>, 16
    @DefProto DllImport, SetupDefaultQueueCallbackW, WIN_STD_CALL_CONV,, <:PVOID, :UINT, :UINT_PTR, :UINT_PTR>, 16
    ifdef UNICODE
      SetupDefaultQueueCallback equ <SetupDefaultQueueCallbackW>
    else
      SetupDefaultQueueCallback equ <SetupDefaultQueueCallbackA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FLG_ADDREG_DELREG_BIT equ 00008000h
    endif
    FLG_ADDREG_BINVALUETYPE equ 00000001h
    FLG_ADDREG_NOCLOBBER equ 00000002h
    FLG_ADDREG_DELVAL equ 00000004h
    FLG_ADDREG_APPEND equ 00000008h
    FLG_ADDREG_KEYONLY equ 00000010h
    FLG_ADDREG_OVERWRITEONLY equ 00000020h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FLG_ADDREG_64BITKEY equ 00001000h
      FLG_ADDREG_KEYONLY_COMMON equ 00002000h
      FLG_ADDREG_32BITKEY equ 00004000h
    endif
    FLG_ADDREG_TYPE_MASK equ (0FFFF0000h or FLG_ADDREG_BINVALUETYPE)
    FLG_ADDREG_TYPE_SZ equ 00000000h
    FLG_ADDREG_TYPE_MULTI_SZ equ 00010000h
    FLG_ADDREG_TYPE_EXPAND_SZ equ 00020000h
    FLG_ADDREG_TYPE_BINARY equ (00000000h or FLG_ADDREG_BINVALUETYPE)
    FLG_ADDREG_TYPE_DWORD equ (00010000h or FLG_ADDREG_BINVALUETYPE)
    FLG_ADDREG_TYPE_NONE equ (00020000h or FLG_ADDREG_BINVALUETYPE)
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN10
      FLG_ADDREG_TYPE_QWORD equ (000B0000h or FLG_ADDREG_BINVALUETYPE)
    endif
    FLG_DELREG_VALUE equ 00000000h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FLG_DELREG_TYPE_MASK equ <FLG_ADDREG_TYPE_MASK>
      FLG_DELREG_TYPE_SZ equ <FLG_ADDREG_TYPE_SZ>
      FLG_DELREG_TYPE_MULTI_SZ equ <FLG_ADDREG_TYPE_MULTI_SZ>
      FLG_DELREG_TYPE_EXPAND_SZ equ <FLG_ADDREG_TYPE_EXPAND_SZ>
      FLG_DELREG_TYPE_BINARY equ <FLG_ADDREG_TYPE_BINARY>
      FLG_DELREG_TYPE_DWORD equ <FLG_ADDREG_TYPE_DWORD>
      FLG_DELREG_TYPE_NONE equ <FLG_ADDREG_TYPE_NONE>
      FLG_DELREG_64BITKEY equ <FLG_ADDREG_64BITKEY>
      FLG_DELREG_KEYONLY_COMMON equ <FLG_ADDREG_KEYONLY_COMMON>
      FLG_DELREG_32BITKEY equ <FLG_ADDREG_32BITKEY>
      FLG_DELREG_OPERATION_MASK equ 000000FEh
      FLG_DELREG_MULTI_SZ_DELSTRING equ (FLG_DELREG_TYPE_MULTI_SZ or FLG_ADDREG_DELREG_BIT or 00000002h)
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN10
      FLG_DELREG_TYPE_QWORD equ <FLG_ADDREG_TYPE_QWORD>
    endif
    FLG_BITREG_CLEARBITS equ 00000000h
    FLG_BITREG_SETBITS equ 00000001h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FLG_BITREG_64BITKEY equ 00001000h
      FLG_BITREG_32BITKEY equ 00004000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      FLG_INI2REG_64BITKEY equ 00001000h
      FLG_INI2REG_32BITKEY equ 00004000h
    endif
    FLG_REGSVR_DLLREGISTER equ 00000001h
    FLG_REGSVR_DLLINSTALL equ 00000002h
    FLG_PROFITEM_CURRENTUSER equ 00000001h
    FLG_PROFITEM_DELETE equ 00000002h
    FLG_PROFITEM_GROUP equ 00000004h
    FLG_PROFITEM_CSIDL equ 00000008h
    FLG_ADDPROPERTY_NOCLOBBER equ 00000001h
    FLG_ADDPROPERTY_OVERWRITEONLY equ 00000002h
    FLG_ADDPROPERTY_APPEND equ 00000004h
    FLG_ADDPROPERTY_OR equ 00000008h
    FLG_ADDPROPERTY_AND equ 00000010h
    FLG_DELPROPERTY_MULTI_SZ_DELSTRING equ 00000001h
    @DefProto DllImport, SetupInstallFromInfSectionA, WIN_STD_CALL_CONV,, <:HWND, :HINF, :PCSTR, :UINT, :HKEY, :PCSTR, :UINT, :PSP_FILE_CALLBACK_A, :PVOID, :HDEVINFO, :PSP_DEVINFO_DATA>, 44
    @DefProto DllImport, SetupInstallFromInfSectionW, WIN_STD_CALL_CONV,, <:HWND, :HINF, :PCWSTR, :UINT, :HKEY, :PCWSTR, :UINT, :PSP_FILE_CALLBACK_W, :PVOID, :HDEVINFO, :PSP_DEVINFO_DATA>, 44
    ifdef UNICODE
      SetupInstallFromInfSection equ <SetupInstallFromInfSectionW>
    else
      SetupInstallFromInfSection equ <SetupInstallFromInfSectionA>
    endif
    SPINST_LOGCONFIG equ 00000001h
    SPINST_INIFILES equ 00000002h
    SPINST_REGISTRY equ 00000004h
    SPINST_INI2REG equ 00000008h
    SPINST_FILES equ 00000010h
    SPINST_BITREG equ 00000020h
    SPINST_REGSVR equ 00000040h
    SPINST_UNREGSVR equ 00000080h
    SPINST_PROFILEITEMS equ 00000100h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SPINST_COPYINF equ 00000200h
      if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
        SPINST_PROPERTIES equ 00000400h
        SPINST_ALL equ 000007ffh
      else
        SPINST_ALL equ 000003ffh
      endif
    else
      SPINST_ALL equ 000001ffh
    endif
    SPINST_SINGLESECTION equ 00010000h
    SPINST_LOGCONFIG_IS_FORCED equ 00020000h
    SPINST_LOGCONFIGS_ARE_OVERRIDES equ 00040000h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SPINST_REGISTERCALLBACKAWARE equ 00080000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      SPINST_DEVICEINSTALL equ 00100000h
    endif
    @DefProto DllImport, SetupInstallFilesFromInfSectionA, WIN_STD_CALL_CONV,, <:HINF, :HINF, :HSPFILEQ, :PCSTR, :PCSTR, :UINT>, 24
    @DefProto DllImport, SetupInstallFilesFromInfSectionW, WIN_STD_CALL_CONV,, <:HINF, :HINF, :HSPFILEQ, :PCWSTR, :PCWSTR, :UINT>, 24
    ifdef UNICODE
      SetupInstallFilesFromInfSection equ <SetupInstallFilesFromInfSectionW>
    else
      SetupInstallFilesFromInfSection equ <SetupInstallFilesFromInfSectionA>
    endif
    SPSVCINST_TAGTOFRONT equ 00000001h
    SPSVCINST_ASSOCSERVICE equ 00000002h
    SPSVCINST_DELETEEVENTLOGENTRY equ 00000004h
    SPSVCINST_NOCLOBBER_DISPLAYNAME equ 00000008h
    SPSVCINST_NOCLOBBER_STARTTYPE equ 00000010h
    SPSVCINST_NOCLOBBER_ERRORCONTROL equ 00000020h
    SPSVCINST_NOCLOBBER_LOADORDERGROUP equ 00000040h
    SPSVCINST_NOCLOBBER_DEPENDENCIES equ 00000080h
    SPSVCINST_NOCLOBBER_DESCRIPTION equ 00000100h
    SPSVCINST_STOPSERVICE equ 00000200h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SPSVCINST_CLOBBER_SECURITY equ 00000400h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      SPSVCINST_STARTSERVICE equ 00000800h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN7
      SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES equ 00001000h
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WIN10
      SPSVCINST_NOCLOBBER_TRIGGERS equ 00002000h
    endif
    @DefProto DllImport, SetupInstallServicesFromInfSectionA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :DWORD>, 12
    @DefProto DllImport, SetupInstallServicesFromInfSectionW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :DWORD>, 12
    ifdef UNICODE
      SetupInstallServicesFromInfSection equ <SetupInstallServicesFromInfSectionW>
    else
      SetupInstallServicesFromInfSection equ <SetupInstallServicesFromInfSectionA>
    endif
    @DefProto DllImport, SetupInstallServicesFromInfSectionExA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :DWORD, :HDEVINFO, :PSP_DEVINFO_DATA, :PVOID, :PVOID>, 28
    @DefProto DllImport, SetupInstallServicesFromInfSectionExW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :DWORD, :HDEVINFO, :PSP_DEVINFO_DATA, :PVOID, :PVOID>, 28
    ifdef UNICODE
      SetupInstallServicesFromInfSectionEx equ <SetupInstallServicesFromInfSectionExW>
    else
      SetupInstallServicesFromInfSectionEx equ <SetupInstallServicesFromInfSectionExA>
    endif
    InstallHinfSectionA proto WIN_STD_CALL_CONV :HWND, :HINSTANCE, :PCSTR, :INT_
    InstallHinfSectionW proto WIN_STD_CALL_CONV :HWND, :HINSTANCE, :PCWSTR, :INT_
    ifdef UNICODE
      InstallHinfSection equ <InstallHinfSectionW>
    else
      InstallHinfSection equ <InstallHinfSectionA>
    endif
    HSPFILELOG typedef PVOID
    @DefProto DllImport, SetupInitializeFileLogA, WIN_STD_CALL_CONV,, <:PCSTR, :DWORD>, 8
    @DefProto DllImport, SetupInitializeFileLogW, WIN_STD_CALL_CONV,, <:PCWSTR, :DWORD>, 8
    ifdef UNICODE
      SetupInitializeFileLog equ <SetupInitializeFileLogW>
    else
      SetupInitializeFileLog equ <SetupInitializeFileLogA>
    endif
    SPFILELOG_SYSTEMLOG equ 00000001h
    SPFILELOG_FORCENEW equ 00000002h
    SPFILELOG_QUERYONLY equ 00000004h
    @DefProto DllImport, SetupTerminateFileLog, WIN_STD_CALL_CONV,, <:HSPFILELOG>, 4
    @DefProto DllImport, SetupLogFileA, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCSTR, :PCSTR, :PCSTR, :DWORD, :PCSTR, :PCSTR, :PCSTR, :DWORD>, 36
    @DefProto DllImport, SetupLogFileW, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD>, 36
    ifdef UNICODE
      SetupLogFile equ <SetupLogFileW>
    else
      SetupLogFile equ <SetupLogFileA>
    endif
    SPFILELOG_OEMFILE equ 00000001h
    @DefProto DllImport, SetupRemoveFileLogEntryA, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCSTR, :PCSTR>, 12
    @DefProto DllImport, SetupRemoveFileLogEntryW, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCWSTR, :PCWSTR>, 12
    ifdef UNICODE
      SetupRemoveFileLogEntry equ <SetupRemoveFileLogEntryW>
    else
      SetupRemoveFileLogEntry equ <SetupRemoveFileLogEntryA>
    endif
    SetupFileLogInfo typedef SDWORD
    SetupFileLogSourceFilename equ 0
    SetupFileLogChecksum equ 1
    SetupFileLogDiskTagfile equ 2
    SetupFileLogDiskDescription equ 3
    SetupFileLogOtherInfo equ 4
    SetupFileLogMax equ 5
    
    @DefProto DllImport, SetupQueryFileLogA, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCSTR, :PCSTR, :SetupFileLogInfo, :PSTR, :DWORD, :PDWORD>, 28
    @DefProto DllImport, SetupQueryFileLogW, WIN_STD_CALL_CONV,, <:HSPFILELOG, :PCWSTR, :PCWSTR, :SetupFileLogInfo, :PWSTR, :DWORD, :PDWORD>, 28
    ifdef UNICODE
      SetupQueryFileLog equ <SetupQueryFileLogW>
    else
      SetupQueryFileLog equ <SetupQueryFileLogA>
    endif
    LogSeverity equ <DWORD>
    LogSevInformation equ 00000000h
    LogSevWarning equ 00000001h
    LogSevError equ 00000002h
    LogSevFatalError equ 00000003h
    LogSevMaximum equ 00000004h
    @DefProto DllImport, SetupOpenLog, WIN_STD_CALL_CONV,, <:BOOL>, 4
    @DefProto DllImport, SetupLogErrorA, WIN_STD_CALL_CONV,, <:LPCSTR, :LogSeverity>, 8
    @DefProto DllImport, SetupLogErrorW, WIN_STD_CALL_CONV,, <:LPCWSTR, :LogSeverity>, 8
    ifdef UNICODE
      SetupLogError equ <SetupLogErrorW>
    else
      SetupLogError equ <SetupLogErrorA>
    endif
    @DefProto DllImport, SetupCloseLog, WIN_STD_CALL_CONV,, <>, 0
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      @DefProto DllImport, SetupGetThreadLogToken, WIN_STD_CALL_CONV,, <>, 0
      @DefProto DllImport, SetupSetThreadLogToken, WIN_STD_CALL_CONV,, <:SP_LOG_TOKEN>, 4
      @DefProto DllImport, SetupWriteTextLog, WIN_STD_CALL_CONV,, <:SP_LOG_TOKEN, :DWORD, :DWORD, :PCSTR, :vararg>, 20
      @DefProto DllImport, SetupWriteTextLogError, WIN_STD_CALL_CONV,, <:SP_LOG_TOKEN, :DWORD, :DWORD, :DWORD, :PCSTR, :vararg>, 24
      @DefProto DllImport, SetupWriteTextLogInfLine, WIN_STD_CALL_CONV,, <:SP_LOG_TOKEN, :DWORD, :HINF, :PINFCONTEXT>, 16
    endif
    @DefProto DllImport, SetupGetBackupInformationA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PSP_BACKUP_QUEUE_PARAMS_A>, 8
    @DefProto DllImport, SetupGetBackupInformationW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PSP_BACKUP_QUEUE_PARAMS_W>, 8
    ifdef UNICODE
      SetupGetBackupInformation equ <SetupGetBackupInformationW>
    else
      SetupGetBackupInformation equ <SetupGetBackupInformationA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupPrepareQueueForRestoreA, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCSTR, :DWORD>, 12
      @DefProto DllImport, SetupPrepareQueueForRestoreW, WIN_STD_CALL_CONV,, <:HSPFILEQ, :PCWSTR, :DWORD>, 12
      ifdef UNICODE
        SetupPrepareQueueForRestore equ <SetupPrepareQueueForRestoreW>
      else
        SetupPrepareQueueForRestore equ <SetupPrepareQueueForRestoreA>
      endif
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupSetNonInteractiveMode, WIN_STD_CALL_CONV,, <:BOOL>, 4
      @DefProto DllImport, SetupGetNonInteractiveMode, WIN_STD_CALL_CONV,, <>, 0
    endif
    @DefProto DllImport, SetupDiCreateDeviceInfoList, WIN_STD_CALL_CONV,, <:ptr GUID, :HWND>, 8
    @DefProto DllImport, SetupDiCreateDeviceInfoListExA, WIN_STD_CALL_CONV,, <:ptr GUID, :HWND, :PCSTR, :PVOID>, 16
    @DefProto DllImport, SetupDiCreateDeviceInfoListExW, WIN_STD_CALL_CONV,, <:ptr GUID, :HWND, :PCWSTR, :PVOID>, 16
    ifdef UNICODE
      SetupDiCreateDeviceInfoListEx equ <SetupDiCreateDeviceInfoListExW>
    else
      SetupDiCreateDeviceInfoListEx equ <SetupDiCreateDeviceInfoListExA>
    endif
    @DefProto DllImport, SetupDiGetDeviceInfoListClass, WIN_STD_CALL_CONV,, <:HDEVINFO, :LPGUID>, 8
    @DefProto DllImport, SetupDiGetDeviceInfoListDetailA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_LIST_DETAIL_DATA_A>, 8
    @DefProto DllImport, SetupDiGetDeviceInfoListDetailW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_LIST_DETAIL_DATA_W>, 8
    ifdef UNICODE
      SetupDiGetDeviceInfoListDetail equ <SetupDiGetDeviceInfoListDetailW>
    else
      SetupDiGetDeviceInfoListDetail equ <SetupDiGetDeviceInfoListDetailA>
    endif
    DICD_GENERATE_ID equ 00000001h
    DICD_INHERIT_CLASSDRVS equ 00000002h
    @DefProto DllImport, SetupDiCreateDeviceInfoA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCSTR, :ptr GUID, :PCSTR, :HWND, :DWORD, :PSP_DEVINFO_DATA>, 28
    @DefProto DllImport, SetupDiCreateDeviceInfoW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCWSTR, :ptr GUID, :PCWSTR, :HWND, :DWORD, :PSP_DEVINFO_DATA>, 28
    ifdef UNICODE
      SetupDiCreateDeviceInfo equ <SetupDiCreateDeviceInfoW>
    else
      SetupDiCreateDeviceInfo equ <SetupDiCreateDeviceInfoA>
    endif
    DIOD_INHERIT_CLASSDRVS equ 00000002h
    DIOD_CANCEL_REMOVE equ 00000004h
    @DefProto DllImport, SetupDiOpenDeviceInfoA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCSTR, :HWND, :DWORD, :PSP_DEVINFO_DATA>, 20
    @DefProto DllImport, SetupDiOpenDeviceInfoW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCWSTR, :HWND, :DWORD, :PSP_DEVINFO_DATA>, 20
    ifdef UNICODE
      SetupDiOpenDeviceInfo equ <SetupDiOpenDeviceInfoW>
    else
      SetupDiOpenDeviceInfo equ <SetupDiOpenDeviceInfoA>
    endif
    @DefProto DllImport, SetupDiGetDeviceInstanceIdA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSTR, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupDiGetDeviceInstanceIdW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PWSTR, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupDiGetDeviceInstanceId equ <SetupDiGetDeviceInstanceIdW>
    else
      SetupDiGetDeviceInstanceId equ <SetupDiGetDeviceInstanceIdA>
    endif
    @DefProto DllImport, SetupDiDeleteDeviceInfo, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiEnumDeviceInfo, WIN_STD_CALL_CONV,, <:HDEVINFO, :DWORD, :PSP_DEVINFO_DATA>, 12
    @DefProto DllImport, SetupDiDestroyDeviceInfoList, WIN_STD_CALL_CONV,, <:HDEVINFO>, 4
    @DefProto DllImport, SetupDiEnumDeviceInterfaces, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr GUID, :DWORD, :PSP_DEVICE_INTERFACE_DATA>, 20
    SetupDiEnumInterfaceDevice equ <SetupDiEnumDeviceInterfaces>
    @DefProto DllImport, SetupDiCreateDeviceInterfaceA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr GUID, :PCSTR, :DWORD, :PSP_DEVICE_INTERFACE_DATA>, 24
    @DefProto DllImport, SetupDiCreateDeviceInterfaceW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr GUID, :PCWSTR, :DWORD, :PSP_DEVICE_INTERFACE_DATA>, 24
    ifdef UNICODE
      SetupDiCreateDeviceInterface equ <SetupDiCreateDeviceInterfaceW>
    else
      SetupDiCreateDeviceInterface equ <SetupDiCreateDeviceInterfaceA>
    endif
    SetupDiCreateInterfaceDeviceW equ <SetupDiCreateDeviceInterfaceW>
    SetupDiCreateInterfaceDeviceA equ <SetupDiCreateDeviceInterfaceA>
    ifdef UNICODE
      SetupDiCreateInterfaceDevice equ <SetupDiCreateDeviceInterfaceW>
    else
      SetupDiCreateInterfaceDevice equ <SetupDiCreateDeviceInterfaceA>
    endif
    DIODI_NO_ADD equ 00000001h
    @DefProto DllImport, SetupDiOpenDeviceInterfaceA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCSTR, :DWORD, :PSP_DEVICE_INTERFACE_DATA>, 16
    @DefProto DllImport, SetupDiOpenDeviceInterfaceW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PCWSTR, :DWORD, :PSP_DEVICE_INTERFACE_DATA>, 16
    ifdef UNICODE
      SetupDiOpenDeviceInterface equ <SetupDiOpenDeviceInterfaceW>
    else
      SetupDiOpenDeviceInterface equ <SetupDiOpenDeviceInterfaceA>
    endif
    SetupDiOpenInterfaceDeviceW equ <SetupDiOpenDeviceInterfaceW>
    SetupDiOpenInterfaceDeviceA equ <SetupDiOpenDeviceInterfaceA>
    ifdef UNICODE
      SetupDiOpenInterfaceDevice equ <SetupDiOpenDeviceInterfaceW>
    else
      SetupDiOpenInterfaceDevice equ <SetupDiOpenDeviceInterfaceA>
    endif
    @DefProto DllImport, SetupDiGetDeviceInterfaceAlias, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :ptr GUID, :PSP_DEVICE_INTERFACE_DATA>, 16
    SetupDiGetInterfaceDeviceAlias equ <SetupDiGetDeviceInterfaceAlias>
    @DefProto DllImport, SetupDiDeleteDeviceInterfaceData, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA>, 8
    SetupDiDeleteInterfaceDeviceData equ <SetupDiDeleteDeviceInterfaceData>
    @DefProto DllImport, SetupDiRemoveDeviceInterface, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA>, 8
    SetupDiRemoveInterfaceDevice equ <SetupDiRemoveDeviceInterface>
    @DefProto DllImport, SetupDiGetDeviceInterfaceDetailA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :PSP_DEVICE_INTERFACE_DETAIL_DATA_A, :DWORD, :PDWORD, :PSP_DEVINFO_DATA>, 24
    @DefProto DllImport, SetupDiGetDeviceInterfaceDetailW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :PSP_DEVICE_INTERFACE_DETAIL_DATA_W, :DWORD, :PDWORD, :PSP_DEVINFO_DATA>, 24
    ifdef UNICODE
      SetupDiGetDeviceInterfaceDetail equ <SetupDiGetDeviceInterfaceDetailW>
    else
      SetupDiGetDeviceInterfaceDetail equ <SetupDiGetDeviceInterfaceDetailA>
    endif
    SetupDiGetInterfaceDeviceDetailW equ <SetupDiGetDeviceInterfaceDetailW>
    SetupDiGetInterfaceDeviceDetailA equ <SetupDiGetDeviceInterfaceDetailA>
    ifdef UNICODE
      SetupDiGetInterfaceDeviceDetail equ <SetupDiGetDeviceInterfaceDetailW>
    else
      SetupDiGetInterfaceDeviceDetail equ <SetupDiGetDeviceInterfaceDetailA>
    endif
    @DefProto DllImport, SetupDiInstallDeviceInterfaces, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    SetupDiInstallInterfaceDevices equ <SetupDiInstallDeviceInterfaces>
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupDiSetDeviceInterfaceDefault, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :DWORD, :PVOID>, 16
    endif
    SPRDI_FIND_DUPS equ 00000001h
    @DefProto DllImport, SetupDiRegisterDeviceInfo, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :PSP_DETSIG_CMPPROC, :PVOID, :PSP_DEVINFO_DATA>, 24
    SPDIT_NODRIVER equ 00000000h
    SPDIT_CLASSDRIVER equ 00000001h
    SPDIT_COMPATDRIVER equ 00000002h
    @DefProto DllImport, SetupDiBuildDriverInfoList, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD>, 12
    @DefProto DllImport, SetupDiCancelDriverInfoSearch, WIN_STD_CALL_CONV,, <:HDEVINFO>, 4
    @DefProto DllImport, SetupDiEnumDriverInfoA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :PSP_DRVINFO_DATA_A>, 20
    @DefProto DllImport, SetupDiEnumDriverInfoW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :PSP_DRVINFO_DATA_W>, 20
    ifdef UNICODE
      SetupDiEnumDriverInfo equ <SetupDiEnumDriverInfoW>
    else
      SetupDiEnumDriverInfo equ <SetupDiEnumDriverInfoA>
    endif
    @DefProto DllImport, SetupDiGetSelectedDriverA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_A>, 12
    @DefProto DllImport, SetupDiGetSelectedDriverW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_W>, 12
    ifdef UNICODE
      SetupDiGetSelectedDriver equ <SetupDiGetSelectedDriverW>
    else
      SetupDiGetSelectedDriver equ <SetupDiGetSelectedDriverA>
    endif
    @DefProto DllImport, SetupDiSetSelectedDriverA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_A>, 12
    @DefProto DllImport, SetupDiSetSelectedDriverW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_W>, 12
    ifdef UNICODE
      SetupDiSetSelectedDriver equ <SetupDiSetSelectedDriverW>
    else
      SetupDiSetSelectedDriver equ <SetupDiSetSelectedDriverA>
    endif
    @DefProto DllImport, SetupDiGetDriverInfoDetailA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_A, :PSP_DRVINFO_DETAIL_DATA_A, :DWORD, :PDWORD>, 24
    @DefProto DllImport, SetupDiGetDriverInfoDetailW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_W, :PSP_DRVINFO_DETAIL_DATA_W, :DWORD, :PDWORD>, 24
    ifdef UNICODE
      SetupDiGetDriverInfoDetail equ <SetupDiGetDriverInfoDetailW>
    else
      SetupDiGetDriverInfoDetail equ <SetupDiGetDriverInfoDetailA>
    endif
    @DefProto DllImport, SetupDiDestroyDriverInfoList, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD>, 12
    DIGCF_DEFAULT equ 00000001h
    DIGCF_PRESENT equ 00000002h
    DIGCF_ALLCLASSES equ 00000004h
    DIGCF_PROFILE equ 00000008h
    DIGCF_DEVICEINTERFACE equ 00000010h
    DIGCF_INTERFACEDEVICE equ <DIGCF_DEVICEINTERFACE>
    @DefProto DllImport, SetupDiGetClassDevsA, WIN_STD_CALL_CONV,, <:ptr GUID, :PCSTR, :HWND, :DWORD>, 16
    @DefProto DllImport, SetupDiGetClassDevsW, WIN_STD_CALL_CONV,, <:ptr GUID, :PCWSTR, :HWND, :DWORD>, 16
    ifdef UNICODE
      SetupDiGetClassDevs equ <SetupDiGetClassDevsW>
    else
      SetupDiGetClassDevs equ <SetupDiGetClassDevsA>
    endif
    @DefProto DllImport, SetupDiGetClassDevsExA, WIN_STD_CALL_CONV,, <:ptr GUID, :PCSTR, :HWND, :DWORD, :HDEVINFO, :PCSTR, :PVOID>, 28
    @DefProto DllImport, SetupDiGetClassDevsExW, WIN_STD_CALL_CONV,, <:ptr GUID, :PCWSTR, :HWND, :DWORD, :HDEVINFO, :PCWSTR, :PVOID>, 28
    ifdef UNICODE
      SetupDiGetClassDevsEx equ <SetupDiGetClassDevsExW>
    else
      SetupDiGetClassDevsEx equ <SetupDiGetClassDevsExA>
    endif
    @DefProto DllImport, SetupDiGetINFClassA, WIN_STD_CALL_CONV,, <:PCSTR, :LPGUID, :PSTR, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupDiGetINFClassW, WIN_STD_CALL_CONV,, <:PCWSTR, :LPGUID, :PWSTR, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupDiGetINFClass equ <SetupDiGetINFClassW>
    else
      SetupDiGetINFClass equ <SetupDiGetINFClassA>
    endif
    DIBCI_NOINSTALLCLASS equ 00000001h
    DIBCI_NODISPLAYCLASS equ 00000002h
    @DefProto DllImport, SetupDiBuildClassInfoList, WIN_STD_CALL_CONV,, <:DWORD, :LPGUID, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiBuildClassInfoListExA, WIN_STD_CALL_CONV,, <:DWORD, :LPGUID, :DWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiBuildClassInfoListExW, WIN_STD_CALL_CONV,, <:DWORD, :LPGUID, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiBuildClassInfoListEx equ <SetupDiBuildClassInfoListExW>
    else
      SetupDiBuildClassInfoListEx equ <SetupDiBuildClassInfoListExA>
    endif
    @DefProto DllImport, SetupDiGetClassDescriptionA, WIN_STD_CALL_CONV,, <:ptr GUID, :PSTR, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiGetClassDescriptionW, WIN_STD_CALL_CONV,, <:ptr GUID, :PWSTR, :DWORD, :PDWORD>, 16
    ifdef UNICODE
      SetupDiGetClassDescription equ <SetupDiGetClassDescriptionW>
    else
      SetupDiGetClassDescription equ <SetupDiGetClassDescriptionA>
    endif
    @DefProto DllImport, SetupDiGetClassDescriptionExA, WIN_STD_CALL_CONV,, <:ptr GUID, :PSTR, :DWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiGetClassDescriptionExW, WIN_STD_CALL_CONV,, <:ptr GUID, :PWSTR, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiGetClassDescriptionEx equ <SetupDiGetClassDescriptionExW>
    else
      SetupDiGetClassDescriptionEx equ <SetupDiGetClassDescriptionExA>
    endif
    @DefProto DllImport, SetupDiCallClassInstaller, WIN_STD_CALL_CONV,, <:DI_FUNCTION, :HDEVINFO, :PSP_DEVINFO_DATA>, 12
    @DefProto DllImport, SetupDiSelectDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiSelectBestCompatDrv, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiInstallDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiInstallDriverFiles, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiRegisterCoDeviceInstallers, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiRemoveDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiUnremoveDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    if _SETUPAPI_VER ge _WIN32_WINNT_WS03
      @DefProto DllImport, SetupDiRestartDevices, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    endif
    @DefProto DllImport, SetupDiChangeState, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiInstallClassA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :DWORD, :HSPFILEQ>, 16
    @DefProto DllImport, SetupDiInstallClassW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :DWORD, :HSPFILEQ>, 16
    ifdef UNICODE
      SetupDiInstallClass equ <SetupDiInstallClassW>
    else
      SetupDiInstallClass equ <SetupDiInstallClassA>
    endif
    @DefProto DllImport, SetupDiInstallClassExA, WIN_STD_CALL_CONV,, <:HWND, :PCSTR, :DWORD, :HSPFILEQ, :ptr GUID, :PVOID, :PVOID>, 28
    @DefProto DllImport, SetupDiInstallClassExW, WIN_STD_CALL_CONV,, <:HWND, :PCWSTR, :DWORD, :HSPFILEQ, :ptr GUID, :PVOID, :PVOID>, 28
    ifdef UNICODE
      SetupDiInstallClassEx equ <SetupDiInstallClassExW>
    else
      SetupDiInstallClassEx equ <SetupDiInstallClassExA>
    endif
    @DefProto DllImport, SetupDiOpenClassRegKey, WIN_STD_CALL_CONV,, <:ptr GUID, :REGSAM>, 8
    DIOCR_INSTALLER equ 00000001h
    DIOCR_INTERFACE equ 00000002h
    @DefProto DllImport, SetupDiOpenClassRegKeyExA, WIN_STD_CALL_CONV,, <:ptr GUID, :REGSAM, :DWORD, :PCSTR, :PVOID>, 20
    @DefProto DllImport, SetupDiOpenClassRegKeyExW, WIN_STD_CALL_CONV,, <:ptr GUID, :REGSAM, :DWORD, :PCWSTR, :PVOID>, 20
    ifdef UNICODE
      SetupDiOpenClassRegKeyEx equ <SetupDiOpenClassRegKeyExW>
    else
      SetupDiOpenClassRegKeyEx equ <SetupDiOpenClassRegKeyExA>
    endif
    @DefProto DllImport, SetupDiCreateDeviceInterfaceRegKeyA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :DWORD, :REGSAM, :HINF, :PCSTR>, 24
    @DefProto DllImport, SetupDiCreateDeviceInterfaceRegKeyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :DWORD, :REGSAM, :HINF, :PCWSTR>, 24
    ifdef UNICODE
      SetupDiCreateDeviceInterfaceRegKey equ <SetupDiCreateDeviceInterfaceRegKeyW>
    else
      SetupDiCreateDeviceInterfaceRegKey equ <SetupDiCreateDeviceInterfaceRegKeyA>
    endif
    SetupDiCreateInterfaceDeviceRegKeyW equ <SetupDiCreateDeviceInterfaceRegKeyW>
    SetupDiCreateInterfaceDeviceRegKeyA equ <SetupDiCreateDeviceInterfaceRegKeyA>
    ifdef UNICODE
      SetupDiCreateInterfaceDeviceRegKey equ <SetupDiCreateDeviceInterfaceRegKeyW>
    else
      SetupDiCreateInterfaceDeviceRegKey equ <SetupDiCreateDeviceInterfaceRegKeyA>
    endif
    @DefProto DllImport, SetupDiOpenDeviceInterfaceRegKey, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :DWORD, :REGSAM>, 16
    SetupDiOpenInterfaceDeviceRegKey equ <SetupDiOpenDeviceInterfaceRegKey>
    @DefProto DllImport, SetupDiDeleteDeviceInterfaceRegKey, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :DWORD>, 12
    SetupDiDeleteInterfaceDeviceRegKey equ <SetupDiDeleteDeviceInterfaceRegKey>
    DIREG_DEV equ 00000001h
    DIREG_DRV equ 00000002h
    DIREG_BOTH equ 00000004h
    @DefProto DllImport, SetupDiCreateDevRegKeyA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :DWORD, :HINF, :PCSTR>, 28
    @DefProto DllImport, SetupDiCreateDevRegKeyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :DWORD, :HINF, :PCWSTR>, 28
    ifdef UNICODE
      SetupDiCreateDevRegKey equ <SetupDiCreateDevRegKeyW>
    else
      SetupDiCreateDevRegKey equ <SetupDiCreateDevRegKeyA>
    endif
    @DefProto DllImport, SetupDiOpenDevRegKey, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :DWORD, :REGSAM>, 24
    @DefProto DllImport, SetupDiDeleteDevRegKey, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :DWORD, :DWORD>, 20
    @DefProto DllImport, SetupDiGetHwProfileList, WIN_STD_CALL_CONV,, <:PDWORD, :DWORD, :PDWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiGetHwProfileListExA, WIN_STD_CALL_CONV,, <:PDWORD, :DWORD, :PDWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiGetHwProfileListExW, WIN_STD_CALL_CONV,, <:PDWORD, :DWORD, :PDWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiGetHwProfileListEx equ <SetupDiGetHwProfileListExW>
    else
      SetupDiGetHwProfileListEx equ <SetupDiGetHwProfileListExA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      @DefProto DllImport, SetupDiGetDevicePropertyKeys, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr DEVPROPKEY, :DWORD, :PDWORD, :DWORD>, 24
      @DefProto DllImport, SetupDiGetDevicePropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr DEVPROPKEY, :ptr DEVPROPTYPE, :PBYTE, :DWORD, :PDWORD, :DWORD>, 32
      ifdef UNICODE
        SetupDiGetDeviceProperty equ <SetupDiGetDevicePropertyW>
      endif
      @DefProto DllImport, SetupDiSetDevicePropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :ptr DEVPROPKEY, :DEVPROPTYPE, :PBYTE, :DWORD, :DWORD>, 28
      ifdef UNICODE
        SetupDiSetDeviceProperty equ <SetupDiSetDevicePropertyW>
      endif
      @DefProto DllImport, SetupDiGetDeviceInterfacePropertyKeys, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :ptr DEVPROPKEY, :DWORD, :PDWORD, :DWORD>, 24
      @DefProto DllImport, SetupDiGetDeviceInterfacePropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :ptr DEVPROPKEY, :ptr DEVPROPTYPE, :PBYTE, :DWORD, :PDWORD, :DWORD>, 32
      ifdef UNICODE
        SetupDiGetDeviceInterfaceProperty equ <SetupDiGetDeviceInterfacePropertyW>
      endif
      @DefProto DllImport, SetupDiSetDeviceInterfacePropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVICE_INTERFACE_DATA, :ptr DEVPROPKEY, :DEVPROPTYPE, :PBYTE, :DWORD, :DWORD>, 28
      ifdef UNICODE
        SetupDiSetDeviceInterfaceProperty equ <SetupDiSetDeviceInterfacePropertyW>
      endif
      DICLASSPROP_INSTALLER equ 00000001h
      DICLASSPROP_INTERFACE equ 00000002h
      @DefProto DllImport, SetupDiGetClassPropertyKeys, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :DWORD, :PDWORD, :DWORD>, 20
      @DefProto DllImport, SetupDiGetClassPropertyKeysExW, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :DWORD, :PDWORD, :DWORD, :PCWSTR, :PVOID>, 28
      ifdef UNICODE
        SetupDiGetClassPropertyKeysEx equ <SetupDiGetClassPropertyKeysExW>
      endif
      @DefProto DllImport, SetupDiGetClassPropertyW, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :ptr DEVPROPTYPE, :PBYTE, :DWORD, :PDWORD, :DWORD>, 28
      ifdef UNICODE
        SetupDiGetClassProperty equ <SetupDiGetClassPropertyW>
      endif
      @DefProto DllImport, SetupDiGetClassPropertyExW, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :ptr DEVPROPTYPE, :PBYTE, :DWORD, :PDWORD, :DWORD, :PCWSTR, :PVOID>, 36
      ifdef UNICODE
        SetupDiGetClassPropertyEx equ <SetupDiGetClassPropertyExW>
      endif
      @DefProto DllImport, SetupDiSetClassPropertyW, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :DEVPROPTYPE, :PBYTE, :DWORD, :DWORD>, 24
      ifdef UNICODE
        SetupDiSetClassProperty equ <SetupDiSetClassPropertyW>
      endif
      @DefProto DllImport, SetupDiSetClassPropertyExW, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr DEVPROPKEY, :DEVPROPTYPE, :PBYTE, :DWORD, :DWORD, :PCWSTR, :PVOID>, 32
      ifdef UNICODE
        SetupDiSetClassPropertyEx equ <SetupDiSetClassPropertyExW>
      endif
    endif
    SPDRP_DEVICEDESC equ 00000000h
    SPDRP_HARDWAREID equ 00000001h
    SPDRP_COMPATIBLEIDS equ 00000002h
    SPDRP_UNUSED0 equ 00000003h
    SPDRP_SERVICE equ 00000004h
    SPDRP_UNUSED1 equ 00000005h
    SPDRP_UNUSED2 equ 00000006h
    SPDRP_CLASS equ 00000007h
    SPDRP_CLASSGUID equ 00000008h
    SPDRP_DRIVER equ 00000009h
    SPDRP_CONFIGFLAGS equ 0000000Ah
    SPDRP_MFG equ 0000000Bh
    SPDRP_FRIENDLYNAME equ 0000000Ch
    SPDRP_LOCATION_INFORMATION equ 0000000Dh
    SPDRP_PHYSICAL_DEVICE_OBJECT_NAME equ 0000000Eh
    SPDRP_CAPABILITIES equ 0000000Fh
    SPDRP_UI_NUMBER equ 00000010h
    SPDRP_UPPERFILTERS equ 00000011h
    SPDRP_LOWERFILTERS equ 00000012h
    SPDRP_BUSTYPEGUID equ 00000013h
    SPDRP_LEGACYBUSTYPE equ 00000014h
    SPDRP_BUSNUMBER equ 00000015h
    SPDRP_ENUMERATOR_NAME equ 00000016h
    SPDRP_SECURITY equ 00000017h
    SPDRP_SECURITY_SDS equ 00000018h
    SPDRP_DEVTYPE equ 00000019h
    SPDRP_EXCLUSIVE equ 0000001Ah
    SPDRP_CHARACTERISTICS equ 0000001Bh
    SPDRP_ADDRESS equ 0000001Ch
    SPDRP_UI_NUMBER_DESC_FORMAT equ 0000001Dh
    SPDRP_DEVICE_POWER_DATA equ 0000001Eh
    SPDRP_REMOVAL_POLICY equ 0000001Fh
    SPDRP_REMOVAL_POLICY_HW_DEFAULT equ 00000020h
    SPDRP_REMOVAL_POLICY_OVERRIDE equ 00000021h
    SPDRP_INSTALL_STATE equ 00000022h
    SPDRP_LOCATION_PATHS equ 00000023h
    SPDRP_BASE_CONTAINERID equ 00000024h
    SPDRP_MAXIMUM_PROPERTY equ 00000025h
    SPCRP_UPPERFILTERS equ 00000011h
    SPCRP_LOWERFILTERS equ 00000012h
    SPCRP_SECURITY equ 00000017h
    SPCRP_SECURITY_SDS equ 00000018h
    SPCRP_DEVTYPE equ 00000019h
    SPCRP_EXCLUSIVE equ 0000001Ah
    SPCRP_CHARACTERISTICS equ 0000001Bh
    SPCRP_MAXIMUM_PROPERTY equ 0000001Ch
    @DefProto DllImport, SetupDiGetDeviceRegistryPropertyA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD>, 28
    @DefProto DllImport, SetupDiGetDeviceRegistryPropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD>, 28
    ifdef UNICODE
      SetupDiGetDeviceRegistryProperty equ <SetupDiGetDeviceRegistryPropertyW>
    else
      SetupDiGetDeviceRegistryProperty equ <SetupDiGetDeviceRegistryPropertyA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupDiGetClassRegistryPropertyA, WIN_STD_CALL_CONV,, <:ptr GUID, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD, :PCSTR, :PVOID>, 32
      @DefProto DllImport, SetupDiGetClassRegistryPropertyW, WIN_STD_CALL_CONV,, <:ptr GUID, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 32
      ifdef UNICODE
        SetupDiGetClassRegistryProperty equ <SetupDiGetClassRegistryPropertyW>
      else
        SetupDiGetClassRegistryProperty equ <SetupDiGetClassRegistryPropertyA>
      endif
    endif
    @DefProto DllImport, SetupDiSetDeviceRegistryPropertyA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :ptr BYTE, :DWORD>, 20
    @DefProto DllImport, SetupDiSetDeviceRegistryPropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :DWORD, :ptr BYTE, :DWORD>, 20
    ifdef UNICODE
      SetupDiSetDeviceRegistryProperty equ <SetupDiSetDeviceRegistryPropertyW>
    else
      SetupDiSetDeviceRegistryProperty equ <SetupDiSetDeviceRegistryPropertyA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupDiSetClassRegistryPropertyA, WIN_STD_CALL_CONV,, <:ptr GUID, :DWORD, :ptr BYTE, :DWORD, :PCSTR, :PVOID>, 24
      @DefProto DllImport, SetupDiSetClassRegistryPropertyW, WIN_STD_CALL_CONV,, <:ptr GUID, :DWORD, :ptr BYTE, :DWORD, :PCWSTR, :PVOID>, 24
      ifdef UNICODE
        SetupDiSetClassRegistryProperty equ <SetupDiSetClassRegistryPropertyW>
      else
        SetupDiSetClassRegistryProperty equ <SetupDiSetClassRegistryPropertyA>
      endif
    endif
    @DefProto DllImport, SetupDiGetDeviceInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DEVINSTALL_PARAMS_A>, 12
    @DefProto DllImport, SetupDiGetDeviceInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DEVINSTALL_PARAMS_W>, 12
    ifdef UNICODE
      SetupDiGetDeviceInstallParams equ <SetupDiGetDeviceInstallParamsW>
    else
      SetupDiGetDeviceInstallParams equ <SetupDiGetDeviceInstallParamsA>
    endif
    @DefProto DllImport, SetupDiGetClassInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_CLASSINSTALL_HEADER, :DWORD, :PDWORD>, 20
    @DefProto DllImport, SetupDiGetClassInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_CLASSINSTALL_HEADER, :DWORD, :PDWORD>, 20
    ifdef UNICODE
      SetupDiGetClassInstallParams equ <SetupDiGetClassInstallParamsW>
    else
      SetupDiGetClassInstallParams equ <SetupDiGetClassInstallParamsA>
    endif
    @DefProto DllImport, SetupDiSetDeviceInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DEVINSTALL_PARAMS_A>, 12
    @DefProto DllImport, SetupDiSetDeviceInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DEVINSTALL_PARAMS_W>, 12
    ifdef UNICODE
      SetupDiSetDeviceInstallParams equ <SetupDiSetDeviceInstallParamsW>
    else
      SetupDiSetDeviceInstallParams equ <SetupDiSetDeviceInstallParamsA>
    endif
    @DefProto DllImport, SetupDiSetClassInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_CLASSINSTALL_HEADER, :DWORD>, 16
    @DefProto DllImport, SetupDiSetClassInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_CLASSINSTALL_HEADER, :DWORD>, 16
    ifdef UNICODE
      SetupDiSetClassInstallParams equ <SetupDiSetClassInstallParamsW>
    else
      SetupDiSetClassInstallParams equ <SetupDiSetClassInstallParamsA>
    endif
    @DefProto DllImport, SetupDiGetDriverInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_A, :PSP_DRVINSTALL_PARAMS>, 16
    @DefProto DllImport, SetupDiGetDriverInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_W, :PSP_DRVINSTALL_PARAMS>, 16
    ifdef UNICODE
      SetupDiGetDriverInstallParams equ <SetupDiGetDriverInstallParamsW>
    else
      SetupDiGetDriverInstallParams equ <SetupDiGetDriverInstallParamsA>
    endif
    @DefProto DllImport, SetupDiSetDriverInstallParamsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_A, :PSP_DRVINSTALL_PARAMS>, 16
    @DefProto DllImport, SetupDiSetDriverInstallParamsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_DRVINFO_DATA_W, :PSP_DRVINSTALL_PARAMS>, 16
    ifdef UNICODE
      SetupDiSetDriverInstallParams equ <SetupDiSetDriverInstallParamsW>
    else
      SetupDiSetDriverInstallParams equ <SetupDiSetDriverInstallParamsA>
    endif
    @DefProto DllImport, SetupDiLoadClassIcon, WIN_STD_CALL_CONV,, <:ptr GUID, :ptr HICON, :PINT>, 12
    if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
      @DefProto DllImport, SetupDiLoadDeviceIcon, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :UINT, :UINT, :DWORD, :ptr HICON>, 24
    endif
    DMI_MASK equ 00000001h
    DMI_BKCOLOR equ 00000002h
    DMI_USERECT equ 00000004h
    @DefProto DllImport, SetupDiDrawMiniIcon, WIN_STD_CALL_CONV,, <:HDC, :RECT, :INT_, :DWORD>, 16
    @DefProto DllImport, SetupDiGetClassBitmapIndex, WIN_STD_CALL_CONV,, <:ptr GUID, :PINT>, 8
    @DefProto DllImport, SetupDiGetClassImageList, WIN_STD_CALL_CONV,, <:PSP_CLASSIMAGELIST_DATA>, 4
    @DefProto DllImport, SetupDiGetClassImageListExA, WIN_STD_CALL_CONV,, <:PSP_CLASSIMAGELIST_DATA, :PCSTR, :PVOID>, 12
    @DefProto DllImport, SetupDiGetClassImageListExW, WIN_STD_CALL_CONV,, <:PSP_CLASSIMAGELIST_DATA, :PCWSTR, :PVOID>, 12
    ifdef UNICODE
      SetupDiGetClassImageListEx equ <SetupDiGetClassImageListExW>
    else
      SetupDiGetClassImageListEx equ <SetupDiGetClassImageListExA>
    endif
    @DefProto DllImport, SetupDiGetClassImageIndex, WIN_STD_CALL_CONV,, <:PSP_CLASSIMAGELIST_DATA, :ptr GUID, :PINT>, 12
    @DefProto DllImport, SetupDiDestroyClassImageList, WIN_STD_CALL_CONV,, <:PSP_CLASSIMAGELIST_DATA>, 4
    DIGCDP_FLAG_BASIC equ 00000001h
    DIGCDP_FLAG_ADVANCED equ 00000002h
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      DIGCDP_FLAG_REMOTE_BASIC equ 00000003h
      DIGCDP_FLAG_REMOTE_ADVANCED equ 00000004h
    endif
    @DefProto DllImport, SetupDiGetClassDevPropertySheetsA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :LPPROPSHEETHEADERA, :DWORD, :PDWORD, :DWORD>, 24
    @DefProto DllImport, SetupDiGetClassDevPropertySheetsW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :LPPROPSHEETHEADERW, :DWORD, :PDWORD, :DWORD>, 24
    ifdef UNICODE
      SetupDiGetClassDevPropertySheets equ <SetupDiGetClassDevPropertySheetsW>
    else
      SetupDiGetClassDevPropertySheets equ <SetupDiGetClassDevPropertySheetsA>
    endif
    IDI_RESOURCEFIRST equ 159
    IDI_RESOURCE equ 159
    IDI_RESOURCELAST equ 161
    IDI_RESOURCEOVERLAYFIRST equ 161
    IDI_RESOURCEOVERLAYLAST equ 161
    IDI_CONFLICT equ 161
    IDI_CLASSICON_OVERLAYFIRST equ 500
    IDI_CLASSICON_OVERLAYLAST equ 502
    IDI_PROBLEM_OVL equ 500
    IDI_DISABLED_OVL equ 501
    IDI_FORCED_OVL equ 502
    @DefProto DllImport, SetupDiAskForOEMDisk, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiSelectOEMDrv, WIN_STD_CALL_CONV,, <:HWND, :HDEVINFO, :PSP_DEVINFO_DATA>, 12
    @DefProto DllImport, SetupDiClassNameFromGuidA, WIN_STD_CALL_CONV,, <:ptr GUID, :PSTR, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiClassNameFromGuidW, WIN_STD_CALL_CONV,, <:ptr GUID, :PWSTR, :DWORD, :PDWORD>, 16
    ifdef UNICODE
      SetupDiClassNameFromGuid equ <SetupDiClassNameFromGuidW>
    else
      SetupDiClassNameFromGuid equ <SetupDiClassNameFromGuidA>
    endif
    @DefProto DllImport, SetupDiClassNameFromGuidExA, WIN_STD_CALL_CONV,, <:ptr GUID, :PSTR, :DWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiClassNameFromGuidExW, WIN_STD_CALL_CONV,, <:ptr GUID, :PWSTR, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiClassNameFromGuidEx equ <SetupDiClassNameFromGuidExW>
    else
      SetupDiClassNameFromGuidEx equ <SetupDiClassNameFromGuidExA>
    endif
    @DefProto DllImport, SetupDiClassGuidsFromNameA, WIN_STD_CALL_CONV,, <:PCSTR, :LPGUID, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiClassGuidsFromNameW, WIN_STD_CALL_CONV,, <:PCWSTR, :LPGUID, :DWORD, :PDWORD>, 16
    ifdef UNICODE
      SetupDiClassGuidsFromName equ <SetupDiClassGuidsFromNameW>
    else
      SetupDiClassGuidsFromName equ <SetupDiClassGuidsFromNameA>
    endif
    @DefProto DllImport, SetupDiClassGuidsFromNameExA, WIN_STD_CALL_CONV,, <:PCSTR, :LPGUID, :DWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiClassGuidsFromNameExW, WIN_STD_CALL_CONV,, <:PCWSTR, :LPGUID, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiClassGuidsFromNameEx equ <SetupDiClassGuidsFromNameExW>
    else
      SetupDiClassGuidsFromNameEx equ <SetupDiClassGuidsFromNameExA>
    endif
    @DefProto DllImport, SetupDiGetHwProfileFriendlyNameA, WIN_STD_CALL_CONV,, <:DWORD, :PSTR, :DWORD, :PDWORD>, 16
    @DefProto DllImport, SetupDiGetHwProfileFriendlyNameW, WIN_STD_CALL_CONV,, <:DWORD, :PWSTR, :DWORD, :PDWORD>, 16
    ifdef UNICODE
      SetupDiGetHwProfileFriendlyName equ <SetupDiGetHwProfileFriendlyNameW>
    else
      SetupDiGetHwProfileFriendlyName equ <SetupDiGetHwProfileFriendlyNameA>
    endif
    @DefProto DllImport, SetupDiGetHwProfileFriendlyNameExA, WIN_STD_CALL_CONV,, <:DWORD, :PSTR, :DWORD, :PDWORD, :PCSTR, :PVOID>, 24
    @DefProto DllImport, SetupDiGetHwProfileFriendlyNameExW, WIN_STD_CALL_CONV,, <:DWORD, :PWSTR, :DWORD, :PDWORD, :PCWSTR, :PVOID>, 24
    ifdef UNICODE
      SetupDiGetHwProfileFriendlyNameEx equ <SetupDiGetHwProfileFriendlyNameExW>
    else
      SetupDiGetHwProfileFriendlyNameEx equ <SetupDiGetHwProfileFriendlyNameExA>
    endif
    SPWPT_SELECTDEVICE equ 00000001h
    SPWP_USE_DEVINFO_DATA equ 00000001h
    @DefProto DllImport, SetupDiGetWizardPage, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PSP_INSTALLWIZARD_DATA, :DWORD, :DWORD>, 20
    @DefProto DllImport, SetupDiGetSelectedDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    @DefProto DllImport, SetupDiSetSelectedDevice, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA>, 8
    if _SETUPAPI_VER ge _WIN32_WINNT_WS03
      @DefProto DllImport, SetupDiGetActualModelsSectionA, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :PSP_ALTPLATFORM_INFO, :PSTR, :DWORD, :PDWORD, :PVOID>, 24
      @DefProto DllImport, SetupDiGetActualModelsSectionW, WIN_STD_CALL_CONV,, <:PINFCONTEXT, :PSP_ALTPLATFORM_INFO, :PWSTR, :DWORD, :PDWORD, :PVOID>, 24
      ifdef UNICODE
        SetupDiGetActualModelsSection equ <SetupDiGetActualModelsSectionW>
      else
        SetupDiGetActualModelsSection equ <SetupDiGetActualModelsSectionA>
      endif
    endif
    @DefProto DllImport, SetupDiGetActualSectionToInstallA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :PSTR, :DWORD, :PDWORD, :ptr PSTR>, 24
    @DefProto DllImport, SetupDiGetActualSectionToInstallW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :PWSTR, :DWORD, :PDWORD, :ptr PWSTR>, 24
    ifdef UNICODE
      SetupDiGetActualSectionToInstall equ <SetupDiGetActualSectionToInstallW>
    else
      SetupDiGetActualSectionToInstall equ <SetupDiGetActualSectionToInstallA>
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupDiGetActualSectionToInstallExA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :PSP_ALTPLATFORM_INFO, :PSTR, :DWORD, :PDWORD, :ptr PSTR, :PVOID>, 32
      @DefProto DllImport, SetupDiGetActualSectionToInstallExW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :PSP_ALTPLATFORM_INFO, :PWSTR, :DWORD, :PDWORD, :ptr PWSTR, :PVOID>, 32
      ifdef UNICODE
        SetupDiGetActualSectionToInstallEx equ <SetupDiGetActualSectionToInstallExW>
      else
        SetupDiGetActualSectionToInstallEx equ <SetupDiGetActualSectionToInstallExA>
      endif
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      @DefProto DllImport, SetupEnumInfSectionsA, WIN_STD_CALL_CONV,, <:HINF, :UINT, :PSTR, :UINT, :ptr UINT>, 20
      @DefProto DllImport, SetupEnumInfSectionsW, WIN_STD_CALL_CONV,, <:HINF, :UINT, :PWSTR, :UINT, :ptr UINT>, 20
      ifdef UNICODE
        SetupEnumInfSections equ <SetupEnumInfSectionsW>
      else
        SetupEnumInfSections equ <SetupEnumInfSectionsA>
      endif
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      SP_INF_SIGNER_INFO_V1_A struct
        cbSize DWORD ?
        CatalogFile CHAR MAX_PATH dup (?)
        DigitalSigner CHAR MAX_PATH dup (?)
        DigitalSignerVersion CHAR MAX_PATH dup (?)
      SP_INF_SIGNER_INFO_V1_A ends
      _SP_INF_SIGNER_INFO_V1_A typedef SP_INF_SIGNER_INFO_V1_A
      PSP_INF_SIGNER_INFO_V1_A typedef ptr SP_INF_SIGNER_INFO_V1_A
      
      SP_INF_SIGNER_INFO_V1_W struct
        cbSize DWORD ?
        CatalogFile WCHAR MAX_PATH dup (?)
        DigitalSigner WCHAR MAX_PATH dup (?)
        DigitalSignerVersion WCHAR MAX_PATH dup (?)
      SP_INF_SIGNER_INFO_V1_W ends
      _SP_INF_SIGNER_INFO_V1_W typedef SP_INF_SIGNER_INFO_V1_W
      PSP_INF_SIGNER_INFO_V1_W typedef ptr SP_INF_SIGNER_INFO_V1_W
      
      ifdef UNICODE
        SP_INF_SIGNER_INFO_V1 typedef SP_INF_SIGNER_INFO_V1_W
        PSP_INF_SIGNER_INFO_V1 typedef PSP_INF_SIGNER_INFO_V1_W
      else
        SP_INF_SIGNER_INFO_V1 typedef SP_INF_SIGNER_INFO_V1_A
        PSP_INF_SIGNER_INFO_V1 typedef PSP_INF_SIGNER_INFO_V1_A
      endif
      if _SETUPAPI_VER ge _WIN32_WINNT_LONGHORN
        SP_INF_SIGNER_INFO_V2_A struct
          cbSize DWORD ?
          CatalogFile CHAR MAX_PATH dup (?)
          DigitalSigner CHAR MAX_PATH dup (?)
          DigitalSignerVersion CHAR MAX_PATH dup (?)
          SignerScore DWORD ?
        SP_INF_SIGNER_INFO_V2_A ends
        _SP_INF_SIGNER_INFO_V2_A typedef SP_INF_SIGNER_INFO_V2_A
        PSP_INF_SIGNER_INFO_V2_A typedef ptr SP_INF_SIGNER_INFO_V2_A
        
        SP_INF_SIGNER_INFO_V2_W struct
          cbSize DWORD ?
          CatalogFile WCHAR MAX_PATH dup (?)
          DigitalSigner WCHAR MAX_PATH dup (?)
          DigitalSignerVersion WCHAR MAX_PATH dup (?)
          SignerScore DWORD ?
        SP_INF_SIGNER_INFO_V2_W ends
        _SP_INF_SIGNER_INFO_V2_W typedef SP_INF_SIGNER_INFO_V2_W
        PSP_INF_SIGNER_INFO_V2_W typedef ptr SP_INF_SIGNER_INFO_V2_W
        
        ifdef UNICODE
          SP_INF_SIGNER_INFO_V2 typedef SP_INF_SIGNER_INFO_V2_W
          PSP_INF_SIGNER_INFO_V2 typedef PSP_INF_SIGNER_INFO_V2_W
        else
          SP_INF_SIGNER_INFO_V2 typedef SP_INF_SIGNER_INFO_V2_A
          PSP_INF_SIGNER_INFO_V2 typedef PSP_INF_SIGNER_INFO_V2_A
        endif
        SIGNERSCORE_UNKNOWN equ 0FF000000h
        SIGNERSCORE_W9X_SUSPECT equ 0C0000000h
        SIGNERSCORE_UNSIGNED equ 80000000h
        SIGNERSCORE_AUTHENTICODE equ 0F000000h
        SIGNERSCORE_WHQL equ 0D000005h
        SIGNERSCORE_UNCLASSIFIED equ 0D000004h
        SIGNERSCORE_INBOX equ 0D000003h
        SIGNERSCORE_LOGO_STANDARD equ 0D000002h
        SIGNERSCORE_LOGO_PREMIUM equ 0D000001h
        SIGNERSCORE_MASK equ 0FF000000h
        SIGNERSCORE_SIGNED_MASK equ 0F0000000h
      endif
      if USE_SP_INF_SIGNER_INFO_V1 or (_SETUPAPI_VER lt _WIN32_WINNT_LONGHORN)
        SP_INF_SIGNER_INFO_A typedef SP_INF_SIGNER_INFO_V1_A
        PSP_INF_SIGNER_INFO_A typedef PSP_INF_SIGNER_INFO_V1_A
        SP_INF_SIGNER_INFO_W typedef SP_INF_SIGNER_INFO_V1_W
        PSP_INF_SIGNER_INFO_W typedef PSP_INF_SIGNER_INFO_V1_W
        SP_INF_SIGNER_INFO typedef SP_INF_SIGNER_INFO_V1
        PSP_INF_SIGNER_INFO typedef PSP_INF_SIGNER_INFO_V1
      else
        SP_INF_SIGNER_INFO_A typedef SP_INF_SIGNER_INFO_V2_A
        PSP_INF_SIGNER_INFO_A typedef PSP_INF_SIGNER_INFO_V2_A
        SP_INF_SIGNER_INFO_W typedef SP_INF_SIGNER_INFO_V2_W
        PSP_INF_SIGNER_INFO_W typedef PSP_INF_SIGNER_INFO_V2_W
        SP_INF_SIGNER_INFO typedef SP_INF_SIGNER_INFO_V2
        PSP_INF_SIGNER_INFO typedef PSP_INF_SIGNER_INFO_V2
      endif
      @DefProto DllImport, SetupVerifyInfFileA, WIN_STD_CALL_CONV,, <:PCSTR, :PSP_ALTPLATFORM_INFO, :PSP_INF_SIGNER_INFO_A>, 12
      @DefProto DllImport, SetupVerifyInfFileW, WIN_STD_CALL_CONV,, <:PCWSTR, :PSP_ALTPLATFORM_INFO, :PSP_INF_SIGNER_INFO_W>, 12
      ifdef UNICODE
        SetupVerifyInfFile equ <SetupVerifyInfFileW>
      else
        SetupVerifyInfFile equ <SetupVerifyInfFileA>
      endif
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WINXP
      DICUSTOMDEVPROP_MERGE_MULTISZ equ 00000001h
      @DefProto DllImport, SetupDiGetCustomDevicePropertyA, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PCSTR, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD>, 32
      @DefProto DllImport, SetupDiGetCustomDevicePropertyW, WIN_STD_CALL_CONV,, <:HDEVINFO, :PSP_DEVINFO_DATA, :PCWSTR, :DWORD, :PDWORD, :PBYTE, :DWORD, :PDWORD>, 32
      ifdef UNICODE
        SetupDiGetCustomDeviceProperty equ <SetupDiGetCustomDevicePropertyW>
      else
        SetupDiGetCustomDeviceProperty equ <SetupDiGetCustomDevicePropertyA>
      endif
    endif
    if _SETUPAPI_VER ge _WIN32_WINNT_WS03
      SCWMI_CLOBBER_SECURITY equ 00000001h
      @DefProto DllImport, SetupConfigureWmiFromInfSectionA, WIN_STD_CALL_CONV,, <:HINF, :PCSTR, :DWORD>, 12
      @DefProto DllImport, SetupConfigureWmiFromInfSectionW, WIN_STD_CALL_CONV,, <:HINF, :PCWSTR, :DWORD>, 12
      ifdef UNICODE
        SetupConfigureWmiFromInfSection equ <SetupConfigureWmiFromInfSectionW>
      else
        SetupConfigureWmiFromInfSection equ <SetupConfigureWmiFromInfSectionA>
      endif
    endif
    ifdef __cplusplus
      ;[...]
    endif
    include poppack.inc
    if Defined(_MSC_VER) and (_MSC_VER ge 1200)
    endif
  endif
endif
 