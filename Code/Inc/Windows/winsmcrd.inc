;Include file created by h2incX, Version B.01.01, 10/09/2018 22:03
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: '\ObjAsm\Projects\h2IncX\header\winsmcrd.h', last modified: 19/04/2018 10:43
;Creation parameters: 

ifndef _NTDDSCRD_H2_
  _NTDDSCRD_H2_ equ <>
  if Defined(_MSC_VER) and (_MSC_VER ge 1020)
  endif
  ifdef __cplusplus
    ;[...]
  endif
  if _MSC_VER ge 1200
  endif
  ifdef _WINSCARD_H_
    ULONG typedef DWORD
    UWORD typedef WORD
    UCHAR typedef BYTE
  else
    DWORD typedef ULONG
    BYTE typedef UCHAR
  endif
  ifndef DEVICE_TYPE_SMARTCARD
    FILE_DEVICE_SMARTCARD equ 00000031h
  else
    if 00000031h ne FILE_DEVICE_SMARTCARD
      .err <"Incorrect Smart Card Device Definition">
    endif
  endif
  DEFINE_GUID GUID_DEVINTERFACE_SMARTCARD_READER, 50DD5230h, 0BA8Ah, 11D1h, 0BFh, 5Dh, 00h, 00h, 0F8h, 05h, 0F5h, 30h
  SCARD_ATR_LENGTH equ 33
  SCARD_PROTOCOL_UNDEFINED equ 00000000h
  SCARD_PROTOCOL_T0 equ 00000001h
  SCARD_PROTOCOL_T1 equ 00000002h
  SCARD_PROTOCOL_RAW equ 00010000h
  SCARD_PROTOCOL_Tx equ <(SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1)>
  SCARD_PROTOCOL_DEFAULT equ 80000000h
  SCARD_PROTOCOL_OPTIMAL equ 00000000h
  SCARD_POWER_DOWN equ 0
  SCARD_COLD_RESET equ 1
  SCARD_WARM_RESET equ 2
  SCARD_CTL_CODE macro code
    exitm <CTL_CODE(FILE_DEVICE_SMARTCARD, (code), METHOD_BUFFERED, FILE_ANY_ACCESS)>
  endm
  IOCTL_SMARTCARD_POWER equ SCARD_CTL_CODE(1)
  IOCTL_SMARTCARD_GET_ATTRIBUTE equ SCARD_CTL_CODE(2)
  IOCTL_SMARTCARD_SET_ATTRIBUTE equ SCARD_CTL_CODE(3)
  IOCTL_SMARTCARD_CONFISCATE equ SCARD_CTL_CODE(4)
  IOCTL_SMARTCARD_TRANSMIT equ SCARD_CTL_CODE(5)
  IOCTL_SMARTCARD_EJECT equ SCARD_CTL_CODE(6)
  IOCTL_SMARTCARD_SWALLOW equ SCARD_CTL_CODE(7)
  IOCTL_SMARTCARD_IS_PRESENT equ SCARD_CTL_CODE(10)
  IOCTL_SMARTCARD_IS_ABSENT equ SCARD_CTL_CODE(11)
  IOCTL_SMARTCARD_SET_PROTOCOL equ SCARD_CTL_CODE(12)
  IOCTL_SMARTCARD_GET_STATE equ SCARD_CTL_CODE(14)
  IOCTL_SMARTCARD_GET_LAST_ERROR equ SCARD_CTL_CODE(15)
  IOCTL_SMARTCARD_GET_PERF_CNTR equ SCARD_CTL_CODE(16)
  IOCTL_SMARTCARD_GET_FEATURE_REQUEST equ SCARD_CTL_CODE(3400)
  MAXIMUM_ATTR_STRING_LENGTH equ 32
  MAXIMUM_SMARTCARD_READERS equ 10
  SCARD_ATTR_VALUE macro Class, Tag
    exitm <((((Class)) shl 16) or ((Tag)))>
  endm
  SCARD_CLASS_VENDOR_INFO equ 1
  SCARD_CLASS_COMMUNICATIONS equ 2
  SCARD_CLASS_PROTOCOL equ 3
  SCARD_CLASS_POWER_MGMT equ 4
  SCARD_CLASS_SECURITY equ 5
  SCARD_CLASS_MECHANICAL equ 6
  SCARD_CLASS_VENDOR_DEFINED equ 7
  SCARD_CLASS_IFD_PROTOCOL equ 8
  SCARD_CLASS_ICC_STATE equ 9
  SCARD_CLASS_PERF equ 7ffeh
  SCARD_CLASS_SYSTEM equ 7fffh
  SCARD_ATTR_VENDOR_NAME equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0100h)
  SCARD_ATTR_VENDOR_IFD_TYPE equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0101h)
  SCARD_ATTR_VENDOR_IFD_VERSION equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0102h)
  SCARD_ATTR_VENDOR_IFD_SERIAL_NO equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0103h)
  SCARD_ATTR_CHANNEL_ID equ SCARD_ATTR_VALUE(SCARD_CLASS_COMMUNICATIONS, 0110h)
  SCARD_ATTR_PROTOCOL_TYPES equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0120h)
  SCARD_ATTR_DEFAULT_CLK equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0121h)
  SCARD_ATTR_MAX_CLK equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0122h)
  SCARD_ATTR_DEFAULT_DATA_RATE equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0123h)
  SCARD_ATTR_MAX_DATA_RATE equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0124h)
  SCARD_ATTR_MAX_IFSD equ SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0125h)
  SCARD_ATTR_POWER_MGMT_SUPPORT equ SCARD_ATTR_VALUE(SCARD_CLASS_POWER_MGMT, 0131h)
  SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE equ SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0140h)
  SCARD_ATTR_USER_AUTH_INPUT_DEVICE equ SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0142h)
  SCARD_ATTR_CHARACTERISTICS equ SCARD_ATTR_VALUE(SCARD_CLASS_MECHANICAL, 0150h)
  SCARD_ATTR_CURRENT_PROTOCOL_TYPE equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0201h)
  SCARD_ATTR_CURRENT_CLK equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0202h)
  SCARD_ATTR_CURRENT_F equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0203h)
  SCARD_ATTR_CURRENT_D equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0204h)
  SCARD_ATTR_CURRENT_N equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0205h)
  SCARD_ATTR_CURRENT_W equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0206h)
  SCARD_ATTR_CURRENT_IFSC equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0207h)
  SCARD_ATTR_CURRENT_IFSD equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0208h)
  SCARD_ATTR_CURRENT_BWT equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0209h)
  SCARD_ATTR_CURRENT_CWT equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 020ah)
  SCARD_ATTR_CURRENT_EBC_ENCODING equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 020bh)
  SCARD_ATTR_EXTENDED_BWT equ SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 020ch)
  SCARD_ATTR_ICC_PRESENCE equ SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0300h)
  SCARD_ATTR_ICC_INTERFACE_STATUS equ SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0301h)
  SCARD_ATTR_CURRENT_IO_STATE equ SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0302h)
  SCARD_ATTR_ATR_STRING equ SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0303h)
  SCARD_ATTR_ICC_TYPE_PER_ATR equ SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0304h)
  SCARD_ATTR_ESC_RESET equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0A000h)
  SCARD_ATTR_ESC_CANCEL equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0A003h)
  SCARD_ATTR_ESC_AUTHREQUEST equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0A005h)
  SCARD_ATTR_MAXINPUT equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0A007h)
  SCARD_ATTR_VENDOR_SPECIFIC_INFO equ SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0A008h)
  SCARD_ATTR_DEVICE_UNIT equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0001h)
  SCARD_ATTR_DEVICE_IN_USE equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0002h)
  SCARD_ATTR_DEVICE_FRIENDLY_NAME_A equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0003h)
  SCARD_ATTR_DEVICE_SYSTEM_NAME_A equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0004h)
  SCARD_ATTR_DEVICE_FRIENDLY_NAME_W equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0005h)
  SCARD_ATTR_DEVICE_SYSTEM_NAME_W equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0006h)
  SCARD_ATTR_SUPRESS_T1_IFS_REQUEST equ SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0007h)
  SCARD_PERF_NUM_TRANSMISSIONS equ SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0001h)
  SCARD_PERF_BYTES_TRANSMITTED equ SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0002h)
  SCARD_PERF_TRANSMISSION_TIME equ SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0003h)
  ifdef UNICODE
    SCARD_ATTR_DEVICE_FRIENDLY_NAME equ <SCARD_ATTR_DEVICE_FRIENDLY_NAME_W>
    SCARD_ATTR_DEVICE_SYSTEM_NAME equ <SCARD_ATTR_DEVICE_SYSTEM_NAME_W>
  else
    SCARD_ATTR_DEVICE_FRIENDLY_NAME equ <SCARD_ATTR_DEVICE_FRIENDLY_NAME_A>
    SCARD_ATTR_DEVICE_SYSTEM_NAME equ <SCARD_ATTR_DEVICE_SYSTEM_NAME_A>
  endif
  SCARD_T0_HEADER_LENGTH equ 7
  SCARD_T0_CMD_LENGTH equ 5
  SCARD_T1_PROLOGUE_LENGTH equ 3
  SCARD_T1_EPILOGUE_LENGTH equ 2
  SCARD_T1_EPILOGUE_LENGTH_LRC equ 1
  SCARD_T1_MAX_IFS equ 254
  SCARD_UNKNOWN equ 0
  SCARD_ABSENT equ 1
  SCARD_PRESENT equ 2
  SCARD_SWALLOWED equ 3
  SCARD_POWERED equ 4
  SCARD_NEGOTIABLE equ 5
  SCARD_SPECIFIC equ 6
  SCARD_IO_REQUEST struct
    dwProtocol DWORD ?
    cbPciLength DWORD ?
  SCARD_IO_REQUEST ends

  _SCARD_IO_REQUEST typedef SCARD_IO_REQUEST
  PSCARD_IO_REQUEST typedef ptr SCARD_IO_REQUEST
  LPSCARD_IO_REQUEST typedef ptr SCARD_IO_REQUEST
  
  LPCSCARD_IO_REQUEST typedef ptr SCARD_IO_REQUEST
  SCARD_T0_COMMAND struct
    bCla BYTE ?
  SCARD_T0_COMMAND ends

  _SCARD_T0_COMMAND typedef SCARD_T0_COMMAND
  LPSCARD_T0_COMMAND typedef ptr SCARD_T0_COMMAND
  
  SCARD_T0_REQUEST struct
    ioRequest SCARD_IO_REQUEST <>
    bSw1 BYTE ?
    union
      CmdBytes SCARD_T0_COMMAND <>
      rgbHeader BYTE 5 dup (?)
    ends
  SCARD_T0_REQUEST ends

  _SCARD_T0_REQUEST typedef SCARD_T0_REQUEST
  PSCARD_T0_REQUEST typedef ptr SCARD_T0_REQUEST
  LPSCARD_T0_REQUEST typedef ptr SCARD_T0_REQUEST
  SCARD_T1_REQUEST struct
    ioRequest SCARD_IO_REQUEST <>
  SCARD_T1_REQUEST ends

  _SCARD_T1_REQUEST typedef SCARD_T1_REQUEST
  PSCARD_T1_REQUEST typedef ptr SCARD_T1_REQUEST
  LPSCARD_T1_REQUEST typedef ptr SCARD_T1_REQUEST
  SCARD_READER_SWALLOWS equ 00000001h
  SCARD_READER_EJECTS equ 00000002h
  SCARD_READER_CONFISCATES equ 00000004h
  SCARD_READER_CONTACTLESS equ 00000008h
  SCARD_READER_TYPE_SERIAL equ 01h
  SCARD_READER_TYPE_PARALELL equ 02h
  SCARD_READER_TYPE_KEYBOARD equ 04h
  SCARD_READER_TYPE_SCSI equ 08h
  SCARD_READER_TYPE_IDE equ 10h
  SCARD_READER_TYPE_USB equ 20h
  SCARD_READER_TYPE_PCMCIA equ 40h
  SCARD_READER_TYPE_TPM equ 80h
  SCARD_READER_TYPE_NFC equ 100h
  SCARD_READER_TYPE_UICC equ 200h
  SCARD_READER_TYPE_NGC equ 400h
  SCARD_READER_TYPE_EMBEDDEDSE equ 800h
  SCARD_READER_TYPE_VENDOR equ 0F0h
  if _MSC_VER ge 1200
  endif
  ifdef __cplusplus
    ;[...]
  endif
endif

