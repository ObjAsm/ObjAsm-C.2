;Include file created by h2incX, Version B.01.01, 10/09/2018 22:03
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: '\ObjAsm\Projects\h2IncX\header\bcrypt.h', last modified: 19/04/2018 10:43
;Creation parameters: 

ifndef __BCRYPT_H__
__BCRYPT_H__ equ <>
  include winapifamily.inc
  if _MSC_VER ge 1200
  endif
  ifdef __cplusplus
    ;[...]
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    ifndef WINAPI
      WINAPI equ <__stdcall>
    endif
    ifndef _NTDEF_
      NTSTATUS typedef LONG
      PNTSTATUS typedef ptr NTSTATUS
    endif
    ifndef BCRYPT_SUCCESS
      BCRYPT_SUCCESS macro Status
        exitm <(((NTSTATUS) (Status)) >= 0)>
      endm
    endif
    ifndef CONST
      CONST_ equ <const_>
    endif
    ifndef IN_
      IN_ equ <>
    endif
    ifndef OUT_
      OUT_ equ <>
    endif
    ifndef OPTIONAL
      OPTIONAL equ <>
    endif
    BCRYPT_OBJECT_ALIGNMENT equ 16
    BCRYPT_STRUCT_ALIGNMENT equ <>
    BCRYPT_KDF_HASH equ <L("HASH")>
    BCRYPT_KDF_HMAC equ <L("HMAC")>
    BCRYPT_KDF_TLS_PRF equ <L("TLS_PRF")>
    if (NTDDI_VERSION ge NTDDI_WIN7)
      BCRYPT_KDF_SP80056A_CONCAT equ <L("SP800_56A_CONCAT")>
    endif
    if (NTDDI_VERSION ge NTDDI_WINBLUE)
      BCRYPT_KDF_RAW_SECRET equ <L("TRUNCATE")>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS4)
      BCRYPT_KDF_HKDF equ <L("HKDF")>
    endif
    KDF_HASH_ALGORITHM equ 0h
    KDF_SECRET_PREPEND equ 1h
    KDF_SECRET_APPEND equ 2h
    KDF_HMAC_KEY equ 3h
    KDF_TLS_PRF_LABEL equ 4h
    KDF_TLS_PRF_SEED equ 5h
    KDF_SECRET_HANDLE equ 6h
    if (NTDDI_VERSION ge NTDDI_WIN7)
      KDF_TLS_PRF_PROTOCOL equ 7h
      KDF_ALGORITHMID equ 8h
      KDF_PARTYUINFO equ 9h
      KDF_PARTYVINFO equ 0Ah
      KDF_SUPPPUBINFO equ 0Bh
      KDF_SUPPPRIVINFO equ 0Ch
    endif
    if (NTDDI_VERSION ge NTDDI_WIN8)
      KDF_LABEL equ 0Dh
      KDF_CONTEXT equ 0Eh
      KDF_SALT equ 0Fh
      KDF_ITERATION_COUNT equ 10h
      KDF_GENERIC_PARAMETER equ 11h
      KDF_KEYBITLENGTH equ 12h
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS4)
      KDF_HKDF_SALT equ 13h
      KDF_HKDF_INFO equ 14h
    endif
    KDF_USE_SECRET_AS_HMAC_KEY_FLAG equ 1h
    BCRYPT_KEY_LENGTHS_STRUCT struct
      dwMinLength ULONG ?
      dwMaxLength ULONG ?
      dwIncrement ULONG ?
    BCRYPT_KEY_LENGTHS_STRUCT ends
    __BCRYPT_KEY_LENGTHS_STRUCT typedef BCRYPT_KEY_LENGTHS_STRUCT
    BCRYPT_AUTH_TAG_LENGTHS_STRUCT typedef BCRYPT_KEY_LENGTHS_STRUCT
    BCRYPT_OID struct
      cbOID ULONG ?
      pbOID PUCHAR ?
    BCRYPT_OID ends
    _BCRYPT_OID typedef BCRYPT_OID
    BCRYPT_OID_LIST struct
      dwOIDCount ULONG ?
      pOIDs POINTER ?
    BCRYPT_OID_LIST ends
    _BCRYPT_OID_LIST typedef BCRYPT_OID_LIST
    BCRYPT_PKCS1_PADDING_INFO struct
      pszAlgId LPCWSTR ?
    BCRYPT_PKCS1_PADDING_INFO ends
    _BCRYPT_PKCS1_PADDING_INFO typedef BCRYPT_PKCS1_PADDING_INFO
    BCRYPT_PSS_PADDING_INFO struct
      pszAlgId LPCWSTR ?
      cbSalt ULONG ?
    BCRYPT_PSS_PADDING_INFO ends
    _BCRYPT_PSS_PADDING_INFO typedef BCRYPT_PSS_PADDING_INFO
    BCRYPT_OAEP_PADDING_INFO struct
      pszAlgId LPCWSTR ?
      pbLabel PUCHAR ?
      cbLabel ULONG ?
    BCRYPT_OAEP_PADDING_INFO ends
    _BCRYPT_OAEP_PADDING_INFO typedef BCRYPT_OAEP_PADDING_INFO
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION equ 1
    BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG equ 00000001h
    BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG equ 00000002h
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO struct
      cbSize ULONG ?
      dwInfoVersion ULONG ?
      pbNonce PUCHAR ?
      cbNonce ULONG ?
      pbAuthData PUCHAR ?
      cbAuthData ULONG ?
      pbTag PUCHAR ?
      cbTag ULONG ?
      pbMacContext PUCHAR ?
      cbMacContext ULONG ?
      cbAAD ULONG ?
      cbData ULONGLONG ?
      dwFlags ULONG ?
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO ends
    _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO typedef BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO typedef ptr BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    
    BCRYPT_INIT_AUTH_MODE_INFO macro _AUTH_INFO_STRUCT_
      exitm <RtlZeroMemory((and _AUTH_INFO_STRUCT_), sizeof(BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO)) ; (_AUTH_INFO_STRUCT_).cbSize = sizeof(BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO) ; (_AUTH_INFO_STRUCT_).dwInfoVersion = BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION ;>
    endm
    BCRYPT_OPAQUE_KEY_BLOB equ <L("OpaqueKeyBlob")>
    BCRYPT_KEY_DATA_BLOB equ <L("KeyDataBlob")>
    if (NTDDI_VERSION ge NTDDI_WIN7)
      BCRYPT_AES_WRAP_KEY_BLOB equ <L("Rfc3565KeyWrapBlob")>
    endif
    BCRYPT_OBJECT_LENGTH equ <L("ObjectLength")>
    BCRYPT_ALGORITHM_NAME equ <L("AlgorithmName")>
    BCRYPT_PROVIDER_HANDLE equ <L("ProviderHandle")>
    BCRYPT_CHAINING_MODE equ <L("ChainingMode")>
    BCRYPT_BLOCK_LENGTH equ <L("BlockLength")>
    BCRYPT_KEY_LENGTH equ <L("KeyLength")>
    BCRYPT_KEY_OBJECT_LENGTH equ <L("KeyObjectLength")>
    BCRYPT_KEY_STRENGTH equ <L("KeyStrength")>
    BCRYPT_KEY_LENGTHS equ <L("KeyLengths")>
    BCRYPT_BLOCK_SIZE_LIST equ <L("BlockSizeList")>
    BCRYPT_EFFECTIVE_KEY_LENGTH equ <L("EffectiveKeyLength")>
    BCRYPT_HASH_LENGTH equ <L("HashDigestLength")>
    BCRYPT_HASH_OID_LIST equ <L("HashOIDList")>
    BCRYPT_PADDING_SCHEMES equ <L("PaddingSchemes")>
    BCRYPT_SIGNATURE_LENGTH equ <L("SignatureLength")>
    BCRYPT_HASH_BLOCK_LENGTH equ <L("HashBlockLength")>
    BCRYPT_AUTH_TAG_LENGTH equ <L("AuthTagLength")>
    if (NTDDI_VERSION ge NTDDI_WIN7)
      BCRYPT_PRIMITIVE_TYPE equ <L("PrimitiveType")>
      BCRYPT_IS_KEYED_HASH equ <L("IsKeyedHash")>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_IS_REUSABLE_HASH equ <L("IsReusableHash")>
      BCRYPT_MESSAGE_BLOCK_LENGTH equ <L("MessageBlockLength")>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_PUBLIC_KEY_LENGTH equ <L("PublicKeyLength")>
    endif
    BCRYPT_PCP_PLATFORM_TYPE_PROPERTY equ <L("PCP_PLATFORM_TYPE")>
    BCRYPT_PCP_PROVIDER_VERSION_PROPERTY equ <L("PCP_PROVIDER_VERSION")>
    if (NTDDI_VERSION gt NTDDI_WINBLUE or (NTDDI_VERSION eq NTDDI_WINBLUE and Defined(WINBLUE_KBSPRING14)))
      BCRYPT_MULTI_OBJECT_LENGTH equ <L("MultiObjectLength")>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS4)
      BCRYPT_IS_IFX_TPM_WEAK_KEY equ <L("IsIfxTpmWeakKey")>
      BCRYPT_HKDF_HASH_ALGORITHM equ <L("HkdfHashAlgorithm")>
      BCRYPT_HKDF_SALT_AND_FINALIZE equ <L("HkdfSaltAndFinalize")>
      BCRYPT_HKDF_PRK_AND_FINALIZE equ <L("HkdfPrkAndFinalize")>
    endif
    BCRYPT_INITIALIZATION_VECTOR equ <L("IV")>
    BCRYPT_CHAIN_MODE_NA equ <L("ChainingModeN/A")>
    BCRYPT_CHAIN_MODE_CBC equ <L("ChainingModeCBC")>
    BCRYPT_CHAIN_MODE_ECB equ <L("ChainingModeECB")>
    BCRYPT_CHAIN_MODE_CFB equ <L("ChainingModeCFB")>
    BCRYPT_CHAIN_MODE_CCM equ <L("ChainingModeCCM")>
    BCRYPT_CHAIN_MODE_GCM equ <L("ChainingModeGCM")>
    BCRYPT_SUPPORTED_PAD_ROUTER equ 00000001h
    BCRYPT_SUPPORTED_PAD_PKCS1_ENC equ 00000002h
    BCRYPT_SUPPORTED_PAD_PKCS1_SIG equ 00000004h
    BCRYPT_SUPPORTED_PAD_OAEP equ 00000008h
    BCRYPT_SUPPORTED_PAD_PSS equ 00000010h
    BCRYPT_PROV_DISPATCH equ 00000001h
    BCRYPT_BLOCK_PADDING equ 00000001h
    BCRYPT_PAD_NONE equ 00000001h
    BCRYPT_PAD_PKCS1 equ 00000002h
    BCRYPT_PAD_OAEP equ 00000004h
    BCRYPT_PAD_PSS equ 00000008h
    if (NTDDI_VERSION ge NTDDI_WINBLUE)
      BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID equ 00000010h
    endif
    BCRYPTBUFFER_VERSION equ 0
    BCryptBuffer struct
      cbBuffer ULONG ?
      BufferType ULONG ?
      pvBuffer PVOID ?
    BCryptBuffer ends
    _BCryptBuffer typedef BCryptBuffer
    PBCryptBuffer typedef ptr BCryptBuffer
    
    BCryptBufferDesc struct
      ulVersion ULONG ?
      cBuffers ULONG ?
      pBuffers PBCryptBuffer ?
    BCryptBufferDesc ends
    _BCryptBufferDesc typedef BCryptBufferDesc
    PBCryptBufferDesc typedef ptr BCryptBufferDesc
    
    BCRYPT_HANDLE typedef PVOID
    BCRYPT_ALG_HANDLE typedef PVOID
    BCRYPT_KEY_HANDLE typedef PVOID
    BCRYPT_HASH_HANDLE typedef PVOID
    BCRYPT_SECRET_HANDLE typedef PVOID
    BCRYPT_PUBLIC_KEY_BLOB equ <L("PUBLICBLOB")>
    BCRYPT_PRIVATE_KEY_BLOB equ <L("PRIVATEBLOB")>
    BCRYPT_KEY_BLOB struct
      Magic ULONG ?
    BCRYPT_KEY_BLOB ends
    _BCRYPT_KEY_BLOB typedef BCRYPT_KEY_BLOB
    BCRYPT_RSAPUBLIC_BLOB equ <L("RSAPUBLICBLOB")>
    BCRYPT_RSAPRIVATE_BLOB equ <L("RSAPRIVATEBLOB")>
    LEGACY_RSAPUBLIC_BLOB equ <L("CAPIPUBLICBLOB")>
    LEGACY_RSAPRIVATE_BLOB equ <L("CAPIPRIVATEBLOB")>
    BCRYPT_RSAPUBLIC_MAGIC equ 31415352h
    BCRYPT_RSAPRIVATE_MAGIC equ 32415352h
    BCRYPT_RSAKEY_BLOB struct
      Magic ULONG ?
      BitLength ULONG ?
      cbPublicExp ULONG ?
      cbModulus ULONG ?
      cbPrime1 ULONG ?
      cbPrime2 ULONG ?
    BCRYPT_RSAKEY_BLOB ends
    _BCRYPT_RSAKEY_BLOB typedef BCRYPT_RSAKEY_BLOB
    BCRYPT_RSAFULLPRIVATE_BLOB equ <L("RSAFULLPRIVATEBLOB")>
    BCRYPT_RSAFULLPRIVATE_MAGIC equ 33415352h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_GLOBAL_PARAMETERS equ <L("SecretAgreementParam")>
      BCRYPT_PRIVATE_KEY equ <L("PrivKeyVal")>
    endif
    BCRYPT_ECCPUBLIC_BLOB equ <L("ECCPUBLICBLOB")>
    BCRYPT_ECCPRIVATE_BLOB equ <L("ECCPRIVATEBLOB")>
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ECCFULLPUBLIC_BLOB equ <L("ECCFULLPUBLICBLOB")>
      BCRYPT_ECCFULLPRIVATE_BLOB equ <L("ECCFULLPRIVATEBLOB")>
      SSL_ECCPUBLIC_BLOB equ <L("SSLECCPUBLICBLOB")>
    endif
    BCRYPT_ECDH_PUBLIC_P256_MAGIC equ 314B4345h
    BCRYPT_ECDH_PRIVATE_P256_MAGIC equ 324B4345h
    BCRYPT_ECDH_PUBLIC_P384_MAGIC equ 334B4345h
    BCRYPT_ECDH_PRIVATE_P384_MAGIC equ 344B4345h
    BCRYPT_ECDH_PUBLIC_P521_MAGIC equ 354B4345h
    BCRYPT_ECDH_PRIVATE_P521_MAGIC equ 364B4345h
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC equ 504B4345h
      BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC equ 564B4345h
    endif
    BCRYPT_ECDSA_PUBLIC_P256_MAGIC equ 31534345h
    BCRYPT_ECDSA_PRIVATE_P256_MAGIC equ 32534345h
    BCRYPT_ECDSA_PUBLIC_P384_MAGIC equ 33534345h
    BCRYPT_ECDSA_PRIVATE_P384_MAGIC equ 34534345h
    BCRYPT_ECDSA_PUBLIC_P521_MAGIC equ 35534345h
    BCRYPT_ECDSA_PRIVATE_P521_MAGIC equ 36534345h
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC equ 50444345h
      BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC equ 56444345h
    endif
    BCRYPT_ECCKEY_BLOB struct
      dwMagic ULONG ?
      cbKey ULONG ?
    BCRYPT_ECCKEY_BLOB ends
    _BCRYPT_ECCKEY_BLOB typedef BCRYPT_ECCKEY_BLOB
    PBCRYPT_ECCKEY_BLOB typedef ptr BCRYPT_ECCKEY_BLOB
    
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      SSL_ECCKEY_BLOB struct
        dwCurveType ULONG ?
        cbKey ULONG ?
      SSL_ECCKEY_BLOB ends
      _SSL_ECCKEY_BLOB typedef SSL_ECCKEY_BLOB
      PSSL_ECCKEY_BLOB typedef ptr SSL_ECCKEY_BLOB
      
      BCRYPT_ECC_FULLKEY_BLOB_V1 equ 1h
      ECC_CURVE_TYPE_ENUM typedef SDWORD
      BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE equ 1h
      BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE equ 2h
      BCRYPT_ECC_PRIME_MONTGOMERY_CURVE equ 3h
      
      ECC_CURVE_ALG_ID_ENUM typedef SDWORD
      BCRYPT_NO_CURVE_GENERATION_ALG_ID equ 0h
      
      BCRYPT_ECCFULLKEY_BLOB struct
        dwMagic ULONG ?
        dwVersion ULONG ?
        dwCurveType ECC_CURVE_TYPE_ENUM ?
        dwCurveGenerationAlgId ECC_CURVE_ALG_ID_ENUM ?
        cbFieldLength ULONG ?
        cbSubgroupOrder ULONG ?
        cbCofactor ULONG ?
        cbSeed ULONG ?
      BCRYPT_ECCFULLKEY_BLOB ends
      _BCRYPT_ECCFULLKEY_BLOB typedef BCRYPT_ECCFULLKEY_BLOB
      PBCRYPT_ECCFULLKEY_BLOB typedef ptr BCRYPT_ECCFULLKEY_BLOB
      
    endif
    BCRYPT_DH_PUBLIC_BLOB equ <L("DHPUBLICBLOB")>
    BCRYPT_DH_PRIVATE_BLOB equ <L("DHPRIVATEBLOB")>
    LEGACY_DH_PUBLIC_BLOB equ <L("CAPIDHPUBLICBLOB")>
    LEGACY_DH_PRIVATE_BLOB equ <L("CAPIDHPRIVATEBLOB")>
    BCRYPT_DH_PUBLIC_MAGIC equ 42504844h
    BCRYPT_DH_PRIVATE_MAGIC equ 56504844h
    BCRYPT_DH_KEY_BLOB struct
      dwMagic ULONG ?
      cbKey ULONG ?
    BCRYPT_DH_KEY_BLOB ends
    _BCRYPT_DH_KEY_BLOB typedef BCRYPT_DH_KEY_BLOB
    PBCRYPT_DH_KEY_BLOB typedef ptr BCRYPT_DH_KEY_BLOB
    
    BCRYPT_DH_PARAMETERS equ <L("DHParameters")>
    BCRYPT_DH_PARAMETERS_MAGIC equ 4d504844h
    BCRYPT_DH_PARAMETER_HEADER struct
      cbLength ULONG ?
      dwMagic ULONG ?
      cbKeyLength ULONG ?
    BCRYPT_DH_PARAMETER_HEADER ends
    _BCRYPT_DH_PARAMETER_HEADER typedef BCRYPT_DH_PARAMETER_HEADER
    BCRYPT_DSA_PUBLIC_BLOB equ <L("DSAPUBLICBLOB")>
    BCRYPT_DSA_PRIVATE_BLOB equ <L("DSAPRIVATEBLOB")>
    LEGACY_DSA_PUBLIC_BLOB equ <L("CAPIDSAPUBLICBLOB")>
    LEGACY_DSA_PRIVATE_BLOB equ <L("CAPIDSAPRIVATEBLOB")>
    LEGACY_DSA_V2_PUBLIC_BLOB equ <L("V2CAPIDSAPUBLICBLOB")>
    LEGACY_DSA_V2_PRIVATE_BLOB equ <L("V2CAPIDSAPRIVATEBLOB")>
    BCRYPT_DSA_PUBLIC_MAGIC equ 42505344h
    BCRYPT_DSA_PRIVATE_MAGIC equ 56505344h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_DSA_PUBLIC_MAGIC_V2 equ 32425044h
      BCRYPT_DSA_PRIVATE_MAGIC_V2 equ 32565044h
    endif
    BCRYPT_DSA_KEY_BLOB struct
      dwMagic ULONG ?
      cbKey ULONG ?
      Count UCHAR 4 dup (?)
      Seed UCHAR 20 dup (?)
      q UCHAR 20 dup (?)
    BCRYPT_DSA_KEY_BLOB ends
    _BCRYPT_DSA_KEY_BLOB typedef BCRYPT_DSA_KEY_BLOB
    PBCRYPT_DSA_KEY_BLOB typedef ptr BCRYPT_DSA_KEY_BLOB
    
    if (NTDDI_VERSION ge NTDDI_WIN8)
      HASHALGORITHM_ENUM typedef SDWORD
      DSA_HASH_ALGORITHM_SHA1 equ 0
      DSA_HASH_ALGORITHM_SHA256 equ 1
      DSA_HASH_ALGORITHM_SHA512 equ 2
      
      DSAFIPSVERSION_ENUM typedef SDWORD
      DSA_FIPS186_2 equ 0
      DSA_FIPS186_3 equ 1
      
      BCRYPT_DSA_KEY_BLOB_V2 struct
        dwMagic ULONG ?
        cbKey ULONG ?
        hashAlgorithm HASHALGORITHM_ENUM ?
        standardVersion DSAFIPSVERSION_ENUM ?
        cbSeedLength ULONG ?
        cbGroupSize ULONG ?
        Count UCHAR 4 dup (?)
      BCRYPT_DSA_KEY_BLOB_V2 ends
      _BCRYPT_DSA_KEY_BLOB_V2 typedef BCRYPT_DSA_KEY_BLOB_V2
      PBCRYPT_DSA_KEY_BLOB_V2 typedef ptr BCRYPT_DSA_KEY_BLOB_V2
      
    endif
    BCRYPT_KEY_DATA_BLOB_HEADER struct
      dwMagic ULONG ?
      dwVersion ULONG ?
      cbKeyData ULONG ?
    BCRYPT_KEY_DATA_BLOB_HEADER ends
    _BCRYPT_KEY_DATA_BLOB_HEADER typedef BCRYPT_KEY_DATA_BLOB_HEADER
    PBCRYPT_KEY_DATA_BLOB_HEADER typedef ptr BCRYPT_KEY_DATA_BLOB_HEADER
    
    BCRYPT_KEY_DATA_BLOB_MAGIC equ 4d42444bh
    BCRYPT_KEY_DATA_BLOB_VERSION1 equ 1h
    BCRYPT_DSA_PARAMETERS equ <L("DSAParameters")>
    BCRYPT_DSA_PARAMETERS_MAGIC equ 4d505344h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_DSA_PARAMETERS_MAGIC_V2 equ 324d5044h
    endif
    BCRYPT_DSA_PARAMETER_HEADER struct
      cbLength ULONG ?
      dwMagic ULONG ?
      cbKeyLength ULONG ?
      Count UCHAR 4 dup (?)
      Seed UCHAR 20 dup (?)
      q UCHAR 20 dup (?)
    BCRYPT_DSA_PARAMETER_HEADER ends
    _BCRYPT_DSA_PARAMETER_HEADER typedef BCRYPT_DSA_PARAMETER_HEADER
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_DSA_PARAMETER_HEADER_V2 struct
        cbLength ULONG ?
        dwMagic ULONG ?
        cbKeyLength ULONG ?
        hashAlgorithm HASHALGORITHM_ENUM ?
        standardVersion DSAFIPSVERSION_ENUM ?
        cbSeedLength ULONG ?
        cbGroupSize ULONG ?
        Count UCHAR 4 dup (?)
      BCRYPT_DSA_PARAMETER_HEADER_V2 ends
      _BCRYPT_DSA_PARAMETER_HEADER_V2 typedef BCRYPT_DSA_PARAMETER_HEADER_V2
    endif
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ECC_PARAMETERS equ <L("ECCParameters")>
      BCRYPT_ECC_CURVE_NAME equ <L("ECCCurveName")>
      BCRYPT_ECC_CURVE_NAME_LIST equ <L("ECCCurveNameList")>
      BCRYPT_ECC_PARAMETERS_MAGIC equ 50434345h
      BCRYPT_ECC_CURVE_NAMES struct
        dwEccCurveNames ULONG ?
        pEccCurveNames POINTER ?
      BCRYPT_ECC_CURVE_NAMES ends
      _BCRYPT_ECC_CURVE_NAMES typedef BCRYPT_ECC_CURVE_NAMES
      BCRYPT_ECC_CURVE_BRAINPOOLP160R1 equ <L("brainpoolP160r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP160T1 equ <L("brainpoolP160t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP192R1 equ <L("brainpoolP192r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP192T1 equ <L("brainpoolP192t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP224R1 equ <L("brainpoolP224r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP224T1 equ <L("brainpoolP224t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP256R1 equ <L("brainpoolP256r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP256T1 equ <L("brainpoolP256t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP320R1 equ <L("brainpoolP320r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP320T1 equ <L("brainpoolP320t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP384R1 equ <L("brainpoolP384r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP384T1 equ <L("brainpoolP384t1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP512R1 equ <L("brainpoolP512r1")>
      BCRYPT_ECC_CURVE_BRAINPOOLP512T1 equ <L("brainpoolP512t1")>
      BCRYPT_ECC_CURVE_25519 equ <L("curve25519")>
      BCRYPT_ECC_CURVE_EC192WAPI equ <L("ec192wapi")>
      BCRYPT_ECC_CURVE_NISTP192 equ <L("nistP192")>
      BCRYPT_ECC_CURVE_NISTP224 equ <L("nistP224")>
      BCRYPT_ECC_CURVE_NISTP256 equ <L("nistP256")>
      BCRYPT_ECC_CURVE_NISTP384 equ <L("nistP384")>
      BCRYPT_ECC_CURVE_NISTP521 equ <L("nistP521")>
      BCRYPT_ECC_CURVE_NUMSP256T1 equ <L("numsP256t1")>
      BCRYPT_ECC_CURVE_NUMSP384T1 equ <L("numsP384t1")>
      BCRYPT_ECC_CURVE_NUMSP512T1 equ <L("numsP512t1")>
      BCRYPT_ECC_CURVE_SECP160K1 equ <L("secP160k1")>
      BCRYPT_ECC_CURVE_SECP160R1 equ <L("secP160r1")>
      BCRYPT_ECC_CURVE_SECP160R2 equ <L("secP160r2")>
      BCRYPT_ECC_CURVE_SECP192K1 equ <L("secP192k1")>
      BCRYPT_ECC_CURVE_SECP192R1 equ <L("secP192r1")>
      BCRYPT_ECC_CURVE_SECP224K1 equ <L("secP224k1")>
      BCRYPT_ECC_CURVE_SECP224R1 equ <L("secP224r1")>
      BCRYPT_ECC_CURVE_SECP256K1 equ <L("secP256k1")>
      BCRYPT_ECC_CURVE_SECP256R1 equ <L("secP256r1")>
      BCRYPT_ECC_CURVE_SECP384R1 equ <L("secP384r1")>
      BCRYPT_ECC_CURVE_SECP521R1 equ <L("secP521r1")>
      BCRYPT_ECC_CURVE_WTLS7 equ <L("wtls7")>
      BCRYPT_ECC_CURVE_WTLS9 equ <L("wtls9")>
      BCRYPT_ECC_CURVE_WTLS12 equ <L("wtls12")>
      BCRYPT_ECC_CURVE_X962P192V1 equ <L("x962P192v1")>
      BCRYPT_ECC_CURVE_X962P192V2 equ <L("x962P192v2")>
      BCRYPT_ECC_CURVE_X962P192V3 equ <L("x962P192v3")>
      BCRYPT_ECC_CURVE_X962P239V1 equ <L("x962P239v1")>
      BCRYPT_ECC_CURVE_X962P239V2 equ <L("x962P239v2")>
      BCRYPT_ECC_CURVE_X962P239V3 equ <L("x962P239v3")>
      BCRYPT_ECC_CURVE_X962P256V1 equ <L("x962P256v1")>
    endif
    BCRYPT_HASH_OPERATION_TYPE typedef SDWORD
    BCRYPT_HASH_OPERATION_HASH_DATA equ 1
    BCRYPT_HASH_OPERATION_FINISH_HASH equ 2
    
    BCRYPT_MULTI_HASH_OPERATION struct
      iHash ULONG ?
      hashOperation BCRYPT_HASH_OPERATION_TYPE ?
      pbBuffer PUCHAR ?
      cbBuffer ULONG ?
    BCRYPT_MULTI_HASH_OPERATION ends
    _BCRYPT_MULTI_HASH_OPERATION typedef BCRYPT_MULTI_HASH_OPERATION
    BCRYPT_MULTI_OPERATION_TYPE typedef SDWORD
    BCRYPT_OPERATION_TYPE_HASH equ 1
    
    BCRYPT_MULTI_OBJECT_LENGTH_STRUCT struct
      cbPerObject ULONG ?
      cbPerElement ULONG ?
    BCRYPT_MULTI_OBJECT_LENGTH_STRUCT ends
    _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT typedef BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
    MS_PRIMITIVE_PROVIDER equ <L("Microsoft Primitive Provider")>
    MS_PLATFORM_CRYPTO_PROVIDER equ <L("Microsoft Platform Crypto Provider")>
    BCRYPT_RSA_ALGORITHM equ <L("RSA")>
    BCRYPT_RSA_SIGN_ALGORITHM equ <L("RSA_SIGN")>
    BCRYPT_DH_ALGORITHM equ <L("DH")>
    BCRYPT_DSA_ALGORITHM equ <L("DSA")>
    BCRYPT_RC2_ALGORITHM equ <L("RC2")>
    BCRYPT_RC4_ALGORITHM equ <L("RC4")>
    BCRYPT_AES_ALGORITHM equ <L("AES")>
    BCRYPT_DES_ALGORITHM equ <L("DES")>
    BCRYPT_DESX_ALGORITHM equ <L("DESX")>
    BCRYPT_3DES_ALGORITHM equ <L("3DES")>
    BCRYPT_3DES_112_ALGORITHM equ <L("3DES_112")>
    BCRYPT_MD2_ALGORITHM equ <L("MD2")>
    BCRYPT_MD4_ALGORITHM equ <L("MD4")>
    BCRYPT_MD5_ALGORITHM equ <L("MD5")>
    BCRYPT_SHA1_ALGORITHM equ <L("SHA1")>
    BCRYPT_SHA256_ALGORITHM equ <L("SHA256")>
    BCRYPT_SHA384_ALGORITHM equ <L("SHA384")>
    BCRYPT_SHA512_ALGORITHM equ <L("SHA512")>
    BCRYPT_AES_GMAC_ALGORITHM equ <L("AES-GMAC")>
    BCRYPT_AES_CMAC_ALGORITHM equ <L("AES-CMAC")>
    BCRYPT_ECDSA_P256_ALGORITHM equ <L("ECDSA_P256")>
    BCRYPT_ECDSA_P384_ALGORITHM equ <L("ECDSA_P384")>
    BCRYPT_ECDSA_P521_ALGORITHM equ <L("ECDSA_P521")>
    BCRYPT_ECDH_P256_ALGORITHM equ <L("ECDH_P256")>
    BCRYPT_ECDH_P384_ALGORITHM equ <L("ECDH_P384")>
    BCRYPT_ECDH_P521_ALGORITHM equ <L("ECDH_P521")>
    BCRYPT_RNG_ALGORITHM equ <L("RNG")>
    BCRYPT_RNG_FIPS186_DSA_ALGORITHM equ <L("FIPS186DSARNG")>
    BCRYPT_RNG_DUAL_EC_ALGORITHM equ <L("DUALECRNG")>
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_SP800108_CTR_HMAC_ALGORITHM equ <L("SP800_108_CTR_HMAC")>
      BCRYPT_SP80056A_CONCAT_ALGORITHM equ <L("SP800_56A_CONCAT")>
      BCRYPT_PBKDF2_ALGORITHM equ <L("PBKDF2")>
      BCRYPT_CAPI_KDF_ALGORITHM equ <L("CAPI_KDF")>
      BCRYPT_TLS1_1_KDF_ALGORITHM equ <L("TLS1_1_KDF")>
      BCRYPT_TLS1_2_KDF_ALGORITHM equ <L("TLS1_2_KDF")>
    endif
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ECDSA_ALGORITHM equ <L("ECDSA")>
      BCRYPT_ECDH_ALGORITHM equ <L("ECDH")>
      BCRYPT_XTS_AES_ALGORITHM equ <L("XTS-AES")>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS4)
      BCRYPT_HKDF_ALGORITHM equ <L("HKDF")>
    endif
    BCRYPT_CIPHER_INTERFACE equ 00000001h
    BCRYPT_HASH_INTERFACE equ 00000002h
    BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE equ 00000003h
    BCRYPT_SECRET_AGREEMENT_INTERFACE equ 00000004h
    BCRYPT_SIGNATURE_INTERFACE equ 00000005h
    BCRYPT_RNG_INTERFACE equ 00000006h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_KEY_DERIVATION_INTERFACE equ 00000007h
    endif
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_MD2_ALG_HANDLE equ (00000001h)
      BCRYPT_MD4_ALG_HANDLE equ (00000011h)
      BCRYPT_MD5_ALG_HANDLE equ (00000021h)
      BCRYPT_SHA1_ALG_HANDLE equ (00000031h)
      BCRYPT_SHA256_ALG_HANDLE equ (00000041h)
      BCRYPT_SHA384_ALG_HANDLE equ (00000051h)
      BCRYPT_SHA512_ALG_HANDLE equ (00000061h)
      BCRYPT_RC4_ALG_HANDLE equ (00000071h)
      BCRYPT_RNG_ALG_HANDLE equ (00000081h)
      BCRYPT_HMAC_MD5_ALG_HANDLE equ (00000091h)
      BCRYPT_HMAC_SHA1_ALG_HANDLE equ (000000a1h)
      BCRYPT_HMAC_SHA256_ALG_HANDLE equ (000000b1h)
      BCRYPT_HMAC_SHA384_ALG_HANDLE equ (000000c1h)
      BCRYPT_HMAC_SHA512_ALG_HANDLE equ (000000d1h)
      BCRYPT_RSA_ALG_HANDLE equ (000000e1h)
      BCRYPT_ECDSA_ALG_HANDLE equ (000000f1h)
      BCRYPT_AES_CMAC_ALG_HANDLE equ (00000101h)
      BCRYPT_AES_GMAC_ALG_HANDLE equ (00000111h)
      BCRYPT_HMAC_MD2_ALG_HANDLE equ (00000121h)
      BCRYPT_HMAC_MD4_ALG_HANDLE equ (00000131h)
      BCRYPT_3DES_CBC_ALG_HANDLE equ (00000141h)
      BCRYPT_3DES_ECB_ALG_HANDLE equ (00000151h)
      BCRYPT_3DES_CFB_ALG_HANDLE equ (00000161h)
      BCRYPT_3DES_112_CBC_ALG_HANDLE equ (00000171h)
      BCRYPT_3DES_112_ECB_ALG_HANDLE equ (00000181h)
      BCRYPT_3DES_112_CFB_ALG_HANDLE equ (00000191h)
      BCRYPT_AES_CBC_ALG_HANDLE equ (000001a1h)
      BCRYPT_AES_ECB_ALG_HANDLE equ (000001b1h)
      BCRYPT_AES_CFB_ALG_HANDLE equ (000001c1h)
      BCRYPT_AES_CCM_ALG_HANDLE equ (000001d1h)
      BCRYPT_AES_GCM_ALG_HANDLE equ (000001e1h)
      BCRYPT_DES_CBC_ALG_HANDLE equ (000001f1h)
      BCRYPT_DES_ECB_ALG_HANDLE equ (00000201h)
      BCRYPT_DES_CFB_ALG_HANDLE equ (00000211h)
      BCRYPT_DESX_CBC_ALG_HANDLE equ (00000221h)
      BCRYPT_DESX_ECB_ALG_HANDLE equ (00000231h)
      BCRYPT_DESX_CFB_ALG_HANDLE equ (00000241h)
      BCRYPT_RC2_CBC_ALG_HANDLE equ (00000251h)
      BCRYPT_RC2_ECB_ALG_HANDLE equ (00000261h)
      BCRYPT_RC2_CFB_ALG_HANDLE equ (00000271h)
      BCRYPT_DH_ALG_HANDLE equ (00000281h)
      BCRYPT_ECDH_ALG_HANDLE equ (00000291h)
      BCRYPT_ECDH_P256_ALG_HANDLE equ (000002a1h)
      BCRYPT_ECDH_P384_ALG_HANDLE equ (000002b1h)
      BCRYPT_ECDH_P521_ALG_HANDLE equ (000002c1h)
      BCRYPT_DSA_ALG_HANDLE equ (000002d1h)
      BCRYPT_ECDSA_P256_ALG_HANDLE equ (000002e1h)
      BCRYPT_ECDSA_P384_ALG_HANDLE equ (000002f1h)
      BCRYPT_ECDSA_P521_ALG_HANDLE equ (00000301h)
      BCRYPT_RSA_SIGN_ALG_HANDLE equ (00000311h)
      BCRYPT_CAPI_KDF_ALG_HANDLE equ (00000321h)
      BCRYPT_PBKDF2_ALG_HANDLE equ (00000331h)
      BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE equ (00000341h)
      BCRYPT_SP80056A_CONCAT_ALG_HANDLE equ (00000351h)
      BCRYPT_TLS1_1_KDF_ALG_HANDLE equ (00000361h)
      BCRYPT_TLS1_2_KDF_ALG_HANDLE equ (00000371h)
      BCRYPT_XTS_AES_ALG_HANDLE equ (00000381h)
      BCRYPT_HKDF_ALG_HANDLE equ (00000391h)
    endif
    BCRYPT_ALG_HANDLE_HMAC_FLAG equ 00000008h
    BCRYPT_HASH_REUSABLE_FLAG equ 00000020h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_CAPI_AES_FLAG equ 00000010h
    endif
    if (NTDDI_VERSION gt NTDDI_WINBLUE or (NTDDI_VERSION eq NTDDI_WINBLUE and Defined(WINBLUE_KBSPRING14)))
      BCRYPT_MULTI_FLAG equ 00000040h
    endif
    BCRYPT_BUFFERS_LOCKED_FLAG equ 00000040h
    if (NTDDI_VERSION ge NTDDI_WINBLUE)
      BCRYPT_EXTENDED_KEYSIZE equ 00000080h
    endif
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS equ 00000100h
    endif
    BCryptOpenAlgorithmProvider proto WIN_STD_CALL_CONV :ptr BCRYPT_ALG_HANDLE, :LPCWSTR, :LPCWSTR, :ULONG
    BCRYPT_CIPHER_OPERATION equ 00000001h
    BCRYPT_HASH_OPERATION equ 00000002h
    BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION equ 00000004h
    BCRYPT_SECRET_AGREEMENT_OPERATION equ 00000008h
    BCRYPT_SIGNATURE_OPERATION equ 00000010h
    BCRYPT_RNG_OPERATION equ 00000020h
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCRYPT_KEY_DERIVATION_OPERATION equ 00000040h
    endif
    BCRYPT_ALGORITHM_IDENTIFIER struct
      pszName LPWSTR ?
      dwClass ULONG ?
      dwFlags ULONG ?
    BCRYPT_ALGORITHM_IDENTIFIER ends
    _BCRYPT_ALGORITHM_IDENTIFIER typedef BCRYPT_ALGORITHM_IDENTIFIER
    BCryptEnumAlgorithms proto WIN_STD_CALL_CONV :ULONG, :ptr ULONG, :ptr ptr BCRYPT_ALGORITHM_IDENTIFIER, :ULONG
    BCRYPT_PROVIDER_NAME struct
      pszProviderName LPWSTR ?
    BCRYPT_PROVIDER_NAME ends
    _BCRYPT_PROVIDER_NAME typedef BCRYPT_PROVIDER_NAME
    BCryptEnumProviders proto WIN_STD_CALL_CONV :LPCWSTR, :ptr ULONG, :ptr ptr BCRYPT_PROVIDER_NAME, :ULONG
    BCRYPT_PUBLIC_KEY_FLAG equ 00000001h
    BCRYPT_PRIVATE_KEY_FLAG equ 00000002h
    BCryptGetProperty proto WIN_STD_CALL_CONV :BCRYPT_HANDLE, :LPCWSTR, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    BCryptSetProperty proto WIN_STD_CALL_CONV :BCRYPT_HANDLE, :LPCWSTR, :PUCHAR, :ULONG, :ULONG
    BCryptCloseAlgorithmProvider proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :ULONG
    BCryptFreeBuffer proto WIN_STD_CALL_CONV :PVOID
    BCryptGenerateSymmetricKey proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :ptr BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONG
    BCryptGenerateKeyPair proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :ptr BCRYPT_KEY_HANDLE, :ULONG, :ULONG
    BCryptEncrypt proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :ptr VOID, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    BCryptDecrypt proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :ptr VOID, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    BCryptExportKey proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :BCRYPT_KEY_HANDLE, :LPCWSTR, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    BCryptImportKey proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :BCRYPT_KEY_HANDLE, :LPCWSTR, :ptr BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONG
    BCRYPT_NO_KEY_VALIDATION equ 00000008h
    BCryptImportKeyPair proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :BCRYPT_KEY_HANDLE, :LPCWSTR, :ptr BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :ULONG
    BCryptDuplicateKey proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :ptr BCRYPT_KEY_HANDLE, :PUCHAR, :ULONG, :ULONG
    BCryptFinalizeKeyPair proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :ULONG
    BCryptDestroyKey proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE
    BCryptDestroySecret proto WIN_STD_CALL_CONV :BCRYPT_SECRET_HANDLE
    BCryptSignHash proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :ptr VOID, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    BCryptVerifySignature proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :ptr VOID, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONG
    BCryptSecretAgreement proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :BCRYPT_KEY_HANDLE, :ptr BCRYPT_SECRET_HANDLE, :ULONG
    BCryptDeriveKey proto WIN_STD_CALL_CONV :BCRYPT_SECRET_HANDLE, :LPCWSTR, :ptr BCryptBufferDesc, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    if (NTDDI_VERSION ge NTDDI_WIN8)
      BCryptKeyDerivation proto WIN_STD_CALL_CONV :BCRYPT_KEY_HANDLE, :ptr BCryptBufferDesc, :PUCHAR, :ULONG, :ptr ULONG, :ULONG
    endif
    BCryptCreateHash proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :ptr BCRYPT_HASH_HANDLE, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONG
    BCryptHashData proto WIN_STD_CALL_CONV :BCRYPT_HASH_HANDLE, :PUCHAR, :ULONG, :ULONG
    BCryptFinishHash proto WIN_STD_CALL_CONV :BCRYPT_HASH_HANDLE, :PUCHAR, :ULONG, :ULONG
    if (NTDDI_VERSION gt NTDDI_WINBLUE or (NTDDI_VERSION eq NTDDI_WINBLUE and Defined(WINBLUE_KBSPRING14)))
      BCryptCreateMultiHash proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :ptr BCRYPT_HASH_HANDLE, :ULONG, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONG
      BCryptProcessMultiOperations proto WIN_STD_CALL_CONV :BCRYPT_HANDLE, :BCRYPT_MULTI_OPERATION_TYPE, :PVOID, :ULONG, :ULONG
    endif
    BCryptDuplicateHash proto WIN_STD_CALL_CONV :BCRYPT_HASH_HANDLE, :ptr BCRYPT_HASH_HANDLE, :PUCHAR, :ULONG, :ULONG
    BCryptDestroyHash proto WIN_STD_CALL_CONV :BCRYPT_HASH_HANDLE
    if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
      BCryptHash proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :PUCHAR, :ULONG
    endif
    BCRYPT_RNG_USE_ENTROPY_IN_BUFFER equ 00000001h
    BCRYPT_USE_SYSTEM_PREFERRED_RNG equ 00000002h
    BCryptGenRandom proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :PUCHAR, :ULONG, :ULONG
    if (NTDDI_VERSION ge NTDDI_WIN7)
      BCryptDeriveKeyCapi proto WIN_STD_CALL_CONV :BCRYPT_HASH_HANDLE, :BCRYPT_ALG_HANDLE, :PUCHAR, :ULONG, :ULONG
    endif
    if (NTDDI_VERSION ge NTDDI_WIN7)
      BCryptDeriveKeyPBKDF2 proto WIN_STD_CALL_CONV :BCRYPT_ALG_HANDLE, :PUCHAR, :ULONG, :PUCHAR, :ULONG, :ULONGLONG, :PUCHAR, :ULONG, :ULONG
    endif
    BCRYPT_INTERFACE_VERSION struct
      MajorVersion USHORT ?
      MinorVersion USHORT ?
    BCRYPT_INTERFACE_VERSION ends
    _BCRYPT_INTERFACE_VERSION typedef BCRYPT_INTERFACE_VERSION
    PBCRYPT_INTERFACE_VERSION typedef ptr BCRYPT_INTERFACE_VERSION
    
    BCRYPT_MAKE_INTERFACE_VERSION macro major, minor
      exitm <{ major, minor }>
    endm
    BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE macro loader, provider
      exitm <((loader).MajorVersion <= (provider).MajorVersion)>
    endm
    BCRYPT_CIPHER_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    BCRYPT_HASH_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    if (NTDDI_VERSION gt NTDDI_WINBLUE or (NTDDI_VERSION eq NTDDI_WINBLUE and Defined(WINBLUE_KBSPRING14)))
      BCRYPT_HASH_INTERFACE_MAJORVERSION_2 equ 2
      BCRYPT_HASH_INTERFACE_VERSION_2 equ BCRYPT_MAKE_INTERFACE_VERSION(BCRYPT_HASH_INTERFACE_MAJORVERSION_2, 0)
    endif
    BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    BCRYPT_SECRET_AGREEMENT_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    BCRYPT_SIGNATURE_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    BCRYPT_RNG_INTERFACE_VERSION_1 equ BCRYPT_MAKE_INTERFACE_VERSION(1, 0)
    CRYPT_MIN_DEPENDENCIES equ 00000001h
    CRYPT_PROCESS_ISOLATE equ 00010000h
    CRYPT_UM equ 00000001h
    CRYPT_KM equ 00000002h
    CRYPT_MM equ 00000003h
    CRYPT_ANY equ 00000004h
    CRYPT_OVERWRITE equ 00000001h
    CRYPT_LOCAL equ 00000001h
    CRYPT_DOMAIN equ 00000002h
    CRYPT_EXCLUSIVE equ 00000001h
    CRYPT_OVERRIDE equ 00010000h
    CRYPT_ALL_FUNCTIONS equ 00000001h
    CRYPT_ALL_PROVIDERS equ 00000002h
    CRYPT_PRIORITY_TOP equ 00000000h
    CRYPT_PRIORITY_BOTTOM equ 0FFFFFFFFh
    CRYPT_DEFAULT_CONTEXT equ <L("Default")>
    CRYPT_INTERFACE_REG struct
      dwInterface ULONG ?
      dwFlags ULONG ?
      cFunctions ULONG ?
      rgpszFunctions POINTER ?
    CRYPT_INTERFACE_REG ends
    _CRYPT_INTERFACE_REG typedef CRYPT_INTERFACE_REG
    PCRYPT_INTERFACE_REG typedef ptr CRYPT_INTERFACE_REG
    
    CRYPT_IMAGE_REG struct
      pszImage PWSTR ?
      cInterfaces ULONG ?
      rgpInterfaces POINTER ?
    CRYPT_IMAGE_REG ends
    _CRYPT_IMAGE_REG typedef CRYPT_IMAGE_REG
    PCRYPT_IMAGE_REG typedef ptr CRYPT_IMAGE_REG
    
    CRYPT_PROVIDER_REG struct
      cAliases ULONG ?
      rgpszAliases POINTER ?
      pUM PCRYPT_IMAGE_REG ?
      pKM PCRYPT_IMAGE_REG ?
    CRYPT_PROVIDER_REG ends
    _CRYPT_PROVIDER_REG typedef CRYPT_PROVIDER_REG
    PCRYPT_PROVIDER_REG typedef ptr CRYPT_PROVIDER_REG
    
    CRYPT_PROVIDERS struct
      cProviders ULONG ?
      rgpszProviders POINTER ?
    CRYPT_PROVIDERS ends
    _CRYPT_PROVIDERS typedef CRYPT_PROVIDERS
    PCRYPT_PROVIDERS typedef ptr CRYPT_PROVIDERS
    
    CRYPT_CONTEXT_CONFIG struct
      dwFlags ULONG ?
      dwReserved ULONG ?
    CRYPT_CONTEXT_CONFIG ends
    _CRYPT_CONTEXT_CONFIG typedef CRYPT_CONTEXT_CONFIG
    PCRYPT_CONTEXT_CONFIG typedef ptr CRYPT_CONTEXT_CONFIG
    
    CRYPT_CONTEXT_FUNCTION_CONFIG struct
      dwFlags ULONG ?
      dwReserved ULONG ?
    CRYPT_CONTEXT_FUNCTION_CONFIG ends
    _CRYPT_CONTEXT_FUNCTION_CONFIG typedef CRYPT_CONTEXT_FUNCTION_CONFIG
    PCRYPT_CONTEXT_FUNCTION_CONFIG typedef ptr CRYPT_CONTEXT_FUNCTION_CONFIG
    
    CRYPT_CONTEXTS struct
      cContexts ULONG ?
      rgpszContexts POINTER ?
    CRYPT_CONTEXTS ends
    _CRYPT_CONTEXTS typedef CRYPT_CONTEXTS
    PCRYPT_CONTEXTS typedef ptr CRYPT_CONTEXTS
    
    CRYPT_CONTEXT_FUNCTIONS struct
      cFunctions ULONG ?
      rgpszFunctions POINTER ?
    CRYPT_CONTEXT_FUNCTIONS ends
    _CRYPT_CONTEXT_FUNCTIONS typedef CRYPT_CONTEXT_FUNCTIONS
    PCRYPT_CONTEXT_FUNCTIONS typedef ptr CRYPT_CONTEXT_FUNCTIONS
    
    CRYPT_CONTEXT_FUNCTION_PROVIDERS struct
      cProviders ULONG ?
      rgpszProviders POINTER ?
    CRYPT_CONTEXT_FUNCTION_PROVIDERS ends
    _CRYPT_CONTEXT_FUNCTION_PROVIDERS typedef CRYPT_CONTEXT_FUNCTION_PROVIDERS
    PCRYPT_CONTEXT_FUNCTION_PROVIDERS typedef ptr CRYPT_CONTEXT_FUNCTION_PROVIDERS
    
    CRYPT_PROPERTY_REF struct
      pszProperty PWSTR ?
      cbValue ULONG ?
      pbValue PUCHAR ?
    CRYPT_PROPERTY_REF ends
    _CRYPT_PROPERTY_REF typedef CRYPT_PROPERTY_REF
    PCRYPT_PROPERTY_REF typedef ptr CRYPT_PROPERTY_REF
    
    CRYPT_IMAGE_REF struct
      pszImage PWSTR ?
      dwFlags ULONG ?
    CRYPT_IMAGE_REF ends
    _CRYPT_IMAGE_REF typedef CRYPT_IMAGE_REF
    PCRYPT_IMAGE_REF typedef ptr CRYPT_IMAGE_REF
    
    CRYPT_PROVIDER_REF struct
      dwInterface ULONG ?
      pszFunction PWSTR ?
      pszProvider PWSTR ?
      cProperties ULONG ?
      rgpProperties POINTER ?
      pUM PCRYPT_IMAGE_REF ?
      pKM PCRYPT_IMAGE_REF ?
    CRYPT_PROVIDER_REF ends
    _CRYPT_PROVIDER_REF typedef CRYPT_PROVIDER_REF
    PCRYPT_PROVIDER_REF typedef ptr CRYPT_PROVIDER_REF
    
    CRYPT_PROVIDER_REFS struct
      cProviders ULONG ?
      rgpProviders POINTER ?
    CRYPT_PROVIDER_REFS ends
    _CRYPT_PROVIDER_REFS typedef CRYPT_PROVIDER_REFS
    PCRYPT_PROVIDER_REFS typedef ptr CRYPT_PROVIDER_REFS
    
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    ifndef KERNEL_MODE_CNG
      BCryptQueryProviderRegistration proto WIN_STD_CALL_CONV :LPCWSTR, :ULONG, :ULONG, :ptr ULONG, :ptr PCRYPT_PROVIDER_REG
      BCryptEnumRegisteredProviders proto WIN_STD_CALL_CONV :ptr ULONG, :ptr PCRYPT_PROVIDERS
      BCryptCreateContext proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :PCRYPT_CONTEXT_CONFIG
      BCryptDeleteContext proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR
      BCryptEnumContexts proto WIN_STD_CALL_CONV :ULONG, :ptr ULONG, :ptr PCRYPT_CONTEXTS
      BCryptConfigureContext proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :PCRYPT_CONTEXT_CONFIG
      BCryptQueryContextConfiguration proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ptr ULONG, :ptr PCRYPT_CONTEXT_CONFIG
      BCryptAddContextFunction proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :ULONG
      BCryptRemoveContextFunction proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR
      BCryptEnumContextFunctions proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :ptr ULONG, :ptr PCRYPT_CONTEXT_FUNCTIONS
      BCryptConfigureContextFunction proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :PCRYPT_CONTEXT_FUNCTION_CONFIG
      BCryptQueryContextFunctionConfiguration proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :ptr ULONG, :ptr PCRYPT_CONTEXT_FUNCTION_CONFIG
      BCryptEnumContextFunctionProviders proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :ptr ULONG, :ptr PCRYPT_CONTEXT_FUNCTION_PROVIDERS
      BCryptSetContextFunctionProperty proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :LPCWSTR, :ULONG, :PUCHAR
      BCryptQueryContextFunctionProperty proto WIN_STD_CALL_CONV :ULONG, :LPCWSTR, :ULONG, :LPCWSTR, :LPCWSTR, :ptr ULONG, :ptr PUCHAR
    endif
    ifdef KERNEL_MODE_CNG
      BCryptRegisterConfigChangeNotify proto WIN_STD_CALL_CONV :PRKEVENT
    else
      BCryptRegisterConfigChangeNotify proto WIN_STD_CALL_CONV :ptr HANDLE
    endif
    ifdef KERNEL_MODE_CNG
      BCryptUnregisterConfigChangeNotify proto WIN_STD_CALL_CONV :PRKEVENT
    else
      BCryptUnregisterConfigChangeNotify proto WIN_STD_CALL_CONV :HANDLE
    endif
    BCryptResolveProviders proto WIN_STD_CALL_CONV :LPCWSTR, :ULONG, :LPCWSTR, :LPCWSTR, :ULONG, :ULONG, :ptr ULONG, :ptr PCRYPT_PROVIDER_REFS
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    BCryptGetFipsAlgorithmMode proto WIN_STD_CALL_CONV :ptr BOOLEAN
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
;    CngGetFipsAlgorithmMode proto WIN_STD_CALL_CONV
  endif
  ifdef __cplusplus
    ;[...]
  endif
  if _MSC_VER ge 1200
  endif
endif
