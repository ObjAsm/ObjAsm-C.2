;Include file created by h2inc+ version C.2.0 on (UTC) 15/06/2024 16:37:44
;(C) G. Friedrich April 2024
;Source file: d:\objasm\projects\x\h2inc+\h\um_10.0.22621.0\iphlpapi.h
;             Created on (UTC) 06/04/2024 06:15:56
;             Last modified on (UTC) 12/02/2024 17:05:30

ifndef __IPHLPAPI_H__
  __IPHLPAPI_H__ equ <>
  if _MSC_VER gt 1000
  endif
  include winapifamily.inc
  ifndef IPHLPAPI_DLL_LINKAGE
    ifdef DECLSPEC_IMPORT
      IPHLPAPI_DLL_LINKAGE equ <DECLSPEC_IMPORT>
    else
      IPHLPAPI_DLL_LINKAGE equ <>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ifdef __cplusplus
      ;[...]
    endif
    include iprtrmib.inc
    include ipexport.inc
    include iptypes.inc
    include tcpestats.inc
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetNumberOfInterfaces proto WIN_STD_CALL_CONV :PDWORD
    GetIfEntry proto WIN_STD_CALL_CONV :PMIB_IFROW
    GetIfTable proto WIN_STD_CALL_CONV :PMIB_IFTABLE, :PULONG, :BOOL
    GetIpAddrTable proto WIN_STD_CALL_CONV :PMIB_IPADDRTABLE, :PULONG, :BOOL
    GetIpNetTable proto WIN_STD_CALL_CONV :PMIB_IPNETTABLE, :PULONG, :BOOL
    GetIpForwardTable proto WIN_STD_CALL_CONV :PMIB_IPFORWARDTABLE, :PULONG, :BOOL
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetTcpTable proto WIN_STD_CALL_CONV :PMIB_TCPTABLE, :PULONG, :BOOL
    GetExtendedTcpTable proto WIN_STD_CALL_CONV :PVOID, :PDWORD, :BOOL, :ULONG, :TCP_TABLE_CLASS, :ULONG
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetOwnerModuleFromTcpEntry proto WIN_STD_CALL_CONV :PMIB_TCPROW_OWNER_MODULE, :TCPIP_OWNER_MODULE_INFO_CLASS, :PVOID, :PDWORD
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetUdpTable proto WIN_STD_CALL_CONV :PMIB_UDPTABLE, :PULONG, :BOOL
    GetExtendedUdpTable proto WIN_STD_CALL_CONV :PVOID, :PDWORD, :BOOL, :ULONG, :UDP_TABLE_CLASS, :ULONG
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetOwnerModuleFromUdpEntry proto WIN_STD_CALL_CONV :PMIB_UDPROW_OWNER_MODULE, :TCPIP_OWNER_MODULE_INFO_CLASS, :PVOID, :PDWORD
    if (NTDDI_VERSION ge NTDDI_VISTA)
      GetTcpTable2 proto WIN_STD_CALL_CONV :PMIB_TCPTABLE2, :PULONG, :BOOL
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if (NTDDI_VERSION lt NTDDI_VISTA)
      AllocateAndGetTcpExTableFromStack proto WIN_STD_CALL_CONV :ptr PVOID, :BOOL, :HANDLE, :DWORD, :DWORD
      AllocateAndGetUdpExTableFromStack proto WIN_STD_CALL_CONV :ptr PVOID, :BOOL, :HANDLE, :DWORD, :DWORD
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ifdef _WS2IPDEF_
      if (NTDDI_VERSION ge NTDDI_VISTA)
        GetTcp6Table proto WIN_STD_CALL_CONV :PMIB_TCP6TABLE, :PULONG, :BOOL
        GetTcp6Table2 proto WIN_STD_CALL_CONV :PMIB_TCP6TABLE2, :PULONG, :BOOL
      endif
      ifdef WINAPI
        GetPerTcpConnectionEStats proto WIN_STD_CALL_CONV :PMIB_TCPROW, :TCP_ESTATS_TYPE, :PUCHAR, :ULONG, :ULONG, :PUCHAR, :ULONG, :ULONG, :PUCHAR, :ULONG, :ULONG
        SetPerTcpConnectionEStats proto WIN_STD_CALL_CONV :PMIB_TCPROW, :TCP_ESTATS_TYPE, :PUCHAR, :ULONG, :ULONG, :ULONG
        ifdef _WS2IPDEF_
          GetPerTcp6ConnectionEStats proto WIN_STD_CALL_CONV :PMIB_TCP6ROW, :TCP_ESTATS_TYPE, :PUCHAR, :ULONG, :ULONG, :PUCHAR, :ULONG, :ULONG, :PUCHAR, :ULONG, :ULONG
          SetPerTcp6ConnectionEStats proto WIN_STD_CALL_CONV :PMIB_TCP6ROW, :TCP_ESTATS_TYPE, :PUCHAR, :ULONG, :ULONG, :ULONG
        endif
      endif
      GetOwnerModuleFromTcp6Entry proto WIN_STD_CALL_CONV :PMIB_TCP6ROW_OWNER_MODULE, :TCPIP_OWNER_MODULE_INFO_CLASS, :PVOID, :PDWORD
      GetUdp6Table proto WIN_STD_CALL_CONV :PMIB_UDP6TABLE, :PULONG, :BOOL
      GetOwnerModuleFromUdp6Entry proto WIN_STD_CALL_CONV :PMIB_UDP6ROW_OWNER_MODULE, :TCPIP_OWNER_MODULE_INFO_CLASS, :PVOID, :PDWORD
    endif
    GetOwnerModuleFromPidAndInfo proto WIN_STD_CALL_CONV :ULONG, :ptr ULONGLONG, :TCPIP_OWNER_MODULE_INFO_CLASS, :PVOID, :PDWORD
    if (NTDDI_VERSION ge NTDDI_WIN2K)
      GetIpStatistics proto WIN_STD_CALL_CONV :PMIB_IPSTATS
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    if (NTDDI_VERSION ge NTDDI_WIN2K)
      GetIcmpStatistics proto WIN_STD_CALL_CONV :PMIB_ICMP
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    if (NTDDI_VERSION ge NTDDI_WIN2K)
      GetTcpStatistics proto WIN_STD_CALL_CONV :PMIB_TCPSTATS
      GetUdpStatistics proto WIN_STD_CALL_CONV :PMIB_UDPSTATS
    endif
    if (NTDDI_VERSION ge NTDDI_WINXP)
      SetIpStatisticsEx proto WIN_STD_CALL_CONV :PMIB_IPSTATS, :ULONG
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    if (NTDDI_VERSION ge NTDDI_WINXP)
      GetIpStatisticsEx proto WIN_STD_CALL_CONV :PMIB_IPSTATS, :ULONG
      GetIcmpStatisticsEx proto WIN_STD_CALL_CONV :PMIB_ICMP_EX, :ULONG
      GetTcpStatisticsEx proto WIN_STD_CALL_CONV :PMIB_TCPSTATS, :ULONG
      GetUdpStatisticsEx proto WIN_STD_CALL_CONV :PMIB_UDPSTATS, :ULONG
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      GetTcpStatisticsEx2 proto WIN_STD_CALL_CONV :PMIB_TCPSTATS2, :ULONG
      GetUdpStatisticsEx2 proto WIN_STD_CALL_CONV :PMIB_UDPSTATS2, :ULONG
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    SetIfEntry proto WIN_STD_CALL_CONV :PMIB_IFROW
    CreateIpForwardEntry proto WIN_STD_CALL_CONV :PMIB_IPFORWARDROW
    SetIpForwardEntry proto WIN_STD_CALL_CONV :PMIB_IPFORWARDROW
    DeleteIpForwardEntry proto WIN_STD_CALL_CONV :PMIB_IPFORWARDROW
    if (NTDDI_VERSION ge NTDDI_WIN2K)
      SetIpStatistics proto WIN_STD_CALL_CONV :PMIB_IPSTATS
    endif
    SetIpTTL proto WIN_STD_CALL_CONV :UINT
    CreateIpNetEntry proto WIN_STD_CALL_CONV :PMIB_IPNETROW
    SetIpNetEntry proto WIN_STD_CALL_CONV :PMIB_IPNETROW
    DeleteIpNetEntry proto WIN_STD_CALL_CONV :PMIB_IPNETROW
    FlushIpNetTable proto WIN_STD_CALL_CONV :DWORD
    CreateProxyArpEntry proto WIN_STD_CALL_CONV :DWORD, :DWORD, :DWORD
    DeleteProxyArpEntry proto WIN_STD_CALL_CONV :DWORD, :DWORD, :DWORD
    SetTcpEntry proto WIN_STD_CALL_CONV :PMIB_TCPROW
    GetInterfaceInfo proto WIN_STD_CALL_CONV :PIP_INTERFACE_INFO, :PULONG
    GetUniDirectionalAdapterInfo proto WIN_STD_CALL_CONV :PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS, :PULONG
    if (NTDDI_VERSION ge NTDDI_WIN2KSP1)
      ifndef NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED
        NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED equ <>
        NhpAllocateAndGetInterfaceInfoFromStack proto WIN_STD_CALL_CONV :ptr ptr IP_INTERFACE_NAME_INFO, :PDWORD, :BOOL, :HANDLE, :DWORD
      endif
    endif
    GetBestInterface proto WIN_STD_CALL_CONV :IPAddr, :PDWORD
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetBestInterfaceEx proto WIN_STD_CALL_CONV :ptr sockaddr, :PDWORD
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetBestRoute proto WIN_STD_CALL_CONV :DWORD, :DWORD, :PMIB_IPFORWARDROW
    NotifyAddrChange proto WIN_STD_CALL_CONV :PHANDLE, :LPOVERLAPPED
    NotifyRouteChange proto WIN_STD_CALL_CONV :PHANDLE, :LPOVERLAPPED
    CancelIPChangeNotify proto WIN_STD_CALL_CONV :LPOVERLAPPED
    GetAdapterIndex proto WIN_STD_CALL_CONV :LPWSTR, :PULONG
    AddIPAddress proto WIN_STD_CALL_CONV :IPAddr, :IPMask, :DWORD, :PULONG, :PULONG
    DeleteIPAddress proto WIN_STD_CALL_CONV :ULONG
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    if (NTDDI_VERSION ge NTDDI_WIN2KSP1)
      GetNetworkParams proto WIN_STD_CALL_CONV :PFIXED_INFO, :PULONG
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    GetAdaptersInfo proto WIN_STD_CALL_CONV :PIP_ADAPTER_INFO, :PULONG
    GetAdapterOrderMap proto WIN_STD_CALL_CONV
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ifdef _WINSOCK2API_
      GetAdaptersAddresses proto WIN_STD_CALL_CONV :ULONG, :ULONG, :PVOID, :PIP_ADAPTER_ADDRESSES, :PULONG
    endif
    if (NTDDI_VERSION ge NTDDI_WIN2KSP1)
      GetPerAdapterInfo proto WIN_STD_CALL_CONV :ULONG, :PIP_PER_ADAPTER_INFO, :PULONG
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    if (NTDDI_VERSION ge NTDDI_WIN10_FE)
      INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES struct
        PtpV2OverUdpIPv4EventMessageReceive BOOLEAN ?
        PtpV2OverUdpIPv4AllMessageReceive BOOLEAN ?
        PtpV2OverUdpIPv4EventMessageTransmit BOOLEAN ?
        PtpV2OverUdpIPv4AllMessageTransmit BOOLEAN ?
        PtpV2OverUdpIPv6EventMessageReceive BOOLEAN ?
        PtpV2OverUdpIPv6AllMessageReceive BOOLEAN ?
        PtpV2OverUdpIPv6EventMessageTransmit BOOLEAN ?
        PtpV2OverUdpIPv6AllMessageTransmit BOOLEAN ?
        AllReceive BOOLEAN ?
        AllTransmit BOOLEAN ?
        TaggedTransmit BOOLEAN ?
      INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES ends
      _INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES typedef INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES
      PINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES typedef ptr INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES
      INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES struct
        AllReceive BOOLEAN ?
        AllTransmit BOOLEAN ?
        TaggedTransmit BOOLEAN ?
      INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES ends
      _INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES typedef INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES
      PINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES typedef ptr INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES
      INTERFACE_TIMESTAMP_CAPABILITIES struct
        HardwareClockFrequencyHz ULONG64 ?
        SupportsCrossTimestamp BOOLEAN ?
        HardwareCapabilities INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES <>
        SoftwareCapabilities INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES <>
      INTERFACE_TIMESTAMP_CAPABILITIES ends
      _INTERFACE_TIMESTAMP_CAPABILITIES typedef INTERFACE_TIMESTAMP_CAPABILITIES
      PINTERFACE_TIMESTAMP_CAPABILITIES typedef ptr INTERFACE_TIMESTAMP_CAPABILITIES
      INTERFACE_HARDWARE_CROSSTIMESTAMP struct
        SystemTimestamp1 ULONG64 ?
        HardwareClockTimestamp ULONG64 ?
        SystemTimestamp2 ULONG64 ?
      INTERFACE_HARDWARE_CROSSTIMESTAMP ends
      _INTERFACE_HARDWARE_CROSSTIMESTAMP typedef INTERFACE_HARDWARE_CROSSTIMESTAMP
      PINTERFACE_HARDWARE_CROSSTIMESTAMP typedef ptr INTERFACE_HARDWARE_CROSSTIMESTAMP
      DECLARE_HANDLE HIFTIMESTAMPCHANGE
      GetInterfaceActiveTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      GetInterfaceSupportedTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      CaptureInterfaceHardwareCrossTimestamp proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_HARDWARE_CROSSTIMESTAMP
      CallerContext typedef VOID
      PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK typedef ptr INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK
      RegisterInterfaceTimestampConfigChange proto WIN_STD_CALL_CONV :PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK, :PVOID, :ptr HIFTIMESTAMPCHANGE
      UnregisterInterfaceTimestampConfigChange proto WIN_STD_CALL_CONV :HIFTIMESTAMPCHANGE
      GetInterfaceCurrentTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      GetInterfaceHardwareTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      NotifyIfTimestampConfigChange proto WIN_STD_CALL_CONV :PVOID, :PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK, :ptr HIFTIMESTAMPCHANGE
      CancelIfTimestampConfigChange proto WIN_STD_CALL_CONV :HIFTIMESTAMPCHANGE
    elseif (NTDDI_VERSION ge NTDDI_WIN10_RS5)
      INTERFACE_TIMESTAMP_CAPABILITIES_VERSION_1 equ 01h
      INTERFACE_HARDWARE_CROSSTIMESTAMP_VERSION_1 equ 01h
      INTERFACE_TIMESTAMP_CAPABILITY_FLAGS struct
        PtpV2OverUdpIPv4EventMsgReceiveHw BOOLEAN ?
        PtpV2OverUdpIPv4AllMsgReceiveHw BOOLEAN ?
        PtpV2OverUdpIPv4EventMsgTransmitHw BOOLEAN ?
        PtpV2OverUdpIPv4AllMsgTransmitHw BOOLEAN ?
        PtpV2OverUdpIPv6EventMsgReceiveHw BOOLEAN ?
        PtpV2OverUdpIPv6AllMsgReceiveHw BOOLEAN ?
        PtpV2OverUdpIPv6EventMsgTransmitHw BOOLEAN ?
        PtpV2OverUdpIPv6AllMsgTransmitHw BOOLEAN ?
        AllReceiveHw BOOLEAN ?
        AllTransmitHw BOOLEAN ?
        TaggedTransmitHw BOOLEAN ?
        AllReceiveSw BOOLEAN ?
        AllTransmitSw BOOLEAN ?
        TaggedTransmitSw BOOLEAN ?
      INTERFACE_TIMESTAMP_CAPABILITY_FLAGS ends
      _INTERFACE_TIMESTAMP_CAPABILITY_FLAGS typedef INTERFACE_TIMESTAMP_CAPABILITY_FLAGS
      PINTERFACE_TIMESTAMP_CAPABILITY_FLAGS typedef ptr INTERFACE_TIMESTAMP_CAPABILITY_FLAGS
      INTERFACE_TIMESTAMP_CAPABILITIES struct
        Version ULONG ?
        HardwareClockFrequencyHz ULONG64 ?
        CrossTimestamp BOOLEAN ?
        Reserved1 ULONG64 ?
        Reserved2 ULONG64 ?
        TimestampFlags INTERFACE_TIMESTAMP_CAPABILITY_FLAGS <>
      INTERFACE_TIMESTAMP_CAPABILITIES ends
      _INTERFACE_TIMESTAMP_CAPABILITIES typedef INTERFACE_TIMESTAMP_CAPABILITIES
      PINTERFACE_TIMESTAMP_CAPABILITIES typedef ptr INTERFACE_TIMESTAMP_CAPABILITIES
      INTERFACE_HARDWARE_CROSSTIMESTAMP struct
        Version ULONG ?
        Flags ULONG ?
        SystemTimestamp1 ULONG64 ?
        HardwareClockTimestamp ULONG64 ?
        SystemTimestamp2 ULONG64 ?
      INTERFACE_HARDWARE_CROSSTIMESTAMP ends
      _INTERFACE_HARDWARE_CROSSTIMESTAMP typedef INTERFACE_HARDWARE_CROSSTIMESTAMP
      PINTERFACE_HARDWARE_CROSSTIMESTAMP typedef ptr INTERFACE_HARDWARE_CROSSTIMESTAMP
      DECLARE_HANDLE HIFTIMESTAMPCHANGE
      GetInterfaceCurrentTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      GetInterfaceHardwareTimestampCapabilities proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_TIMESTAMP_CAPABILITIES
      CaptureInterfaceHardwareCrossTimestamp proto WIN_STD_CALL_CONV :ptr NET_LUID, :PINTERFACE_HARDWARE_CROSSTIMESTAMP
      CallerContext typedef VOID
      PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK typedef ptr INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK
      NotifyIfTimestampConfigChange proto WIN_STD_CALL_CONV :PVOID, :PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK, :ptr HIFTIMESTAMPCHANGE
      CancelIfTimestampConfigChange proto WIN_STD_CALL_CONV :HIFTIMESTAMPCHANGE
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    IpReleaseAddress proto WIN_STD_CALL_CONV :PIP_ADAPTER_INDEX_MAP
    IpRenewAddress proto WIN_STD_CALL_CONV :PIP_ADAPTER_INDEX_MAP
    SendARP proto WIN_STD_CALL_CONV :IPAddr, :IPAddr, :PVOID, :PULONG
    GetRTTAndHopCount proto WIN_STD_CALL_CONV :IPAddr, :PULONG, :ULONG, :PULONG
    GetFriendlyIfIndex proto WIN_STD_CALL_CONV :DWORD
    EnableRouter proto WIN_STD_CALL_CONV :ptr HANDLE, :ptr OVERLAPPED
    UnenableRouter proto WIN_STD_CALL_CONV :ptr OVERLAPPED, :LPDWORD
    DisableMediaSense proto WIN_STD_CALL_CONV :ptr HANDLE, :ptr OVERLAPPED
    RestoreMediaSense proto WIN_STD_CALL_CONV :ptr OVERLAPPED, :LPDWORD
    if (NTDDI_VERSION ge NTDDI_VISTA)
      GetIpErrorString proto WIN_STD_CALL_CONV :IP_STATUS, :PWSTR, :PDWORD
      if (NTDDI_VERSION ge NTDDI_VISTA)
        ifdef _WS2DEF_
          ResolveNeighbor proto WIN_STD_CALL_CONV :ptr SOCKADDR, :PVOID, :PULONG
        endif
      endif
      CreatePersistentTcpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT, :PULONG64
      CreatePersistentUdpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT, :PULONG64
      DeletePersistentTcpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT
      DeletePersistentUdpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT
      LookupPersistentTcpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT, :PULONG64
      LookupPersistentUdpPortReservation proto WIN_STD_CALL_CONV :USHORT, :USHORT, :PULONG64
      NET_STRING_IPV4_ADDRESS equ 00000001h
      NET_STRING_IPV4_SERVICE equ 00000002h
      NET_STRING_IPV4_NETWORK equ 00000004h
      NET_STRING_IPV6_ADDRESS equ 00000008h
      NET_STRING_IPV6_ADDRESS_NO_SCOPE equ 00000010h
      NET_STRING_IPV6_SERVICE equ 00000020h
      NET_STRING_IPV6_SERVICE_NO_SCOPE equ 00000040h
      NET_STRING_IPV6_NETWORK equ 00000080h
      NET_STRING_NAMED_ADDRESS equ 00000100h
      NET_STRING_NAMED_SERVICE equ 00000200h
      NET_STRING_IP_ADDRESS equ <(NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS)>
      NET_STRING_IP_ADDRESS_NO_SCOPE equ <(NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS_NO_SCOPE)>
      NET_STRING_IP_SERVICE equ <(NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE)>
      NET_STRING_IP_SERVICE_NO_SCOPE equ <(NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE_NO_SCOPE)>
      NET_STRING_IP_NETWORK equ <(NET_STRING_IPV4_NETWORK or NET_STRING_IPV6_NETWORK)>
      NET_STRING_ANY_ADDRESS equ <(NET_STRING_NAMED_ADDRESS or NET_STRING_IP_ADDRESS)>
      NET_STRING_ANY_ADDRESS_NO_SCOPE equ <(NET_STRING_NAMED_ADDRESS or NET_STRING_IP_ADDRESS_NO_SCOPE)>
      NET_STRING_ANY_SERVICE equ <(NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE)>
      NET_STRING_ANY_SERVICE_NO_SCOPE equ <(NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE_NO_SCOPE)>
      NET_ADDRESS_FORMAT typedef SDWORD
      NET_ADDRESS_FORMAT_UNSPECIFIED equ 0
      NET_ADDRESS_DNS_NAME equ 1
      NET_ADDRESS_IPV4 equ 2
      NET_ADDRESS_IPV6 equ 3
      NET_ADDRESS_FORMAT_ typedef NET_ADDRESS_FORMAT

      if Defined(_WS2DEF_) and Defined(_WS2IPDEF_) and Defined(_WINDNS_INCLUDED_)
        NET_ADDRESS_INFO struct
          Format NET_ADDRESS_FORMAT ?
          union
            struct NamedAddress
              Address WCHAR DNS_MAX_NAME_BUFFER_LENGTH dup (?)
              Port WCHAR 6 dup (?)
            ends
            Ipv4Address SOCKADDR_IN <>
            Ipv6Address SOCKADDR_IN6 <>
            IpAddress SOCKADDR <>
          ends
        NET_ADDRESS_INFO ends
        NET_ADDRESS_INFO_ typedef NET_ADDRESS_INFO
        PNET_ADDRESS_INFO typedef ptr NET_ADDRESS_INFO
        ParseNetworkString proto WIN_STD_CALL_CONV :ptr WCHAR, :DWORD, :PNET_ADDRESS_INFO, :ptr USHORT, :ptr BYTE
      endif
    endif
    if (NTDDI_VERSION ge NTDDI_VISTA)
      include netioapi.inc
    endif
  endif
endif
