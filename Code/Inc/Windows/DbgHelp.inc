;Include file created by h2incX, Version B.01.01, 12/11/2018 22:57
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: '\ObjAsm\Projects\h2IncX\header\DbgHelp.h', last modified: 19/04/2018 09:43
;Creation parameters: 

ifndef _DBGHELP_
  _DBGHELP_ equ <>
  if _MSC_VER gt 1020
  endif
  include winapifamily.inc
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PKG_WER)
    ifdef _WIN64
      ifndef _IMAGEHLP64
        _IMAGEHLP64 equ <>
      endif
    endif
    include pshpack8.inc
    ifdef __cplusplus
      ;[...]
    endif
    ifdef _IMAGEHLP_SOURCE_
      IMAGEAPI equ <__stdcall>
      DBHLP_DEPRECIATED equ <>
    else
      IMAGEAPI equ <DECLSPEC_IMPORT __stdcall>
      if (_MSC_VER ge 1300) and  not Defined(MIDL_PASS)
        DBHLP_DEPRECIATED equ <__declspec(deprecated)>
      else
        DBHLP_DEPRECIATED equ <>
      endif
    endif
    DBHLPAPI equ <IMAGEAPI>
    IMAGE_SEPARATION equ (64 * 1024)
    LOADED_IMAGE struct 4
      ModuleName PSTR ?
      hFile HANDLE ?
      MappedAddress PUCHAR ?
      ifdef _IMAGEHLP64
        FileHeader PIMAGE_NT_HEADERS64 ?
      else
        FileHeader PIMAGE_NT_HEADERS32 ?
      endif
      LastRvaSection PIMAGE_SECTION_HEADER ?
      NumberOfSections ULONG ?
      Sections PIMAGE_SECTION_HEADER ?
      Characteristics ULONG ?
      fSystemImage BOOLEAN ?
      fDOSImage BOOLEAN ?
      fReadOnly BOOLEAN ?
      Version UCHAR ?
      Links LIST_ENTRY <>
      SizeOfImage ULONG ?
    LOADED_IMAGE ends
    _LOADED_IMAGE typedef LOADED_IMAGE
    PLOADED_IMAGE typedef ptr LOADED_IMAGE
    
    MAX_SYM_NAME equ 2000
    ERROR_IMAGE_NOT_STRIPPED equ 8800h
    ERROR_NO_DBG_POINTER equ 8801h
    ERROR_NO_PDB_POINTER equ 8802h
    TYPE_PFIND_DEBUG_FILE_CALLBACK typedef proto WIN_STD_CALL_CONV :HANDLE, :PCSTR, :PVOID
    PFIND_DEBUG_FILE_CALLBACK typedef ptr TYPE_PFIND_DEBUG_FILE_CALLBACK
    @DefProto DllImport, SymFindDebugInfoFile, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PSTR, :PFIND_DEBUG_FILE_CALLBACK, :PVOID>, 20
    TYPE_PFIND_DEBUG_FILE_CALLBACKW typedef proto WIN_STD_CALL_CONV :HANDLE, :PCWSTR, :PVOID
    PFIND_DEBUG_FILE_CALLBACKW typedef ptr TYPE_PFIND_DEBUG_FILE_CALLBACKW
    @DefProto DllImport, SymFindDebugInfoFileW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PWSTR, :PFIND_DEBUG_FILE_CALLBACKW, :PVOID>, 20
    @DefProto DllImport, FindDebugInfoFile, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PSTR>, 12
    @DefProto DllImport, FindDebugInfoFileEx, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PSTR, :PFIND_DEBUG_FILE_CALLBACK, :PVOID>, 20
    @DefProto DllImport, FindDebugInfoFileExW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :PWSTR, :PFIND_DEBUG_FILE_CALLBACKW, :PVOID>, 20
    TYPE_PFINDFILEINPATHCALLBACK typedef proto WIN_STD_CALL_CONV :PCSTR, :PVOID
    PFINDFILEINPATHCALLBACK typedef ptr TYPE_PFINDFILEINPATHCALLBACK
    @DefProto DllImport, SymFindFileInPath, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :DWORD, :PSTR, :PFINDFILEINPATHCALLBACK, :PVOID>, 40
    TYPE_PFINDFILEINPATHCALLBACKW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PVOID
    PFINDFILEINPATHCALLBACKW typedef ptr TYPE_PFINDFILEINPATHCALLBACKW
    @DefProto DllImport, SymFindFileInPathW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :DWORD, :PWSTR, :PFINDFILEINPATHCALLBACKW, :PVOID>, 40
    TYPE_PFIND_EXE_FILE_CALLBACK typedef proto WIN_STD_CALL_CONV :HANDLE, :PCSTR, :PVOID
    PFIND_EXE_FILE_CALLBACK typedef ptr TYPE_PFIND_EXE_FILE_CALLBACK
    @DefProto DllImport, SymFindExecutableImage, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PSTR, :PFIND_EXE_FILE_CALLBACK, :PVOID>, 20
    TYPE_PFIND_EXE_FILE_CALLBACKW typedef proto WIN_STD_CALL_CONV :HANDLE, :PCWSTR, :PVOID
    PFIND_EXE_FILE_CALLBACKW typedef ptr TYPE_PFIND_EXE_FILE_CALLBACKW
    @DefProto DllImport, SymFindExecutableImageW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PWSTR, :PFIND_EXE_FILE_CALLBACKW, :PVOID>, 20
    @DefProto DllImport, FindExecutableImage, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PSTR>, 12
    @DefProto DllImport, FindExecutableImageEx, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PSTR, :PFIND_EXE_FILE_CALLBACK, :PVOID>, 20
    @DefProto DllImport, FindExecutableImageExW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :PWSTR, :PFIND_EXE_FILE_CALLBACKW, :PVOID>, 20
    @DefProto DllImport, ImageNtHeader, WIN_STD_CALL_CONV,, <:PVOID>, 4
    @DefProto DllImport, ImageDirectoryEntryToDataEx, WIN_STD_CALL_CONV,, <:PVOID, :BOOLEAN, :USHORT, :PULONG, :ptr PIMAGE_SECTION_HEADER>, 20
    @DefProto DllImport, ImageDirectoryEntryToData, WIN_STD_CALL_CONV,, <:PVOID, :BOOLEAN, :USHORT, :PULONG>, 16
    @DefProto DllImport, ImageRvaToSection, WIN_STD_CALL_CONV,, <:PIMAGE_NT_HEADERS, :PVOID, :ULONG>, 12
    @DefProto DllImport, ImageRvaToVa, WIN_STD_CALL_CONV,, <:PIMAGE_NT_HEADERS, :PVOID, :ULONG, :ptr PIMAGE_SECTION_HEADER>, 16
    ifndef _WIN64
      IMAGE_DEBUG_INFORMATION struct
        List LIST_ENTRY <>
        ReservedSize DWORD ?
        ReservedMappedBase PVOID ?
        ReservedMachine USHORT ?
        ReservedCharacteristics USHORT ?
        ReservedCheckSum DWORD ?
        ImageBase DWORD ?
        SizeOfImage DWORD ?
        ReservedNumberOfSections DWORD ?
        ReservedSections PIMAGE_SECTION_HEADER ?
        ReservedExportedNamesSize DWORD ?
        ReservedExportedNames PSTR ?
        ReservedNumberOfFunctionTableEntries DWORD ?
        ReservedFunctionTableEntries PIMAGE_FUNCTION_ENTRY ?
        ReservedLowestFunctionStartingAddress DWORD ?
        ReservedHighestFunctionEndingAddress DWORD ?
        ReservedNumberOfFpoTableEntries DWORD ?
        ReservedFpoTableEntries PFPO_DATA ?
        SizeOfCoffSymbols DWORD ?
        CoffSymbols PIMAGE_COFF_SYMBOLS_HEADER ?
        ReservedSizeOfCodeViewSymbols DWORD ?
        ReservedCodeViewSymbols PVOID ?
        ImageFilePath PSTR ?
        ImageFileName PSTR ?
        ReservedDebugFilePath PSTR ?
        ReservedTimeDateStamp DWORD ?
        ReservedRomImage BOOL ?
        ReservedDebugDirectory PIMAGE_DEBUG_DIRECTORY ?
        ReservedNumberOfDebugDirectories DWORD ?
        ReservedOriginalFunctionTableBaseAddress DWORD ?
        Reserved DWORD 2 dup (?)
      IMAGE_DEBUG_INFORMATION ends
      _IMAGE_DEBUG_INFORMATION typedef IMAGE_DEBUG_INFORMATION
      PIMAGE_DEBUG_INFORMATION typedef ptr IMAGE_DEBUG_INFORMATION
      
      @DefProto DllImport, MapDebugInformation, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :ULONG>, 16
      @DefProto DllImport, UnmapDebugInformation, WIN_STD_CALL_CONV,, <:PIMAGE_DEBUG_INFORMATION>, 4
    endif
    @DefProto DllImport, SearchTreeForFile, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :PSTR>, 12
    @DefProto DllImport, SearchTreeForFileW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :PWSTR>, 12
    TYPE_PENUMDIRTREE_CALLBACK typedef proto WIN_STD_CALL_CONV :PCSTR, :PVOID
    PENUMDIRTREE_CALLBACK typedef ptr TYPE_PENUMDIRTREE_CALLBACK
    @DefProto DllImport, EnumDirTree, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PSTR, :PENUMDIRTREE_CALLBACK, :PVOID>, 24
    TYPE_PENUMDIRTREE_CALLBACKW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PVOID
    PENUMDIRTREE_CALLBACKW typedef ptr TYPE_PENUMDIRTREE_CALLBACKW
    @DefProto DllImport, EnumDirTreeW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PWSTR, :PENUMDIRTREE_CALLBACKW, :PVOID>, 24
    @DefProto DllImport, MakeSureDirectoryPathExists, WIN_STD_CALL_CONV,, <:PCSTR>, 4
    UNDNAME_COMPLETE equ 0000h
    UNDNAME_NO_LEADING_UNDERSCORES equ 0001h
    UNDNAME_NO_MS_KEYWORDS equ 0002h
    UNDNAME_NO_FUNCTION_RETURNS equ 0004h
    UNDNAME_NO_ALLOCATION_MODEL equ 0008h
    UNDNAME_NO_ALLOCATION_LANGUAGE equ 0010h
    UNDNAME_NO_MS_THISTYPE equ 0020h
    UNDNAME_NO_CV_THISTYPE equ 0040h
    UNDNAME_NO_THISTYPE equ 0060h
    UNDNAME_NO_ACCESS_SPECIFIERS equ 0080h
    UNDNAME_NO_THROW_SIGNATURES equ 0100h
    UNDNAME_NO_MEMBER_TYPE equ 0200h
    UNDNAME_NO_RETURN_UDT_MODEL equ 0400h
    UNDNAME_32_BIT_DECODE equ 0800h
    UNDNAME_NAME_ONLY equ 1000h
    UNDNAME_NO_ARGUMENTS equ 2000h
    UNDNAME_NO_SPECIAL_SYMS equ 4000h
    @DefProto DllImport, UnDecorateSymbolName, WIN_STD_CALL_CONV,, <:PCSTR, :PSTR, :DWORD, :DWORD>, 16
    @DefProto DllImport, UnDecorateSymbolNameW, WIN_STD_CALL_CONV,, <:PCWSTR, :PWSTR, :DWORD, :DWORD>, 16
    DBHHEADER_DEBUGDIRS equ 1h
    DBHHEADER_CVMISC equ 2h
    DBHHEADER_PDBGUID equ 3h
    MODLOAD_DATA struct
      ssize DWORD ?
      ssig DWORD ?
      data PVOID ?
      size_ DWORD ?
      flags DWORD ?
    MODLOAD_DATA ends
    _MODLOAD_DATA typedef MODLOAD_DATA
    PMODLOAD_DATA typedef ptr MODLOAD_DATA
    
    MODLOAD_CVMISC struct
      oCV DWORD ?
      cCV size_t ?
      oMisc DWORD ?
      cMisc size_t ?
      dtImage DWORD ?
      cImage DWORD ?
    MODLOAD_CVMISC ends
    _MODLOAD_CVMISC typedef MODLOAD_CVMISC
    PMODLOAD_CVMISC typedef ptr MODLOAD_CVMISC
    
    MODLOAD_PDBGUID_PDBAGE struct
      PdbGuid GUID <>
      PdbAge DWORD ?
    MODLOAD_PDBGUID_PDBAGE ends
    _MODLOAD_PDBGUID_PDBAGE typedef MODLOAD_PDBGUID_PDBAGE
    PMODLOAD_PDBGUID_PDBAGE typedef ptr MODLOAD_PDBGUID_PDBAGE
    
    ADDRESS_MODE typedef SDWORD
    AddrMode1616 equ 0
    AddrMode1632 equ 1
    AddrModeReal equ 2
    AddrModeFlat equ 3
    
    ADDRESS64 struct
      Offset_ DWORD64 ?
      Segment_ WORD ?
      Mode ADDRESS_MODE ?
    ADDRESS64 ends
    _tagADDRESS64 typedef ADDRESS64
    LPADDRESS64 typedef ptr ADDRESS64
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      ADDRESS equ <ADDRESS64>
      LPADDRESS equ <LPADDRESS64>
    else
      ADDRESS struct 4
        Offset_ DWORD ?
        Segment_ WORD ?
        Mode ADDRESS_MODE ?
      ADDRESS ends
      _tagADDRESS typedef ADDRESS
      LPADDRESS typedef ptr ADDRESS
      
      Address32To64 proto WIN_STD_CALL_CONV :LPADDRESS, :LPADDRESS64
      Address64To32 proto WIN_STD_CALL_CONV :LPADDRESS64, :LPADDRESS
    endif
    KDHELP64 struct
      Thread DWORD64 ?
      ThCallbackStack DWORD ?
      ThCallbackBStore DWORD ?
      NextCallback DWORD ?
      FramePointer DWORD ?
      KiCallUserMode DWORD64 ?
      KeUserCallbackDispatcher DWORD64 ?
      SystemRangeStart DWORD64 ?
      KiUserExceptionDispatcher DWORD64 ?
      StackBase DWORD64 ?
      StackLimit DWORD64 ?
      BuildVersion DWORD ?
      Reserved0 DWORD ?
      Reserved1 DWORD64 4 dup (?)
    KDHELP64 ends
    _KDHELP64 typedef KDHELP64
    PKDHELP64 typedef ptr KDHELP64
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      KDHELP equ <KDHELP64>
      PKDHELP equ <PKDHELP64>
    else
      KDHELP struct
        Thread DWORD ?
        ThCallbackStack DWORD ?
        NextCallback DWORD ?
        FramePointer DWORD ?
        KiCallUserMode DWORD ?
        KeUserCallbackDispatcher DWORD ?
        SystemRangeStart DWORD ?
        ThCallbackBStore DWORD ?
        KiUserExceptionDispatcher DWORD ?
        StackBase DWORD ?
        StackLimit DWORD ?
        Reserved DWORD 5 dup (?)
      KDHELP ends
      _KDHELP typedef KDHELP
      PKDHELP typedef ptr KDHELP
      
      KdHelp32To64 proto WIN_STD_CALL_CONV :PKDHELP, :PKDHELP64
    endif
    STACKFRAME64 struct
      AddrPC ADDRESS64 <>
      AddrReturn ADDRESS64 <>
      AddrFrame ADDRESS64 <>
      AddrStack ADDRESS64 <>
      AddrBStore ADDRESS64 <>
      FuncTableEntry PVOID ?
      Params DWORD64 4 dup (?)
      Far_ BOOL ?
      Virtual BOOL ?
      Reserved DWORD64 3 dup (?)
      KdHelp KDHELP64 <>
    STACKFRAME64 ends
    _tagSTACKFRAME64 typedef STACKFRAME64
    LPSTACKFRAME64 typedef ptr STACKFRAME64
    
    INLINE_FRAME_CONTEXT_INIT equ 0
    INLINE_FRAME_CONTEXT_IGNORE equ 0FFFFFFFFh
    STACKFRAME_EX struct
      AddrPC ADDRESS64 <>
      AddrReturn ADDRESS64 <>
      AddrFrame ADDRESS64 <>
      AddrStack ADDRESS64 <>
      AddrBStore ADDRESS64 <>
      FuncTableEntry PVOID ?
      Params DWORD64 4 dup (?)
      Far_ BOOL ?
      Virtual BOOL ?
      Reserved DWORD64 3 dup (?)
      KdHelp KDHELP64 <>
      StackFrameSize DWORD ?
      InlineFrameContext DWORD ?
    STACKFRAME_EX ends
    _tagSTACKFRAME_EX typedef STACKFRAME_EX
    LPSTACKFRAME_EX typedef ptr STACKFRAME_EX
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      STACKFRAME equ <STACKFRAME64>
      LPSTACKFRAME equ <LPSTACKFRAME64>
    else
      STACKFRAME struct
        AddrPC ADDRESS <>
        AddrReturn ADDRESS <>
        AddrFrame ADDRESS <>
        AddrStack ADDRESS <>
        FuncTableEntry PVOID ?
        Params DWORD 4 dup (?)
        Far_ BOOL ?
        Virtual BOOL ?
        Reserved DWORD 3 dup (?)
        KdHelp KDHELP <>
        AddrBStore ADDRESS <>
      STACKFRAME ends
      _tagSTACKFRAME typedef STACKFRAME
      LPSTACKFRAME typedef ptr STACKFRAME
      
    endif
    TYPE_PREAD_PROCESS_MEMORY_ROUTINE64 typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD64, :PVOID, :DWORD, :LPDWORD
    PREAD_PROCESS_MEMORY_ROUTINE64 typedef ptr TYPE_PREAD_PROCESS_MEMORY_ROUTINE64
    TYPE_PFUNCTION_TABLE_ACCESS_ROUTINE64 typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD64
    PFUNCTION_TABLE_ACCESS_ROUTINE64 typedef ptr TYPE_PFUNCTION_TABLE_ACCESS_ROUTINE64
    TYPE_PGET_MODULE_BASE_ROUTINE64 typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD64
    PGET_MODULE_BASE_ROUTINE64 typedef ptr TYPE_PGET_MODULE_BASE_ROUTINE64
    TYPE_PTRANSLATE_ADDRESS_ROUTINE64 typedef proto WIN_STD_CALL_CONV :HANDLE, :HANDLE, :LPADDRESS64
    PTRANSLATE_ADDRESS_ROUTINE64 typedef ptr TYPE_PTRANSLATE_ADDRESS_ROUTINE64
    @DefProto DllImport, StackWalk64, WIN_STD_CALL_CONV,, <:DWORD, :HANDLE, :HANDLE, :LPSTACKFRAME64, :PVOID, :PREAD_PROCESS_MEMORY_ROUTINE64, :PFUNCTION_TABLE_ACCESS_ROUTINE64, :PGET_MODULE_BASE_ROUTINE64, :PTRANSLATE_ADDRESS_ROUTINE64>, 36
    SYM_STKWALK_DEFAULT equ 00000000h
    SYM_STKWALK_FORCE_FRAMEPTR equ 00000001h
    @DefProto DllImport, StackWalkEx, WIN_STD_CALL_CONV,, <:DWORD, :HANDLE, :HANDLE, :LPSTACKFRAME_EX, :PVOID, :PREAD_PROCESS_MEMORY_ROUTINE64, :PFUNCTION_TABLE_ACCESS_ROUTINE64, :PGET_MODULE_BASE_ROUTINE64, :PTRANSLATE_ADDRESS_ROUTINE64, :DWORD>, 40
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      PREAD_PROCESS_MEMORY_ROUTINE equ <PREAD_PROCESS_MEMORY_ROUTINE64>
      PFUNCTION_TABLE_ACCESS_ROUTINE equ <PFUNCTION_TABLE_ACCESS_ROUTINE64>
      PGET_MODULE_BASE_ROUTINE equ <PGET_MODULE_BASE_ROUTINE64>
      PTRANSLATE_ADDRESS_ROUTINE equ <PTRANSLATE_ADDRESS_ROUTINE64>
      StackWalk equ <StackWalk64>
    else
      TYPE_PREAD_PROCESS_MEMORY_ROUTINE typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD, :PVOID, :DWORD, :PDWORD
      PREAD_PROCESS_MEMORY_ROUTINE typedef ptr TYPE_PREAD_PROCESS_MEMORY_ROUTINE
      TYPE_PFUNCTION_TABLE_ACCESS_ROUTINE typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD
      PFUNCTION_TABLE_ACCESS_ROUTINE typedef ptr TYPE_PFUNCTION_TABLE_ACCESS_ROUTINE
      TYPE_PGET_MODULE_BASE_ROUTINE typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD
      PGET_MODULE_BASE_ROUTINE typedef ptr TYPE_PGET_MODULE_BASE_ROUTINE
      TYPE_PTRANSLATE_ADDRESS_ROUTINE typedef proto WIN_STD_CALL_CONV :HANDLE, :HANDLE, :LPADDRESS
      PTRANSLATE_ADDRESS_ROUTINE typedef ptr TYPE_PTRANSLATE_ADDRESS_ROUTINE
      @DefProto DllImport, StackWalk, WIN_STD_CALL_CONV,, <:DWORD, :HANDLE, :HANDLE, :LPSTACKFRAME, :PVOID, :PREAD_PROCESS_MEMORY_ROUTINE, :PFUNCTION_TABLE_ACCESS_ROUTINE, :PGET_MODULE_BASE_ROUTINE, :PTRANSLATE_ADDRESS_ROUTINE>, 36
    endif
    API_VERSION_NUMBER equ 12
    API_VERSION struct
      MajorVersion USHORT ?
      MinorVersion USHORT ?
      Revision USHORT ?
      Reserved USHORT ?
    API_VERSION ends
    LPAPI_VERSION typedef ptr API_VERSION
    
    @DefProto DllImport, ImagehlpApiVersion, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, ImagehlpApiVersionEx, WIN_STD_CALL_CONV,, <:LPAPI_VERSION>, 4
    @DefProto DllImport, GetTimestampForLoadedLibrary, WIN_STD_CALL_CONV,, <:HMODULE>, 4
    TYPE_PSYM_ENUMMODULES_CALLBACK64 typedef proto WIN_STD_CALL_CONV :PCSTR, :DWORD64, :PVOID
    PSYM_ENUMMODULES_CALLBACK64 typedef ptr TYPE_PSYM_ENUMMODULES_CALLBACK64
    TYPE_PSYM_ENUMMODULES_CALLBACKW64 typedef proto WIN_STD_CALL_CONV :PCWSTR, :DWORD64, :PVOID
    PSYM_ENUMMODULES_CALLBACKW64 typedef ptr TYPE_PSYM_ENUMMODULES_CALLBACKW64
    TYPE_PENUMLOADED_MODULES_CALLBACK64 typedef proto WIN_STD_CALL_CONV :PCSTR, :DWORD64, :ULONG, :PVOID
    PENUMLOADED_MODULES_CALLBACK64 typedef ptr TYPE_PENUMLOADED_MODULES_CALLBACK64
    TYPE_PENUMLOADED_MODULES_CALLBACKW64 typedef proto WIN_STD_CALL_CONV :PCWSTR, :DWORD64, :ULONG, :PVOID
    PENUMLOADED_MODULES_CALLBACKW64 typedef ptr TYPE_PENUMLOADED_MODULES_CALLBACKW64
    TYPE_PSYM_ENUMSYMBOLS_CALLBACK64 typedef proto WIN_STD_CALL_CONV :PCSTR, :DWORD64, :ULONG, :PVOID
    PSYM_ENUMSYMBOLS_CALLBACK64 typedef ptr TYPE_PSYM_ENUMSYMBOLS_CALLBACK64
    TYPE_PSYM_ENUMSYMBOLS_CALLBACK64W typedef proto WIN_STD_CALL_CONV :PCWSTR, :DWORD64, :ULONG, :PVOID
    PSYM_ENUMSYMBOLS_CALLBACK64W typedef ptr TYPE_PSYM_ENUMSYMBOLS_CALLBACK64W
    TYPE_PSYMBOL_REGISTERED_CALLBACK64 typedef proto WIN_STD_CALL_CONV :HANDLE, :ULONG, :ULONG64, :ULONG64
    PSYMBOL_REGISTERED_CALLBACK64 typedef ptr TYPE_PSYMBOL_REGISTERED_CALLBACK64
    TYPE_PSYMBOL_FUNCENTRY_CALLBACK typedef proto WIN_STD_CALL_CONV :HANDLE, :DWORD, :PVOID
    PSYMBOL_FUNCENTRY_CALLBACK typedef ptr TYPE_PSYMBOL_FUNCENTRY_CALLBACK
    TYPE_PSYMBOL_FUNCENTRY_CALLBACK64 typedef proto WIN_STD_CALL_CONV :HANDLE, :ULONG64, :ULONG64
    PSYMBOL_FUNCENTRY_CALLBACK64 typedef ptr TYPE_PSYMBOL_FUNCENTRY_CALLBACK64
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      PSYM_ENUMMODULES_CALLBACK equ <PSYM_ENUMMODULES_CALLBACK64>
      PSYM_ENUMSYMBOLS_CALLBACK equ <PSYM_ENUMSYMBOLS_CALLBACK64>
      PSYM_ENUMSYMBOLS_CALLBACKW equ <PSYM_ENUMSYMBOLS_CALLBACK64W>
      PENUMLOADED_MODULES_CALLBACK equ <PENUMLOADED_MODULES_CALLBACK64>
      PSYMBOL_REGISTERED_CALLBACK equ <PSYMBOL_REGISTERED_CALLBACK64>
      PSYMBOL_FUNCENTRY_CALLBACK equ <PSYMBOL_FUNCENTRY_CALLBACK64>
    else
      TYPE_PSYM_ENUMMODULES_CALLBACK typedef proto WIN_STD_CALL_CONV :PCSTR, :ULONG, :PVOID
      PSYM_ENUMMODULES_CALLBACK typedef ptr TYPE_PSYM_ENUMMODULES_CALLBACK
      TYPE_PSYM_ENUMSYMBOLS_CALLBACK typedef proto WIN_STD_CALL_CONV :PCSTR, :ULONG, :ULONG, :PVOID
      PSYM_ENUMSYMBOLS_CALLBACK typedef ptr TYPE_PSYM_ENUMSYMBOLS_CALLBACK
      TYPE_PSYM_ENUMSYMBOLS_CALLBACKW typedef proto WIN_STD_CALL_CONV :PCWSTR, :ULONG, :ULONG, :PVOID
      PSYM_ENUMSYMBOLS_CALLBACKW typedef ptr TYPE_PSYM_ENUMSYMBOLS_CALLBACKW
      TYPE_PENUMLOADED_MODULES_CALLBACK typedef proto WIN_STD_CALL_CONV :PCSTR, :ULONG, :ULONG, :PVOID
      PENUMLOADED_MODULES_CALLBACK typedef ptr TYPE_PENUMLOADED_MODULES_CALLBACK
      TYPE_PSYMBOL_REGISTERED_CALLBACK typedef proto WIN_STD_CALL_CONV :HANDLE, :ULONG, :PVOID, :PVOID
      PSYMBOL_REGISTERED_CALLBACK typedef ptr TYPE_PSYMBOL_REGISTERED_CALLBACK
    endif
    ifdef _NO_CVCONST_H
      SymTagEnum typedef SDWORD
      SymTagNull equ 0
      SymTagExe equ 1
      SymTagCompiland equ 2
      SymTagCompilandDetails equ 3
      SymTagCompilandEnv equ 4
      SymTagFunction equ 5
      SymTagBlock equ 6
      SymTagData equ 7
      SymTagAnnotation equ 8
      SymTagLabel equ 9
      SymTagPublicSymbol equ 10
      SymTagUDT equ 11
      SymTagEnum equ 12
      SymTagFunctionType equ 13
      SymTagPointerType equ 14
      SymTagArrayType equ 15
      SymTagBaseType equ 16
      SymTagTypedef equ 17
      SymTagBaseClass equ 18
      SymTagFriend equ 19
      SymTagFunctionArgType equ 20
      SymTagFuncDebugStart equ 21
      SymTagFuncDebugEnd equ 22
      SymTagUsingNamespace equ 23
      SymTagVTableShape equ 24
      SymTagVTable equ 25
      SymTagCustom equ 26
      SymTagThunk equ 27
      SymTagCustomType equ 28
      SymTagManagedType equ 29
      SymTagDimension equ 30
      SymTagCallSite equ 31
      SymTagInlineSite equ 32
      SymTagBaseInterface equ 33
      SymTagVectorType equ 34
      SymTagMatrixType equ 35
      SymTagHLSLType equ 36
      SymTagCaller equ 37
      SymTagCallee equ 38
      SymTagExport equ 39
      SymTagHeapAllocationSite equ 40
      SymTagCoffGroup equ 41
      SymTagMax equ 42
      
    endif
    SYMFLAG_VALUEPRESENT equ 00000001h
    SYMFLAG_REGISTER equ 00000008h
    SYMFLAG_REGREL equ 00000010h
    SYMFLAG_FRAMEREL equ 00000020h
    SYMFLAG_PARAMETER equ 00000040h
    SYMFLAG_LOCAL equ 00000080h
    SYMFLAG_CONSTANT equ 00000100h
    SYMFLAG_EXPORT equ 00000200h
    SYMFLAG_FORWARDER equ 00000400h
    SYMFLAG_FUNCTION equ 00000800h
    SYMFLAG_VIRTUAL equ 00001000h
    SYMFLAG_THUNK equ 00002000h
    SYMFLAG_TLSREL equ 00004000h
    SYMFLAG_SLOT equ 00008000h
    SYMFLAG_ILREL equ 00010000h
    SYMFLAG_METADATA equ 00020000h
    SYMFLAG_CLR_TOKEN equ 00040000h
    SYMFLAG_NULL equ 00080000h
    SYMFLAG_FUNC_NO_RETURN equ 00100000h
    SYMFLAG_SYNTHETIC_ZEROBASE equ 00200000h
    SYMFLAG_PUBLIC_CODE equ 00400000h
    SYMFLAG_RESET equ 80000000h
    SYM_TYPE typedef SDWORD
    SymNone equ 0
    SymCoff equ 1
    SymCv equ 2
    SymPdb equ 3
    SymExport equ 4
    SymDeferred equ 5
    SymSym equ 6
    SymDia equ 7
    SymVirtual equ 8
    NumSymTypes equ 9
    
    IMAGEHLP_SYMBOL64 struct
      SizeOfStruct DWORD ?
      Address DWORD64 ?
      Size_ DWORD ?
      Flags DWORD ?
      MaxNameLength DWORD ?
      Name_ CHAR 1 dup (?)
    IMAGEHLP_SYMBOL64 ends
    _IMAGEHLP_SYMBOL64 typedef IMAGEHLP_SYMBOL64
    PIMAGEHLP_SYMBOL64 typedef ptr IMAGEHLP_SYMBOL64
    
    IMAGEHLP_SYMBOL64_PACKAGE struct
      sym IMAGEHLP_SYMBOL64 <>
      name_ CHAR MAX_SYM_NAME + 1 dup (?)
    IMAGEHLP_SYMBOL64_PACKAGE ends
    _IMAGEHLP_SYMBOL64_PACKAGE typedef IMAGEHLP_SYMBOL64_PACKAGE
    PIMAGEHLP_SYMBOL64_PACKAGE typedef ptr IMAGEHLP_SYMBOL64_PACKAGE
    
    IMAGEHLP_SYMBOLW64 struct
      SizeOfStruct DWORD ?
      Address DWORD64 ?
      Size_ DWORD ?
      Flags DWORD ?
      MaxNameLength DWORD ?
      Name_ WCHAR 1 dup (?)
    IMAGEHLP_SYMBOLW64 ends
    _IMAGEHLP_SYMBOLW64 typedef IMAGEHLP_SYMBOLW64
    PIMAGEHLP_SYMBOLW64 typedef ptr IMAGEHLP_SYMBOLW64
    
    IMAGEHLP_SYMBOLW64_PACKAGE struct
      sym IMAGEHLP_SYMBOLW64 <>
      name_ WCHAR MAX_SYM_NAME + 1 dup (?)
    IMAGEHLP_SYMBOLW64_PACKAGE ends
    _IMAGEHLP_SYMBOLW64_PACKAGE typedef IMAGEHLP_SYMBOLW64_PACKAGE
    PIMAGEHLP_SYMBOLW64_PACKAGE typedef ptr IMAGEHLP_SYMBOLW64_PACKAGE
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      IMAGEHLP_SYMBOL equ <IMAGEHLP_SYMBOL64>
      PIMAGEHLP_SYMBOL equ <PIMAGEHLP_SYMBOL64>
      IMAGEHLP_SYMBOL_PACKAGE equ <IMAGEHLP_SYMBOL64_PACKAGE>
      PIMAGEHLP_SYMBOL_PACKAGE equ <PIMAGEHLP_SYMBOL64_PACKAGE>
      IMAGEHLP_SYMBOLW equ <IMAGEHLP_SYMBOLW64>
      PIMAGEHLP_SYMBOLW equ <PIMAGEHLP_SYMBOLW64>
      IMAGEHLP_SYMBOLW_PACKAGE equ <IMAGEHLP_SYMBOLW64_PACKAGE>
      PIMAGEHLP_SYMBOLW_PACKAGE equ <PIMAGEHLP_SYMBOLW64_PACKAGE>
    else
      IMAGEHLP_SYMBOL struct
        SizeOfStruct DWORD ?
        Address DWORD ?
        Size_ DWORD ?
        Flags DWORD ?
        MaxNameLength DWORD ?
        Name_ CHAR 1 dup (?)
      IMAGEHLP_SYMBOL ends
      _IMAGEHLP_SYMBOL typedef IMAGEHLP_SYMBOL
      PIMAGEHLP_SYMBOL typedef ptr IMAGEHLP_SYMBOL
      
      IMAGEHLP_SYMBOL_PACKAGE struct
        sym IMAGEHLP_SYMBOL <>
        name_ CHAR MAX_SYM_NAME + 1 dup (?)
      IMAGEHLP_SYMBOL_PACKAGE ends
      _IMAGEHLP_SYMBOL_PACKAGE typedef IMAGEHLP_SYMBOL_PACKAGE
      PIMAGEHLP_SYMBOL_PACKAGE typedef ptr IMAGEHLP_SYMBOL_PACKAGE
      
      IMAGEHLP_SYMBOLW struct
        SizeOfStruct DWORD ?
        Address DWORD ?
        Size_ DWORD ?
        Flags DWORD ?
        MaxNameLength DWORD ?
        Name_ WCHAR 1 dup (?)
      IMAGEHLP_SYMBOLW ends
      _IMAGEHLP_SYMBOLW typedef IMAGEHLP_SYMBOLW
      PIMAGEHLP_SYMBOLW typedef ptr IMAGEHLP_SYMBOLW
      
      IMAGEHLP_SYMBOLW_PACKAGE struct
        sym IMAGEHLP_SYMBOLW <>
        name_ WCHAR MAX_SYM_NAME + 1 dup (?)
      IMAGEHLP_SYMBOLW_PACKAGE ends
      _IMAGEHLP_SYMBOLW_PACKAGE typedef IMAGEHLP_SYMBOLW_PACKAGE
      PIMAGEHLP_SYMBOLW_PACKAGE typedef ptr IMAGEHLP_SYMBOLW_PACKAGE
      
    endif
    IMAGEHLP_MODULE64 struct
      SizeOfStruct DWORD ?
      BaseOfImage DWORD64 ?
      ImageSize DWORD ?
      TimeDateStamp DWORD ?
      CheckSum DWORD ?
      NumSyms DWORD ?
      SymType SYM_TYPE ?
      ModuleName CHAR 32 dup (?)
      ImageName CHAR 256 dup (?)
      LoadedImageName CHAR 256 dup (?)
      LoadedPdbName CHAR 256 dup (?)
      CVSig DWORD ?
      CVData CHAR MAX_PATH * 3 dup (?)
      PdbSig DWORD ?
      PdbSig70 GUID <>
      PdbAge DWORD ?
      PdbUnmatched BOOL ?
      DbgUnmatched BOOL ?
      LineNumbers BOOL ?
      GlobalSymbols BOOL ?
      TypeInfo BOOL ?
      SourceIndexed BOOL ?
      Publics BOOL ?
      MachineType DWORD ?
      Reserved DWORD ?
    IMAGEHLP_MODULE64 ends
    _IMAGEHLP_MODULE64 typedef IMAGEHLP_MODULE64
    PIMAGEHLP_MODULE64 typedef ptr IMAGEHLP_MODULE64
    
    IMAGEHLP_MODULEW64 struct
      SizeOfStruct DWORD ?
      BaseOfImage DWORD64 ?
      ImageSize DWORD ?
      TimeDateStamp DWORD ?
      CheckSum DWORD ?
      NumSyms DWORD ?
      SymType SYM_TYPE ?
      ModuleName WCHAR 32 dup (?)
      ImageName WCHAR 256 dup (?)
      LoadedImageName WCHAR 256 dup (?)
      LoadedPdbName WCHAR 256 dup (?)
      CVSig DWORD ?
      CVData WCHAR MAX_PATH * 3 dup (?)
      PdbSig DWORD ?
      PdbSig70 GUID <>
      PdbAge DWORD ?
      PdbUnmatched BOOL ?
      DbgUnmatched BOOL ?
      LineNumbers BOOL ?
      GlobalSymbols BOOL ?
      TypeInfo BOOL ?
      SourceIndexed BOOL ?
      Publics BOOL ?
      MachineType DWORD ?
      Reserved DWORD ?
    IMAGEHLP_MODULEW64 ends
    _IMAGEHLP_MODULEW64 typedef IMAGEHLP_MODULEW64
    PIMAGEHLP_MODULEW64 typedef ptr IMAGEHLP_MODULEW64
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      IMAGEHLP_MODULE equ <IMAGEHLP_MODULE64>
      PIMAGEHLP_MODULE equ <PIMAGEHLP_MODULE64>
      IMAGEHLP_MODULEW equ <IMAGEHLP_MODULEW64>
      PIMAGEHLP_MODULEW equ <PIMAGEHLP_MODULEW64>
    else
      IMAGEHLP_MODULE struct
        SizeOfStruct DWORD ?
        BaseOfImage DWORD ?
        ImageSize DWORD ?
        TimeDateStamp DWORD ?
        CheckSum DWORD ?
        NumSyms DWORD ?
        SymType SYM_TYPE ?
        ModuleName CHAR 32 dup (?)
        ImageName CHAR 256 dup (?)
        LoadedImageName CHAR 256 dup (?)
      IMAGEHLP_MODULE ends
      _IMAGEHLP_MODULE typedef IMAGEHLP_MODULE
      PIMAGEHLP_MODULE typedef ptr IMAGEHLP_MODULE
      
      IMAGEHLP_MODULEW struct
        SizeOfStruct DWORD ?
        BaseOfImage DWORD ?
        ImageSize DWORD ?
        TimeDateStamp DWORD ?
        CheckSum DWORD ?
        NumSyms DWORD ?
        SymType SYM_TYPE ?
        ModuleName WCHAR 32 dup (?)
        ImageName WCHAR 256 dup (?)
        LoadedImageName WCHAR 256 dup (?)
      IMAGEHLP_MODULEW ends
      _IMAGEHLP_MODULEW typedef IMAGEHLP_MODULEW
      PIMAGEHLP_MODULEW typedef ptr IMAGEHLP_MODULEW
      
    endif
    IMAGEHLP_LINE64 struct
      SizeOfStruct DWORD ?
      Key PVOID ?
      LineNumber DWORD ?
      FileName PCHAR ?
      Address DWORD64 ?
    IMAGEHLP_LINE64 ends
    _IMAGEHLP_LINE64 typedef IMAGEHLP_LINE64
    PIMAGEHLP_LINE64 typedef ptr IMAGEHLP_LINE64
    
    IMAGEHLP_LINEW64 struct
      SizeOfStruct DWORD ?
      Key PVOID ?
      LineNumber DWORD ?
      FileName PWSTR ?
      Address DWORD64 ?
    IMAGEHLP_LINEW64 ends
    _IMAGEHLP_LINEW64 typedef IMAGEHLP_LINEW64
    PIMAGEHLP_LINEW64 typedef ptr IMAGEHLP_LINEW64
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      IMAGEHLP_LINE equ <IMAGEHLP_LINE64>
      PIMAGEHLP_LINE equ <PIMAGEHLP_LINE64>
    else
      IMAGEHLP_LINE struct
        SizeOfStruct DWORD ?
        Key PVOID ?
        LineNumber DWORD ?
        FileName PCHAR ?
        Address DWORD ?
      IMAGEHLP_LINE ends
      _IMAGEHLP_LINE typedef IMAGEHLP_LINE
      PIMAGEHLP_LINE typedef ptr IMAGEHLP_LINE
      
      IMAGEHLP_LINEW struct
        SizeOfStruct DWORD ?
        Key PVOID ?
        LineNumber DWORD ?
        FileName PCHAR ?
        Address DWORD64 ?
      IMAGEHLP_LINEW ends
      _IMAGEHLP_LINEW typedef IMAGEHLP_LINEW
      PIMAGEHLP_LINEW typedef ptr IMAGEHLP_LINEW
      
    endif
    SOURCEFILE struct
      ModBase DWORD64 ?
      FileName PCHAR ?
    SOURCEFILE ends
    _SOURCEFILE typedef SOURCEFILE
    PSOURCEFILE typedef ptr SOURCEFILE
    
    SOURCEFILEW struct
      ModBase DWORD64 ?
      FileName PWSTR ?
    SOURCEFILEW ends
    _SOURCEFILEW typedef SOURCEFILEW
    PSOURCEFILEW typedef ptr SOURCEFILEW
    
    CBA_DEFERRED_SYMBOL_LOAD_START equ 00000001h
    CBA_DEFERRED_SYMBOL_LOAD_COMPLETE equ 00000002h
    CBA_DEFERRED_SYMBOL_LOAD_FAILURE equ 00000003h
    CBA_SYMBOLS_UNLOADED equ 00000004h
    CBA_DUPLICATE_SYMBOL equ 00000005h
    CBA_READ_MEMORY equ 00000006h
    CBA_DEFERRED_SYMBOL_LOAD_CANCEL equ 00000007h
    CBA_SET_OPTIONS equ 00000008h
    CBA_EVENT equ 00000010h
    CBA_DEFERRED_SYMBOL_LOAD_PARTIAL equ 00000020h
    CBA_DEBUG_INFO equ 10000000h
    CBA_SRCSRV_INFO equ 20000000h
    CBA_SRCSRV_EVENT equ 40000000h
    CBA_UPDATE_STATUS_BAR equ 50000000h
    CBA_ENGINE_PRESENT equ 60000000h
    CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS equ 70000000h
    CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE equ 80000000h
    IMAGEHLP_CBA_READ_MEMORY struct
      addr_ DWORD64 ?
      buf PVOID ?
      bytes DWORD ?
      bytesread POINTER ?
    IMAGEHLP_CBA_READ_MEMORY ends
    _IMAGEHLP_CBA_READ_MEMORY typedef IMAGEHLP_CBA_READ_MEMORY
    PIMAGEHLP_CBA_READ_MEMORY typedef ptr IMAGEHLP_CBA_READ_MEMORY
    
    sevInfo equ 0
    sevProblem equ 1
    sevAttn equ 2
    sevFatal equ 3
    sevMax equ 4
    
    EVENT_SRCSPEW_START equ 100
    EVENT_SRCSPEW equ 100
    EVENT_SRCSPEW_END equ 199
    IMAGEHLP_CBA_EVENT struct
      severity DWORD ?
      code DWORD ?
      desc PCHAR ?
      object_ PVOID ?
    IMAGEHLP_CBA_EVENT ends
    _IMAGEHLP_CBA_EVENT typedef IMAGEHLP_CBA_EVENT
    PIMAGEHLP_CBA_EVENT typedef ptr IMAGEHLP_CBA_EVENT
    
    IMAGEHLP_CBA_EVENTW struct
      severity DWORD ?
      code DWORD ?
      desc PCWSTR ?
      object_ PVOID ?
    IMAGEHLP_CBA_EVENTW ends
    _IMAGEHLP_CBA_EVENTW typedef IMAGEHLP_CBA_EVENTW
    PIMAGEHLP_CBA_EVENTW typedef ptr IMAGEHLP_CBA_EVENTW
    
    IMAGEHLP_DEFERRED_SYMBOL_LOAD64 struct
      SizeOfStruct DWORD ?
      BaseOfImage DWORD64 ?
      CheckSum DWORD ?
      TimeDateStamp DWORD ?
      FileName CHAR MAX_PATH dup (?)
      Reparse BOOLEAN ?
      hFile HANDLE ?
      Flags DWORD ?
    IMAGEHLP_DEFERRED_SYMBOL_LOAD64 ends
    _IMAGEHLP_DEFERRED_SYMBOL_LOAD64 typedef IMAGEHLP_DEFERRED_SYMBOL_LOAD64
    PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD64
    
    IMAGEHLP_DEFERRED_SYMBOL_LOADW64 struct
      SizeOfStruct DWORD ?
      BaseOfImage DWORD64 ?
      CheckSum DWORD ?
      TimeDateStamp DWORD ?
      FileName WCHAR MAX_PATH + 1 dup (?)
      Reparse BOOLEAN ?
      hFile HANDLE ?
      Flags DWORD ?
    IMAGEHLP_DEFERRED_SYMBOL_LOADW64 ends
    _IMAGEHLP_DEFERRED_SYMBOL_LOADW64 typedef IMAGEHLP_DEFERRED_SYMBOL_LOADW64
    PIMAGEHLP_DEFERRED_SYMBOL_LOADW64 typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOADW64
    
    DSLFLAG_MISMATCHED_PDB equ 1h
    DSLFLAG_MISMATCHED_DBG equ 2h
    FLAG_ENGINE_PRESENT equ 4h
    FLAG_ENGOPT_DISALLOW_NETWORK_PATHS equ 8h
    FLAG_OVERRIDE_ARM_MACHINE_TYPE equ 10h
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      IMAGEHLP_DEFERRED_SYMBOL_LOAD equ <IMAGEHLP_DEFERRED_SYMBOL_LOAD64>
      PIMAGEHLP_DEFERRED_SYMBOL_LOAD equ <PIMAGEHLP_DEFERRED_SYMBOL_LOAD64>
    else
      IMAGEHLP_DEFERRED_SYMBOL_LOAD struct
        SizeOfStruct DWORD ?
        BaseOfImage DWORD ?
        CheckSum DWORD ?
        TimeDateStamp DWORD ?
        FileName CHAR MAX_PATH dup (?)
        Reparse BOOLEAN ?
        hFile HANDLE ?
      IMAGEHLP_DEFERRED_SYMBOL_LOAD ends
      _IMAGEHLP_DEFERRED_SYMBOL_LOAD typedef IMAGEHLP_DEFERRED_SYMBOL_LOAD
      PIMAGEHLP_DEFERRED_SYMBOL_LOAD typedef ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD
      
    endif
    IMAGEHLP_DUPLICATE_SYMBOL64 struct
      SizeOfStruct DWORD ?
      NumberOfDups DWORD ?
      Symbol PIMAGEHLP_SYMBOL64 ?
      SelectedSymbol DWORD ?
    IMAGEHLP_DUPLICATE_SYMBOL64 ends
    _IMAGEHLP_DUPLICATE_SYMBOL64 typedef IMAGEHLP_DUPLICATE_SYMBOL64
    PIMAGEHLP_DUPLICATE_SYMBOL64 typedef ptr IMAGEHLP_DUPLICATE_SYMBOL64
    
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      IMAGEHLP_DUPLICATE_SYMBOL equ <IMAGEHLP_DUPLICATE_SYMBOL64>
      PIMAGEHLP_DUPLICATE_SYMBOL equ <PIMAGEHLP_DUPLICATE_SYMBOL64>
    else
      IMAGEHLP_DUPLICATE_SYMBOL struct
        SizeOfStruct DWORD ?
        NumberOfDups DWORD ?
        Symbol PIMAGEHLP_SYMBOL ?
        SelectedSymbol DWORD ?
      IMAGEHLP_DUPLICATE_SYMBOL ends
      _IMAGEHLP_DUPLICATE_SYMBOL typedef IMAGEHLP_DUPLICATE_SYMBOL
      PIMAGEHLP_DUPLICATE_SYMBOL typedef ptr IMAGEHLP_DUPLICATE_SYMBOL
      
    endif
    @DefProto DllImport, SymSetParentWindow, WIN_STD_CALL_CONV,, <:HWND>, 4
    @DefProto DllImport, SymSetHomeDirectory, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR>, 8
    @DefProto DllImport, SymSetHomeDirectoryW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR>, 8
    @DefProto DllImport, SymGetHomeDirectory, WIN_STD_CALL_CONV,, <:DWORD, :PSTR, :size_t>, 12
    @DefProto DllImport, SymGetHomeDirectoryW, WIN_STD_CALL_CONV,, <:DWORD, :PWSTR, :size_t>, 12
    IMAGEHLP_HD_TYPE typedef SDWORD
    hdBase equ 0
    hdSym equ 1
    hdSrc equ 2
    hdMax equ 3
    
    OMAP struct
      rva ULONG ?
      rvaTo ULONG ?
    OMAP ends
    _OMAP typedef OMAP
    POMAP typedef ptr OMAP
    
    @DefProto DllImport, SymGetOmaps, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ptr POMAP, :PDWORD64, :ptr POMAP, :PDWORD64>, 28
    SYMOPT_CASE_INSENSITIVE equ 00000001h
    SYMOPT_UNDNAME equ 00000002h
    SYMOPT_DEFERRED_LOADS equ 00000004h
    SYMOPT_NO_CPP equ 00000008h
    SYMOPT_LOAD_LINES equ 00000010h
    SYMOPT_OMAP_FIND_NEAREST equ 00000020h
    SYMOPT_LOAD_ANYTHING equ 00000040h
    SYMOPT_IGNORE_CVREC equ 00000080h
    SYMOPT_NO_UNQUALIFIED_LOADS equ 00000100h
    SYMOPT_FAIL_CRITICAL_ERRORS equ 00000200h
    SYMOPT_EXACT_SYMBOLS equ 00000400h
    SYMOPT_ALLOW_ABSOLUTE_SYMBOLS equ 00000800h
    SYMOPT_IGNORE_NT_SYMPATH equ 00001000h
    SYMOPT_INCLUDE_32BIT_MODULES equ 00002000h
    SYMOPT_PUBLICS_ONLY equ 00004000h
    SYMOPT_NO_PUBLICS equ 00008000h
    SYMOPT_AUTO_PUBLICS equ 00010000h
    SYMOPT_NO_IMAGE_SEARCH equ 00020000h
    SYMOPT_SECURE equ 00040000h
    SYMOPT_NO_PROMPTS equ 00080000h
    SYMOPT_OVERWRITE equ 00100000h
    SYMOPT_IGNORE_IMAGEDIR equ 00200000h
    SYMOPT_FLAT_DIRECTORY equ 00400000h
    SYMOPT_FAVOR_COMPRESSED equ 00800000h
    SYMOPT_ALLOW_ZERO_ADDRESS equ 01000000h
    SYMOPT_DISABLE_SYMSRV_AUTODETECT equ 02000000h
    SYMOPT_READONLY_CACHE equ 04000000h
    SYMOPT_SYMPATH_LAST equ 08000000h
    SYMOPT_DISABLE_FAST_SYMBOLS equ 10000000h
    SYMOPT_DISABLE_SYMSRV_TIMEOUT equ 20000000h
    SYMOPT_DISABLE_SRVSTAR_ON_STARTUP equ 40000000h
    SYMOPT_DEBUG equ 80000000h
    IMAGEHLP_EXTENDED_OPTIONS typedef SDWORD
    SYMOPT_EX_DISABLEACCESSTIMEUPDATE equ 0
    SYMOPT_EX_MAX equ 1
    
    @DefProto DllImport, SymSetOptions, WIN_STD_CALL_CONV,, <:DWORD>, 4
    @DefProto DllImport, SymGetOptions, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SymCleanup, WIN_STD_CALL_CONV,, <:HANDLE>, 4
    @DefProto DllImport, SymGetExtendedOption, WIN_STD_CALL_CONV,, <:IMAGEHLP_EXTENDED_OPTIONS>, 4
    @DefProto DllImport, SymSetExtendedOption, WIN_STD_CALL_CONV,, <:IMAGEHLP_EXTENDED_OPTIONS, :BOOL>, 8
    @DefProto DllImport, SymMatchString, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :BOOL>, 12
    @DefProto DllImport, SymMatchStringA, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :BOOL>, 12
    @DefProto DllImport, SymMatchStringW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :BOOL>, 12
    TYPE_PSYM_ENUMSOURCEFILES_CALLBACK typedef proto WIN_STD_CALL_CONV :PSOURCEFILE, :PVOID
    PSYM_ENUMSOURCEFILES_CALLBACK typedef ptr TYPE_PSYM_ENUMSOURCEFILES_CALLBACK
    PSYM_ENUMSOURCFILES_CALLBACK equ <PSYM_ENUMSOURCEFILES_CALLBACK>
    @DefProto DllImport, SymEnumSourceFiles, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMSOURCEFILES_CALLBACK, :PVOID>, 24
    TYPE_PSYM_ENUMSOURCEFILES_CALLBACKW typedef proto WIN_STD_CALL_CONV :PSOURCEFILEW, :PVOID
    PSYM_ENUMSOURCEFILES_CALLBACKW typedef ptr TYPE_PSYM_ENUMSOURCEFILES_CALLBACKW
    @DefProto DllImport, SymEnumSourceFilesW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMSOURCEFILES_CALLBACKW, :PVOID>, 24
    @DefProto DllImport, SymEnumerateModules64, WIN_STD_CALL_CONV,, <:HANDLE, :PSYM_ENUMMODULES_CALLBACK64, :PVOID>, 12
    @DefProto DllImport, SymEnumerateModulesW64, WIN_STD_CALL_CONV,, <:HANDLE, :PSYM_ENUMMODULES_CALLBACKW64, :PVOID>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymEnumerateModules equ <SymEnumerateModules64>
    else
      @DefProto DllImport, SymEnumerateModules, WIN_STD_CALL_CONV,, <:HANDLE, :PSYM_ENUMMODULES_CALLBACK, :PVOID>, 12
    endif
    @DefProto DllImport, EnumerateLoadedModulesEx, WIN_STD_CALL_CONV,, <:HANDLE, :PENUMLOADED_MODULES_CALLBACK64, :PVOID>, 12
    @DefProto DllImport, EnumerateLoadedModulesExW, WIN_STD_CALL_CONV,, <:HANDLE, :PENUMLOADED_MODULES_CALLBACKW64, :PVOID>, 12
    @DefProto DllImport, EnumerateLoadedModules64, WIN_STD_CALL_CONV,, <:HANDLE, :PENUMLOADED_MODULES_CALLBACK64, :PVOID>, 12
    @DefProto DllImport, EnumerateLoadedModulesW64, WIN_STD_CALL_CONV,, <:HANDLE, :PENUMLOADED_MODULES_CALLBACKW64, :PVOID>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      EnumerateLoadedModules equ <EnumerateLoadedModules64>
    else
      @DefProto DllImport, EnumerateLoadedModules, WIN_STD_CALL_CONV,, <:HANDLE, :PENUMLOADED_MODULES_CALLBACK, :PVOID>, 12
    endif
    @DefProto DllImport, SymFunctionTableAccess64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64>, 12
    @DefProto DllImport, SymFunctionTableAccess64AccessRoutines, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PREAD_PROCESS_MEMORY_ROUTINE64, :PGET_MODULE_BASE_ROUTINE64>, 20
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymFunctionTableAccess equ <SymFunctionTableAccess64>
    else
      @DefProto DllImport, SymFunctionTableAccess, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD>, 8
    endif
    @DefProto DllImport, SymGetUnwindInfo, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PVOID, :PULONG>, 20
    @DefProto DllImport, SymGetModuleInfo64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PIMAGEHLP_MODULE64>, 16
    @DefProto DllImport, SymGetModuleInfoW64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PIMAGEHLP_MODULEW64>, 16
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetModuleInfo equ <SymGetModuleInfo64>
      SymGetModuleInfoW equ <SymGetModuleInfoW64>
    else
      @DefProto DllImport, SymGetModuleInfo, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD, :PIMAGEHLP_MODULE>, 12
      @DefProto DllImport, SymGetModuleInfoW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD, :PIMAGEHLP_MODULEW>, 12
    endif
    @DefProto DllImport, SymGetModuleBase64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetModuleBase equ <SymGetModuleBase64>
    else
      @DefProto DllImport, SymGetModuleBase, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD>, 8
    endif
    SRCCODEINFO struct
      SizeOfStruct DWORD ?
      Key PVOID ?
      ModBase DWORD64 ?
      Obj CHAR MAX_PATH + 1 dup (?)
      FileName CHAR MAX_PATH + 1 dup (?)
      LineNumber DWORD ?
      Address DWORD64 ?
    SRCCODEINFO ends
    _SRCCODEINFO typedef SRCCODEINFO
    PSRCCODEINFO typedef ptr SRCCODEINFO
    
    SRCCODEINFOW struct
      SizeOfStruct DWORD ?
      Key PVOID ?
      ModBase DWORD64 ?
      Obj WCHAR MAX_PATH + 1 dup (?)
      FileName WCHAR MAX_PATH + 1 dup (?)
      LineNumber DWORD ?
      Address DWORD64 ?
    SRCCODEINFOW ends
    _SRCCODEINFOW typedef SRCCODEINFOW
    PSRCCODEINFOW typedef ptr SRCCODEINFOW
    
    TYPE_PSYM_ENUMLINES_CALLBACK typedef proto WIN_STD_CALL_CONV :PSRCCODEINFO, :PVOID
    PSYM_ENUMLINES_CALLBACK typedef ptr TYPE_PSYM_ENUMLINES_CALLBACK
    @DefProto DllImport, SymEnumLines, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PCSTR, :PSYM_ENUMLINES_CALLBACK, :PVOID>, 28
    TYPE_PSYM_ENUMLINES_CALLBACKW typedef proto WIN_STD_CALL_CONV :PSRCCODEINFOW, :PVOID
    PSYM_ENUMLINES_CALLBACKW typedef ptr TYPE_PSYM_ENUMLINES_CALLBACKW
    @DefProto DllImport, SymEnumLinesW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :PSYM_ENUMLINES_CALLBACKW, :PVOID>, 28
    @DefProto DllImport, SymGetLineFromAddr64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PDWORD, :PIMAGEHLP_LINE64>, 20
    @DefProto DllImport, SymGetLineFromAddrW64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PDWORD, :PIMAGEHLP_LINEW64>, 20
    @DefProto DllImport, SymGetLineFromInlineContext, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ULONG, :DWORD64, :PDWORD, :PIMAGEHLP_LINE64>, 32
    @DefProto DllImport, SymGetLineFromInlineContextW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ULONG, :DWORD64, :PDWORD, :PIMAGEHLP_LINEW64>, 32
    @DefProto DllImport, SymEnumSourceLines, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PCSTR, :DWORD, :DWORD, :PSYM_ENUMLINES_CALLBACK, :PVOID>, 36
    @DefProto DllImport, SymEnumSourceLinesW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :DWORD, :DWORD, :PSYM_ENUMLINES_CALLBACKW, :PVOID>, 36
    @DefProto DllImport, SymAddrIncludeInlineTrace, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64>, 12
    SYM_INLINE_COMP_ERROR equ 0
    SYM_INLINE_COMP_IDENTICAL equ 1
    SYM_INLINE_COMP_STEPIN equ 2
    SYM_INLINE_COMP_STEPOUT equ 3
    SYM_INLINE_COMP_STEPOVER equ 4
    SYM_INLINE_COMP_DIFFERENT equ 5
    @DefProto DllImport, SymCompareInlineTrace, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :DWORD, :DWORD64, :DWORD64, :DWORD64>, 40
    @DefProto DllImport, SymQueryInlineTrace, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :DWORD, :DWORD64, :DWORD64, :LPDWORD, :LPDWORD>, 40
    ESLFLAG_FULLPATH equ 00000001h
    ESLFLAG_NEAREST equ 00000002h
    ESLFLAG_PREV equ 00000004h
    ESLFLAG_NEXT equ 00000008h
    ESLFLAG_INLINE_SITE equ 00000010h
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetLineFromAddr equ <SymGetLineFromAddr64>
      SymGetLineFromAddrW equ <SymGetLineFromAddrW64>
    else
      @DefProto DllImport, SymGetLineFromAddr, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_LINE>, 16
      @DefProto DllImport, SymGetLineFromAddrW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_LINEW>, 16
    endif
    @DefProto DllImport, SymGetLineFromName64, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :DWORD, :PLONG, :PIMAGEHLP_LINE64>, 24
    @DefProto DllImport, SymGetLineFromNameW64, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :DWORD, :PLONG, :PIMAGEHLP_LINEW64>, 24
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetLineFromName equ <SymGetLineFromName64>
    else
      @DefProto DllImport, SymGetLineFromName, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :DWORD, :PLONG, :PIMAGEHLP_LINE>, 24
    endif
    @DefProto DllImport, SymGetLineNext64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINE64>, 8
    @DefProto DllImport, SymGetLineNextW64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINEW64>, 8
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetLineNext equ <SymGetLineNext64>
    else
      @DefProto DllImport, SymGetLineNext, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINE>, 8
      @DefProto DllImport, SymGetLineNextW, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINEW>, 8
    endif
    @DefProto DllImport, SymGetLinePrev64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINE64>, 8
    @DefProto DllImport, SymGetLinePrevW64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINEW64>, 8
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetLinePrev equ <SymGetLinePrev64>
    else
      @DefProto DllImport, SymGetLinePrev, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINE>, 8
      @DefProto DllImport, SymGetLinePrevW, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_LINEW>, 8
    endif
    @DefProto DllImport, SymGetFileLineOffsets64, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PDWORD64, :ULONG>, 20
    @DefProto DllImport, SymMatchFileName, WIN_STD_CALL_CONV,, <:PCSTR, :PCSTR, :ptr PSTR, :ptr PSTR>, 16
    @DefProto DllImport, SymMatchFileNameW, WIN_STD_CALL_CONV,, <:PCWSTR, :PCWSTR, :ptr PWSTR, :ptr PWSTR>, 16
    @DefProto DllImport, SymGetSourceFile, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PCSTR, :PSTR, :DWORD>, 28
    @DefProto DllImport, SymGetSourceFileW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PCWSTR, :PWSTR, :DWORD>, 28
    @DefProto DllImport, SymGetSourceFileToken, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :ptr PVOID, :ptr DWORD>, 24
    @DefProto DllImport, SymGetSourceFileChecksumW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :ptr DWORD, :ptr BYTE, :DWORD, :ptr DWORD>, 32
    @DefProto DllImport, SymGetSourceFileChecksum, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :ptr DWORD, :ptr BYTE, :DWORD, :ptr DWORD>, 32
    @DefProto DllImport, SymGetSourceFileTokenW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :ptr PVOID, :ptr DWORD>, 24
    @DefProto DllImport, SymGetSourceFileFromToken, WIN_STD_CALL_CONV,, <:HANDLE, :PVOID, :PCSTR, :PSTR, :DWORD>, 20
    @DefProto DllImport, SymGetSourceFileFromTokenW, WIN_STD_CALL_CONV,, <:HANDLE, :PVOID, :PCWSTR, :PWSTR, :DWORD>, 20
    @DefProto DllImport, SymGetSourceVarFromToken, WIN_STD_CALL_CONV,, <:HANDLE, :PVOID, :PCSTR, :PCSTR, :PSTR, :DWORD>, 24
    @DefProto DllImport, SymGetSourceVarFromTokenW, WIN_STD_CALL_CONV,, <:HANDLE, :PVOID, :PCWSTR, :PCWSTR, :PWSTR, :DWORD>, 24
    TYPE_PENUMSOURCEFILETOKENSCALLBACK typedef proto WIN_STD_CALL_CONV :PVOID, :size_t
    PENUMSOURCEFILETOKENSCALLBACK typedef ptr TYPE_PENUMSOURCEFILETOKENSCALLBACK
    @DefProto DllImport, SymEnumSourceFileTokens, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PENUMSOURCEFILETOKENSCALLBACK>, 16
    @DefProto DllImport, SymInitialize, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :BOOL>, 12
    @DefProto DllImport, SymInitializeW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :BOOL>, 12
    @DefProto DllImport, SymGetSearchPath, WIN_STD_CALL_CONV,, <:HANDLE, :PSTR, :DWORD>, 12
    @DefProto DllImport, SymGetSearchPathW, WIN_STD_CALL_CONV,, <:HANDLE, :PWSTR, :DWORD>, 12
    @DefProto DllImport, SymSetSearchPath, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR>, 8
    @DefProto DllImport, SymSetSearchPathW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR>, 8
    SLMFLAG_VIRTUAL equ 1h
    SLMFLAG_ALT_INDEX equ 2h
    SLMFLAG_NO_SYMBOLS equ 4h
    @DefProto DllImport, SymLoadModuleEx, WIN_STD_CALL_CONV,, <:HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD64, :DWORD, :PMODLOAD_DATA, :DWORD>, 36
    @DefProto DllImport, SymLoadModuleExW, WIN_STD_CALL_CONV,, <:HANDLE, :HANDLE, :PCWSTR, :PCWSTR, :DWORD64, :DWORD, :PMODLOAD_DATA, :DWORD>, 36
    @DefProto DllImport, SymUnloadModule64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymUnloadModule equ <SymUnloadModule64>
    else
      @DefProto DllImport, SymUnloadModule, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD>, 8
    endif
    @DefProto DllImport, SymUnDName64, WIN_STD_CALL_CONV,, <:PIMAGEHLP_SYMBOL64, :PSTR, :DWORD>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymUnDName equ <SymUnDName64>
    else
      @DefProto DllImport, SymUnDName, WIN_STD_CALL_CONV,, <:PIMAGEHLP_SYMBOL, :PSTR, :DWORD>, 12
    endif
    @DefProto DllImport, SymRegisterCallback64, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_REGISTERED_CALLBACK64, :ULONG64>, 16
    @DefProto DllImport, SymRegisterCallbackW64, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_REGISTERED_CALLBACK64, :ULONG64>, 16
    @DefProto DllImport, SymRegisterFunctionEntryCallback64, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_FUNCENTRY_CALLBACK64, :ULONG64>, 16
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymRegisterCallback equ <SymRegisterCallback64>
      SymRegisterFunctionEntryCallback equ <SymRegisterFunctionEntryCallback64>
    else
      @DefProto DllImport, SymRegisterCallback, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_REGISTERED_CALLBACK, :PVOID>, 12
      @DefProto DllImport, SymRegisterFunctionEntryCallback, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_FUNCENTRY_CALLBACK, :PVOID>, 12
    endif
    IMAGEHLP_SYMBOL_SRC struct
      sizeofstruct DWORD ?
      type_ DWORD ?
      file SBYTE MAX_PATH dup (?)
    IMAGEHLP_SYMBOL_SRC ends
    _IMAGEHLP_SYMBOL_SRC typedef IMAGEHLP_SYMBOL_SRC
    PIMAGEHLP_SYMBOL_SRC typedef ptr IMAGEHLP_SYMBOL_SRC
    
    MODULE_TYPE_INFO struct
      dataLength USHORT ?
      leaf USHORT ?
      data BYTE 1 dup (?)
    MODULE_TYPE_INFO ends
    _MODULE_TYPE_INFO typedef MODULE_TYPE_INFO
    PMODULE_TYPE_INFO typedef ptr MODULE_TYPE_INFO
    
    SYMBOL_INFO struct
      SizeOfStruct ULONG ?
      TypeIndex ULONG ?
      Reserved ULONG64 2 dup (?)
      Index ULONG ?
      Size_ ULONG ?
      ModBase ULONG64 ?
      Flags ULONG ?
      Value ULONG64 ?
      Address ULONG64 ?
      Register ULONG ?
      Scope ULONG ?
      Tag ULONG ?
      NameLen ULONG ?
      MaxNameLen ULONG ?
      Name_ CHAR 1 dup (?)
    SYMBOL_INFO ends
    _SYMBOL_INFO typedef SYMBOL_INFO
    PSYMBOL_INFO typedef ptr SYMBOL_INFO
    
    SYMBOL_INFO_PACKAGE struct
      si_ SYMBOL_INFO <>
      name_ CHAR MAX_SYM_NAME + 1 dup (?)
    SYMBOL_INFO_PACKAGE ends
    _SYMBOL_INFO_PACKAGE typedef SYMBOL_INFO_PACKAGE
    PSYMBOL_INFO_PACKAGE typedef ptr SYMBOL_INFO_PACKAGE
    
    SYMBOL_INFOW struct
      SizeOfStruct ULONG ?
      TypeIndex ULONG ?
      Reserved ULONG64 2 dup (?)
      Index ULONG ?
      Size_ ULONG ?
      ModBase ULONG64 ?
      Flags ULONG ?
      Value ULONG64 ?
      Address ULONG64 ?
      Register ULONG ?
      Scope ULONG ?
      Tag ULONG ?
      NameLen ULONG ?
      MaxNameLen ULONG ?
      Name_ WCHAR 1 dup (?)
    SYMBOL_INFOW ends
    _SYMBOL_INFOW typedef SYMBOL_INFOW
    PSYMBOL_INFOW typedef ptr SYMBOL_INFOW
    
    SYMBOL_INFO_PACKAGEW struct
      si_ SYMBOL_INFOW <>
      name_ WCHAR MAX_SYM_NAME + 1 dup (?)
    SYMBOL_INFO_PACKAGEW ends
    _SYMBOL_INFO_PACKAGEW typedef SYMBOL_INFO_PACKAGEW
    PSYMBOL_INFO_PACKAGEW typedef ptr SYMBOL_INFO_PACKAGEW
    
    IMAGEHLP_STACK_FRAME struct
      InstructionOffset ULONG64 ?
      ReturnOffset ULONG64 ?
      FrameOffset ULONG64 ?
      StackOffset ULONG64 ?
      BackingStoreOffset ULONG64 ?
      FuncTableEntry ULONG64 ?
      Params ULONG64 4 dup (?)
      Reserved ULONG64 5 dup (?)
      Virtual BOOL ?
      Reserved2 ULONG ?
    IMAGEHLP_STACK_FRAME ends
    _IMAGEHLP_STACK_FRAME typedef IMAGEHLP_STACK_FRAME
    PIMAGEHLP_STACK_FRAME typedef ptr IMAGEHLP_STACK_FRAME
    
    IMAGEHLP_CONTEXT typedef VOID
    PIMAGEHLP_CONTEXT typedef ptr VOID
    @DefProto DllImport, SymSetContext, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_STACK_FRAME, :PIMAGEHLP_CONTEXT>, 12
    @DefProto DllImport, SymSetScopeFromAddr, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64>, 12
    @DefProto DllImport, SymSetScopeFromInlineContext, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :ULONG>, 16
    @DefProto DllImport, SymSetScopeFromIndex, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD>, 16
    TYPE_PSYM_ENUMPROCESSES_CALLBACK typedef proto WIN_STD_CALL_CONV :HANDLE, :PVOID
    PSYM_ENUMPROCESSES_CALLBACK typedef ptr TYPE_PSYM_ENUMPROCESSES_CALLBACK
    @DefProto DllImport, SymEnumProcesses, WIN_STD_CALL_CONV,, <:PSYM_ENUMPROCESSES_CALLBACK, :PVOID>, 8
    @DefProto DllImport, SymFromAddr, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PDWORD64, :PSYMBOL_INFO>, 20
    @DefProto DllImport, SymFromAddrW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PDWORD64, :PSYMBOL_INFOW>, 20
    @DefProto DllImport, SymFromInlineContext, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ULONG, :PDWORD64, :PSYMBOL_INFO>, 24
    @DefProto DllImport, SymFromInlineContextW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ULONG, :PDWORD64, :PSYMBOL_INFOW>, 24
    @DefProto DllImport, SymFromToken, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :DWORD, :PSYMBOL_INFO>, 20
    @DefProto DllImport, SymFromTokenW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :DWORD, :PSYMBOL_INFOW>, 20
    @DefProto DllImport, SymNext, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_INFO>, 8
    @DefProto DllImport, SymNextW, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_INFOW>, 8
    @DefProto DllImport, SymPrev, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_INFO>, 8
    @DefProto DllImport, SymPrevW, WIN_STD_CALL_CONV,, <:HANDLE, :PSYMBOL_INFOW>, 8
    @DefProto DllImport, SymFromName, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PSYMBOL_INFO>, 12
    @DefProto DllImport, SymFromNameW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PSYMBOL_INFOW>, 12
    SYMENUM_OPTIONS_DEFAULT equ 00000001h
    SYMENUM_OPTIONS_INLINE equ 00000002h
    TYPE_PSYM_ENUMERATESYMBOLS_CALLBACK typedef proto WIN_STD_CALL_CONV :PSYMBOL_INFO, :ULONG, :PVOID
    PSYM_ENUMERATESYMBOLS_CALLBACK typedef ptr TYPE_PSYM_ENUMERATESYMBOLS_CALLBACK
    @DefProto DllImport, SymEnumSymbols, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID>, 24
    @DefProto DllImport, SymEnumSymbolsEx, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID, :DWORD>, 28
    TYPE_PSYM_ENUMERATESYMBOLS_CALLBACKW typedef proto WIN_STD_CALL_CONV :PSYMBOL_INFOW, :ULONG, :PVOID
    PSYM_ENUMERATESYMBOLS_CALLBACKW typedef ptr TYPE_PSYM_ENUMERATESYMBOLS_CALLBACKW
    @DefProto DllImport, SymEnumSymbolsW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID>, 24
    @DefProto DllImport, SymEnumSymbolsExW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID, :DWORD>, 28
    @DefProto DllImport, SymEnumSymbolsForAddr, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID>, 20
    @DefProto DllImport, SymEnumSymbolsForAddrW, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID>, 20
    SYMSEARCH_MASKOBJS equ 01h
    SYMSEARCH_RECURSE equ 02h
    SYMSEARCH_GLOBALSONLY equ 04h
    SYMSEARCH_ALLITEMS equ 08h
    @DefProto DllImport, SymSearch, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :DWORD, :PCSTR, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID, :DWORD>, 44
    @DefProto DllImport, SymSearchW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :DWORD, :PCWSTR, :DWORD64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID, :DWORD>, 44
    @DefProto DllImport, SymGetScope, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFO>, 20
    @DefProto DllImport, SymGetScopeW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFOW>, 20
    @DefProto DllImport, SymFromIndex, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFO>, 20
    @DefProto DllImport, SymFromIndexW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :DWORD, :PSYMBOL_INFOW>, 20
    IMAGEHLP_SYMBOL_TYPE_INFO typedef SDWORD
    TI_GET_SYMTAG equ 0
    TI_GET_SYMNAME equ 1
    TI_GET_LENGTH equ 2
    TI_GET_TYPE equ 3
    TI_GET_TYPEID equ 4
    TI_GET_BASETYPE equ 5
    TI_GET_ARRAYINDEXTYPEID equ 6
    TI_FINDCHILDREN equ 7
    TI_GET_DATAKIND equ 8
    TI_GET_ADDRESSOFFSET equ 9
    TI_GET_OFFSET equ 10
    TI_GET_VALUE equ 11
    TI_GET_COUNT equ 12
    TI_GET_CHILDRENCOUNT equ 13
    TI_GET_BITPOSITION equ 14
    TI_GET_VIRTUALBASECLASS equ 15
    TI_GET_VIRTUALTABLESHAPEID equ 16
    TI_GET_VIRTUALBASEPOINTEROFFSET equ 17
    TI_GET_CLASSPARENTID equ 18
    TI_GET_NESTED equ 19
    TI_GET_SYMINDEX equ 20
    TI_GET_LEXICALPARENT equ 21
    TI_GET_ADDRESS equ 22
    TI_GET_THISADJUST equ 23
    TI_GET_UDTKIND equ 24
    TI_IS_EQUIV_TO equ 25
    TI_GET_CALLING_CONVENTION equ 26
    TI_IS_CLOSE_EQUIV_TO equ 27
    TI_GTIEX_REQS_VALID equ 28
    TI_GET_VIRTUALBASEOFFSET equ 29
    TI_GET_VIRTUALBASEDISPINDEX equ 30
    TI_GET_IS_REFERENCE equ 31
    TI_GET_INDIRECTVIRTUALBASECLASS equ 32
    TI_GET_VIRTUALBASETABLETYPE equ 33
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX equ 34
    _IMAGEHLP_SYMBOL_TYPE_INFO typedef IMAGEHLP_SYMBOL_TYPE_INFO
    
    TI_FINDCHILDREN_PARAMS struct
      Count ULONG ?
      Start ULONG ?
      ChildId ULONG 1 dup (?)
    TI_FINDCHILDREN_PARAMS ends
    _TI_FINDCHILDREN_PARAMS typedef TI_FINDCHILDREN_PARAMS
    @DefProto DllImport, SymGetTypeInfo, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :ULONG, :IMAGEHLP_SYMBOL_TYPE_INFO, :PVOID>, 24
    IMAGEHLP_GET_TYPE_INFO_UNCACHED equ 00000001h
    IMAGEHLP_GET_TYPE_INFO_CHILDREN equ 00000002h
    IMAGEHLP_GET_TYPE_INFO_PARAMS struct
      SizeOfStruct ULONG ?
      Flags ULONG ?
      NumIds ULONG ?
      TypeIds PULONG ?
      TagFilter ULONG64 ?
      NumReqs ULONG ?
      ReqKinds POINTER ?
      ReqOffsets PULONG_PTR ?
      ReqSizes PULONG ?
      ReqStride ULONG_PTR ?
      BufferSize ULONG_PTR ?
      Buffer PVOID ?
      EntriesMatched ULONG ?
      EntriesFilled ULONG ?
      TagsFound ULONG64 ?
      AllReqsValid ULONG64 ?
      NumReqsValid ULONG ?
      ReqsValid PULONG64 ?
    IMAGEHLP_GET_TYPE_INFO_PARAMS ends
    _IMAGEHLP_GET_TYPE_INFO_PARAMS typedef IMAGEHLP_GET_TYPE_INFO_PARAMS
    PIMAGEHLP_GET_TYPE_INFO_PARAMS typedef ptr IMAGEHLP_GET_TYPE_INFO_PARAMS
    
    @DefProto DllImport, SymGetTypeInfoEx, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PIMAGEHLP_GET_TYPE_INFO_PARAMS>, 16
    @DefProto DllImport, SymEnumTypes, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID>, 20
    @DefProto DllImport, SymEnumTypesW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID>, 20
    @DefProto DllImport, SymEnumTypesByName, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID>, 24
    @DefProto DllImport, SymEnumTypesByNameW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PSYM_ENUMERATESYMBOLS_CALLBACKW, :PVOID>, 24
    @DefProto DllImport, SymGetTypeFromName, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PSYMBOL_INFO>, 20
    @DefProto DllImport, SymGetTypeFromNameW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PSYMBOL_INFOW>, 20
    @DefProto DllImport, SymAddSymbol, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :DWORD64, :DWORD, :DWORD>, 32
    @DefProto DllImport, SymAddSymbolW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :DWORD64, :DWORD, :DWORD>, 32
    @DefProto DllImport, SymDeleteSymbol, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :DWORD64, :DWORD>, 28
    @DefProto DllImport, SymDeleteSymbolW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :DWORD64, :DWORD>, 28
    @DefProto DllImport, SymRefreshModuleList, WIN_STD_CALL_CONV,, <:HANDLE>, 4
    @DefProto DllImport, SymAddSourceStream, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t>, 24
    TYPE_SYMADDSOURCESTREAM typedef proto WIN_STD_CALL_CONV :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t
    SYMADDSOURCESTREAM typedef ptr TYPE_SYMADDSOURCESTREAM
    @DefProto DllImport, SymAddSourceStreamA, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t>, 24
    TYPE_SYMADDSOURCESTREAMA typedef proto WIN_STD_CALL_CONV :HANDLE, :ULONG64, :PCSTR, :PBYTE, :size_t
    SYMADDSOURCESTREAMA typedef ptr TYPE_SYMADDSOURCESTREAMA
    @DefProto DllImport, SymAddSourceStreamW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PCWSTR, :PBYTE, :size_t>, 24
    @DefProto DllImport, SymSrvIsStoreW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR>, 8
    @DefProto DllImport, SymSrvIsStore, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR>, 8
    @DefProto DllImport, SymSrvDeltaName, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PCSTR, :PCSTR>, 20
    @DefProto DllImport, SymSrvDeltaNameW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PCWSTR, :PCWSTR>, 20
    @DefProto DllImport, SymSrvGetSupplement, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PCSTR>, 16
    @DefProto DllImport, SymSrvGetSupplementW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PCWSTR>, 16
    @DefProto DllImport, SymSrvGetFileIndexes, WIN_STD_CALL_CONV,, <:PCSTR, :ptr GUID, :PDWORD, :PDWORD, :DWORD>, 20
    @DefProto DllImport, SymSrvGetFileIndexesW, WIN_STD_CALL_CONV,, <:PCWSTR, :ptr GUID, :PDWORD, :PDWORD, :DWORD>, 20
    @DefProto DllImport, SymSrvGetFileIndexStringW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PWSTR, :size_t, :DWORD>, 24
    @DefProto DllImport, SymSrvGetFileIndexString, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PSTR, :size_t, :DWORD>, 24
    SYMSRV_INDEX_INFO struct
      sizeofstruct DWORD ?
      file SBYTE MAX_PATH + 1 dup (?)
      stripped BOOL ?
      timestamp DWORD ?
      size_ DWORD ?
      dbgfile SBYTE MAX_PATH + 1 dup (?)
      pdbfile SBYTE MAX_PATH + 1 dup (?)
      guid GUID <>
      sig DWORD ?
      age DWORD ?
    SYMSRV_INDEX_INFO ends
    PSYMSRV_INDEX_INFO typedef ptr SYMSRV_INDEX_INFO
    
    SYMSRV_INDEX_INFOW struct
      sizeofstruct DWORD ?
      file WCHAR MAX_PATH + 1 dup (?)
      stripped BOOL ?
      timestamp DWORD ?
      size_ DWORD ?
      dbgfile WCHAR MAX_PATH + 1 dup (?)
      pdbfile WCHAR MAX_PATH + 1 dup (?)
      guid GUID <>
      sig DWORD ?
      age DWORD ?
    SYMSRV_INDEX_INFOW ends
    PSYMSRV_INDEX_INFOW typedef ptr SYMSRV_INDEX_INFOW
    
    @DefProto DllImport, SymSrvGetFileIndexInfo, WIN_STD_CALL_CONV,, <:PCSTR, :PSYMSRV_INDEX_INFO, :DWORD>, 12
    @DefProto DllImport, SymSrvGetFileIndexInfoW, WIN_STD_CALL_CONV,, <:PCWSTR, :PSYMSRV_INDEX_INFOW, :DWORD>, 12
    @DefProto DllImport, SymSrvStoreSupplement, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PCSTR, :DWORD>, 20
    @DefProto DllImport, SymSrvStoreSupplementW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :PCWSTR, :DWORD>, 20
    @DefProto DllImport, SymSrvStoreFile, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :DWORD>, 16
    @DefProto DllImport, SymSrvStoreFileW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :DWORD>, 16
    IMAGEHLP_SF_TYPE typedef SDWORD
    sfImage equ 0
    sfDbg equ 1
    sfPdb equ 2
    sfMpd equ 3
    sfMax equ 4
    
    @DefProto DllImport, SymGetSymbolFile, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :DWORD, :PSTR, :size_t, :PSTR, :size_t>, 32
    @DefProto DllImport, SymGetSymbolFileW, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PCWSTR, :DWORD, :PWSTR, :size_t, :PWSTR, :size_t>, 32
    TYPE_PDBGHELP_CREATE_USER_DUMP_CALLBACK typedef proto WIN_STD_CALL_CONV :DWORD, :ptr PVOID, :LPDWORD, :PVOID
    PDBGHELP_CREATE_USER_DUMP_CALLBACK typedef ptr TYPE_PDBGHELP_CREATE_USER_DUMP_CALLBACK
    DbgHelpCreateUserDump proto WIN_STD_CALL_CONV :LPCSTR, :PDBGHELP_CREATE_USER_DUMP_CALLBACK, :PVOID
    DbgHelpCreateUserDumpW proto WIN_STD_CALL_CONV :LPCWSTR, :PDBGHELP_CREATE_USER_DUMP_CALLBACK, :PVOID
    @DefProto DllImport, SymGetSymFromAddr64, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD64, :PDWORD64, :PIMAGEHLP_SYMBOL64>, 20
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetSymFromAddr equ <SymGetSymFromAddr64>
    else
      @DefProto DllImport, SymGetSymFromAddr, WIN_STD_CALL_CONV,, <:HANDLE, :DWORD, :PDWORD, :PIMAGEHLP_SYMBOL>, 16
    endif
    @DefProto DllImport, SymGetSymFromName64, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PIMAGEHLP_SYMBOL64>, 12
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetSymFromName equ <SymGetSymFromName64>
    else
      @DefProto DllImport, SymGetSymFromName, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PIMAGEHLP_SYMBOL>, 12
    endif
    EXT_OUTPUT_VER equ 1
    SYMSRV_EXTENDED_OUTPUT_DATA struct
      sizeOfStruct DWORD ?
      version DWORD ?
      filePtrMsg WCHAR MAX_PATH + 1 dup (?)
    SYMSRV_EXTENDED_OUTPUT_DATA ends
    PSYMSRV_EXTENDED_OUTPUT_DATA typedef ptr SYMSRV_EXTENDED_OUTPUT_DATA
    
    TYPE_PSYMBOLSERVERPROC typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR
    PSYMBOLSERVERPROC typedef ptr TYPE_PSYMBOLSERVERPROC
    TYPE_PSYMBOLSERVERPROCA typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR
    PSYMBOLSERVERPROCA typedef ptr TYPE_PSYMBOLSERVERPROCA
    TYPE_PSYMBOLSERVERPROCW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :PWSTR
    PSYMBOLSERVERPROCW typedef ptr TYPE_PSYMBOLSERVERPROCW
    TYPE_PSYMBOLSERVERBYINDEXPROC typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PCSTR, :PSTR
    PSYMBOLSERVERBYINDEXPROC typedef ptr TYPE_PSYMBOLSERVERBYINDEXPROC
    TYPE_PSYMBOLSERVERBYINDEXPROCA typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PCSTR, :PSTR
    PSYMBOLSERVERBYINDEXPROCA typedef ptr TYPE_PSYMBOLSERVERBYINDEXPROCA
    TYPE_PSYMBOLSERVERBYINDEXPROCW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR
    PSYMBOLSERVERBYINDEXPROCW typedef ptr TYPE_PSYMBOLSERVERBYINDEXPROCW
;    TYPE_PSYMBOLSERVEROPENPROC typedef proto WIN_STD_CALL_CONV :VOID
;    PSYMBOLSERVEROPENPROC typedef ptr TYPE_PSYMBOLSERVEROPENPROC
;    TYPE_PSYMBOLSERVERCLOSEPROC typedef proto WIN_STD_CALL_CONV :VOID
;    PSYMBOLSERVERCLOSEPROC typedef ptr TYPE_PSYMBOLSERVERCLOSEPROC
    TYPE_PSYMBOLSERVERSETOPTIONSPROC typedef proto WIN_STD_CALL_CONV :UINT_PTR, :ULONG64
    PSYMBOLSERVERSETOPTIONSPROC typedef ptr TYPE_PSYMBOLSERVERSETOPTIONSPROC
    TYPE_PSYMBOLSERVERSETOPTIONSWPROC typedef proto WIN_STD_CALL_CONV :UINT_PTR, :ULONG64
    PSYMBOLSERVERSETOPTIONSWPROC typedef ptr TYPE_PSYMBOLSERVERSETOPTIONSWPROC
    TYPE_PSYMBOLSERVERCALLBACKPROC typedef proto WIN_STD_CALL_CONV :UINT_PTR, :ULONG64, :ULONG64
    PSYMBOLSERVERCALLBACKPROC typedef ptr TYPE_PSYMBOLSERVERCALLBACKPROC
    TYPE_PSYMBOLSERVERGETOPTIONSPROC typedef proto WIN_STD_CALL_CONV
    PSYMBOLSERVERGETOPTIONSPROC typedef ptr TYPE_PSYMBOLSERVERGETOPTIONSPROC
    TYPE_PSYMBOLSERVERPINGPROC typedef proto WIN_STD_CALL_CONV :PCSTR
    PSYMBOLSERVERPINGPROC typedef ptr TYPE_PSYMBOLSERVERPINGPROC
    TYPE_PSYMBOLSERVERPINGPROCA typedef proto WIN_STD_CALL_CONV :PCSTR
    PSYMBOLSERVERPINGPROCA typedef ptr TYPE_PSYMBOLSERVERPINGPROCA
    TYPE_PSYMBOLSERVERPINGPROCW typedef proto WIN_STD_CALL_CONV :PCWSTR
    PSYMBOLSERVERPINGPROCW typedef ptr TYPE_PSYMBOLSERVERPINGPROCW
    TYPE_PSYMBOLSERVERGETVERSION typedef proto WIN_STD_CALL_CONV :LPAPI_VERSION
    PSYMBOLSERVERGETVERSION typedef ptr TYPE_PSYMBOLSERVERGETVERSION
    TYPE_PSYMBOLSERVERDELTANAME typedef proto WIN_STD_CALL_CONV :PCSTR, :PVOID, :DWORD, :DWORD, :PVOID, :DWORD, :DWORD, :PSTR, :size_t
    PSYMBOLSERVERDELTANAME typedef ptr TYPE_PSYMBOLSERVERDELTANAME
    TYPE_PSYMBOLSERVERDELTANAMEW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PVOID, :DWORD, :DWORD, :PVOID, :DWORD, :DWORD, :PWSTR, :size_t
    PSYMBOLSERVERDELTANAMEW typedef ptr TYPE_PSYMBOLSERVERDELTANAMEW
    TYPE_PSYMBOLSERVERGETSUPPLEMENT typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PCSTR, :PSTR, :size_t
    PSYMBOLSERVERGETSUPPLEMENT typedef ptr TYPE_PSYMBOLSERVERGETSUPPLEMENT
    TYPE_PSYMBOLSERVERGETSUPPLEMENTW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR, :size_t
    PSYMBOLSERVERGETSUPPLEMENTW typedef ptr TYPE_PSYMBOLSERVERGETSUPPLEMENTW
    TYPE_PSYMBOLSERVERSTORESUPPLEMENT typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PCSTR, :PSTR, :size_t, :DWORD
    PSYMBOLSERVERSTORESUPPLEMENT typedef ptr TYPE_PSYMBOLSERVERSTORESUPPLEMENT
    TYPE_PSYMBOLSERVERSTORESUPPLEMENTW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PCWSTR, :PWSTR, :size_t, :DWORD
    PSYMBOLSERVERSTORESUPPLEMENTW typedef ptr TYPE_PSYMBOLSERVERSTORESUPPLEMENTW
    TYPE_PSYMBOLSERVERGETINDEXSTRING typedef proto WIN_STD_CALL_CONV :PVOID, :DWORD, :DWORD, :PSTR, :size_t
    PSYMBOLSERVERGETINDEXSTRING typedef ptr TYPE_PSYMBOLSERVERGETINDEXSTRING
    TYPE_PSYMBOLSERVERGETINDEXSTRINGW typedef proto WIN_STD_CALL_CONV :PVOID, :DWORD, :DWORD, :PWSTR, :size_t
    PSYMBOLSERVERGETINDEXSTRINGW typedef ptr TYPE_PSYMBOLSERVERGETINDEXSTRINGW
    TYPE_PSYMBOLSERVERSTOREFILE typedef proto WIN_STD_CALL_CONV :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :PSTR, :size_t, :DWORD
    PSYMBOLSERVERSTOREFILE typedef ptr TYPE_PSYMBOLSERVERSTOREFILE
    TYPE_PSYMBOLSERVERSTOREFILEW typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :PWSTR, :size_t, :DWORD
    PSYMBOLSERVERSTOREFILEW typedef ptr TYPE_PSYMBOLSERVERSTOREFILEW
    TYPE_PSYMBOLSERVERISSTORE typedef proto WIN_STD_CALL_CONV :PCSTR
    PSYMBOLSERVERISSTORE typedef ptr TYPE_PSYMBOLSERVERISSTORE
    TYPE_PSYMBOLSERVERISSTOREW typedef proto WIN_STD_CALL_CONV :PCWSTR
    PSYMBOLSERVERISSTOREW typedef ptr TYPE_PSYMBOLSERVERISSTOREW
    TYPE_PSYMBOLSERVERVERSION typedef proto WIN_STD_CALL_CONV
    PSYMBOLSERVERVERSION typedef ptr TYPE_PSYMBOLSERVERVERSION
    TYPE_PSYMBOLSERVERMESSAGEPROC typedef proto WIN_STD_CALL_CONV :UINT_PTR, :ULONG64, :ULONG64
    PSYMBOLSERVERMESSAGEPROC typedef ptr TYPE_PSYMBOLSERVERMESSAGEPROC
    TYPE_PSYMBOLSERVERWEXPROC typedef proto WIN_STD_CALL_CONV :PCWSTR, :PCWSTR, :PVOID, :DWORD, :DWORD, :PWSTR, :PSYMSRV_EXTENDED_OUTPUT_DATA
    PSYMBOLSERVERWEXPROC typedef ptr TYPE_PSYMBOLSERVERWEXPROC
    TYPE_PSYMBOLSERVERPINGPROCWEX typedef proto WIN_STD_CALL_CONV :PCWSTR
    PSYMBOLSERVERPINGPROCWEX typedef ptr TYPE_PSYMBOLSERVERPINGPROCWEX
    TYPE_PSYMBOLSERVERGETOPTIONDATAPROC typedef proto WIN_STD_CALL_CONV :UINT_PTR, :PULONG64
    PSYMBOLSERVERGETOPTIONDATAPROC typedef ptr TYPE_PSYMBOLSERVERGETOPTIONDATAPROC
;    TYPE_PSYMBOLSERVERSETHTTPAUTHHEADER typedef proto WIN_STD_CALL_CONV :PCWSTR
;    PSYMBOLSERVERSETHTTPAUTHHEADER typedef ptr TYPE_PSYMBOLSERVERSETHTTPAUTHHEADER
    SYMSRV_VERSION equ 2
    SSRVOPT_CALLBACK equ 00000001h
    SSRVOPT_DWORD equ 00000002h
    SSRVOPT_DWORDPTR equ 00000004h
    SSRVOPT_GUIDPTR equ 00000008h
    SSRVOPT_OLDGUIDPTR equ 00000010h
    SSRVOPT_UNATTENDED equ 00000020h
    SSRVOPT_NOCOPY equ 00000040h
    SSRVOPT_GETPATH equ 00000040h
    SSRVOPT_PARENTWIN equ 00000080h
    SSRVOPT_PARAMTYPE equ 00000100h
    SSRVOPT_SECURE equ 00000200h
    SSRVOPT_TRACE equ 00000400h
    SSRVOPT_SETCONTEXT equ 00000800h
    SSRVOPT_PROXY equ 00001000h
    SSRVOPT_DOWNSTREAM_STORE equ 00002000h
    SSRVOPT_OVERWRITE equ 00004000h
    SSRVOPT_RESETTOU equ 00008000h
    SSRVOPT_CALLBACKW equ 00010000h
    SSRVOPT_FLAT_DEFAULT_STORE equ 00020000h
    SSRVOPT_PROXYW equ 00040000h
    SSRVOPT_MESSAGE equ 00080000h
    SSRVOPT_SERVICE equ 00100000h
    SSRVOPT_FAVOR_COMPRESSED equ 00200000h
    SSRVOPT_STRING equ 00400000h
    SSRVOPT_WINHTTP equ 00800000h
    SSRVOPT_WININET equ 01000000h
    SSRVOPT_DONT_UNCOMPRESS equ 02000000h
    SSRVOPT_DISABLE_PING_HOST equ 04000000h
    SSRVOPT_DISABLE_TIMEOUT equ 08000000h
    SSRVOPT_ENABLE_COMM_MSG equ 10000000h
    SSRVOPT_URI_FILTER equ 20000000h
    SSRVOPT_URI_TIERS equ 40000000h
    SSRVOPT_RETRY_APP_HANG equ 80000000h
    SSRVOPT_MAX equ 80000000h
    SSRVOPT_RESET equ (- 1)
    NUM_SSRVOPTS equ 32
    SSRVURI_HTTP_NORMAL equ 01h
    SSRVURI_HTTP_COMPRESSED equ 02h
    SSRVURI_HTTP_FILEPTR equ 04h
    SSRVURI_UNC_NORMAL equ 10h
    SSRVURI_UNC_COMPRESSED equ 20h
    SSRVURI_UNC_FILEPTR equ 40h
    SSRVURI_HTTP_MASK equ 0Fh
    SSRVURI_UNC_MASK equ 0F0h
    SSRVURI_ALL equ 0FFh
    SSRVURI_NORMAL equ <SSRVURI_HTTP_NORMAL>
    SSRVURI_COMPRESSED equ <SSRVURI_HTTP_COMPRESSED>
    SSRVURI_FILEPTR equ <SSRVURI_HTTP_FILEPTR>
    SSRVACTION_TRACE equ 1
    SSRVACTION_QUERYCANCEL equ 2
    SSRVACTION_EVENT equ 3
    SSRVACTION_EVENTW equ 4
    SSRVACTION_SIZE equ 5
    SSRVACTION_HTTPSTATUS equ 6
    SYMSTOREOPT_COMPRESS equ 01h
    SYMSTOREOPT_OVERWRITE equ 02h
    SYMSTOREOPT_RETURNINDEX equ 04h
    SYMSTOREOPT_POINTER equ 08h
    SYMSTOREOPT_ALT_INDEX equ 10h
    SYMSTOREOPT_UNICODE equ 20h
    SYMSTOREOPT_PASS_IF_EXISTS equ 40h
    ifdef DBGHELP_TRANSLATE_TCHAR
      SymInitialize equ <SymInitializeW>
      SymAddSymbol equ <SymAddSymbolW>
      SymDeleteSymbol equ <SymDeleteSymbolW>
      SearchTreeForFile equ <SearchTreeForFileW>
      UnDecorateSymbolName equ <UnDecorateSymbolNameW>
      SymGetLineFromName64 equ <SymGetLineFromNameW64>
      SymGetLineFromAddr64 equ <SymGetLineFromAddrW64>
      SymGetLineFromInlineContext equ <SymGetLineFromInlineContextW>
      SymGetLineNext64 equ <SymGetLineNextW64>
      SymGetLinePrev64 equ <SymGetLinePrevW64>
      SymFromName equ <SymFromNameW>
      SymFindExecutableImage equ <SymFindExecutableImageW>
      FindExecutableImageEx equ <FindExecutableImageExW>
      SymSearch equ <SymSearchW>
      SymEnumLines equ <SymEnumLinesW>
      SymEnumSourceLines equ <SymEnumSourceLinesW>
      SymGetTypeFromName equ <SymGetTypeFromNameW>
      SymEnumSymbolsForAddr equ <SymEnumSymbolsForAddrW>
      SymFromAddr equ <SymFromAddrW>
      SymFromInlineContext equ <SymFromInlineContextW>
      SymMatchString equ <SymMatchStringW>
      SymEnumSourceFiles equ <SymEnumSourceFilesW>
      SymEnumSymbols equ <SymEnumSymbolsW>
      SymEnumSymbolsEx equ <SymEnumSymbolsExW>
      SymLoadModuleEx equ <SymLoadModuleExW>
      SymSetSearchPath equ <SymSetSearchPathW>
      SymGetSearchPath equ <SymGetSearchPathW>
      EnumDirTree equ <EnumDirTreeW>
      SymFromToken equ <SymFromTokenW>
      SymFromIndex equ <SymFromIndexW>
      SymGetScope equ <SymGetScopeW>
      SymNext equ <SymNextW>
      SymPrev equ <SymPrevW>
      SymEnumTypes equ <SymEnumTypesW>
      SymEnumTypesByName equ <SymEnumTypesByNameW>
      SymRegisterCallback64 equ <SymRegisterCallbackW64>
      SymFindDebugInfoFile equ <SymFindDebugInfoFileW>
      FindDebugInfoFileEx equ <FindDebugInfoFileExW>
      SymFindFileInPath equ <SymFindFileInPathW>
      SymEnumerateModules64 equ <SymEnumerateModulesW64>
      SymSetHomeDirectory equ <SymSetHomeDirectoryW>
      SymGetHomeDirectory equ <SymGetHomeDirectoryW>
      SymGetSourceFile equ <SymGetSourceFileW>
      SymGetSourceFileToken equ <SymGetSourceFileTokenW>
      SymGetSourceFileFromToken equ <SymGetSourceFileFromTokenW>
      SymGetSourceVarFromToken equ <SymGetSourceVarFromTokenW>
      SymGetSourceFileToken equ <SymGetSourceFileTokenW>
      SymGetFileLineOffsets64 equ <SymGetFileLineOffsetsW64>
      SymFindFileInPath equ <SymFindFileInPathW>
      SymMatchFileName equ <SymMatchFileNameW>
      SymGetSourceFileFromToken equ <SymGetSourceFileFromTokenW>
      SymGetSourceVarFromToken equ <SymGetSourceVarFromTokenW>
      SymGetModuleInfo64 equ <SymGetModuleInfoW64>
      SymAddSourceStream equ <SymAddSourceStreamW>
      SymSrvIsStore equ <SymSrvIsStoreW>
      SymSrvDeltaName equ <SymSrvDeltaNameW>
      SymSrvGetSupplement equ <SymSrvGetSupplementW>
      SymSrvStoreSupplement equ <SymSrvStoreSupplementW>
      SymSrvGetFileIndexes equ <SymSrvGetFileIndexes>
      SymSrvGetFileIndexString equ <SymSrvGetFileIndexStringW>
      SymSrvStoreFile equ <SymSrvStoreFileW>
      SymGetSymbolFile equ <SymGetSymbolFileW>
      EnumerateLoadedModules64 equ <EnumerateLoadedModulesW64>
      EnumerateLoadedModulesEx equ <EnumerateLoadedModulesExW>
      SymSrvGetFileIndexInfo equ <SymSrvGetFileIndexInfoW>
      IMAGEHLP_LINE64 equ <IMAGEHLP_LINEW64>
      PIMAGEHLP_LINE64 equ <PIMAGEHLP_LINEW64>
      SYMBOL_INFO equ <SYMBOL_INFOW>
      PSYMBOL_INFO equ <PSYMBOL_INFOW>
      SYMBOL_INFO_PACKAGE equ <SYMBOL_INFO_PACKAGEW>
      PSYMBOL_INFO_PACKAGE equ <PSYMBOL_INFO_PACKAGEW>
      FIND_EXE_FILE_CALLBACK equ <FIND_EXE_FILE_CALLBACKW>
      PFIND_EXE_FILE_CALLBACK equ <PFIND_EXE_FILE_CALLBACKW>
      SYM_ENUMERATESYMBOLS_CALLBACK equ <SYM_ENUMERATESYMBOLS_CALLBACKW>
      PSYM_ENUMERATESYMBOLS_CALLBACK equ <PSYM_ENUMERATESYMBOLS_CALLBACKW>
      SRCCODEINFO equ <SRCCODEINFOW>
      PSRCCODEINFO equ <PSRCCODEINFOW>
      SOURCEFILE equ <SOURCEFILEW>
      PSOURCEFILE equ <PSOURCEFILEW>
      SYM_ENUMSOURECFILES_CALLBACK equ <SYM_ENUMSOURCEFILES_CALLBACKW>
      PSYM_ENUMSOURCEFILES_CALLBACK equ <PSYM_ENUMSOURECFILES_CALLBACKW>
      IMAGEHLP_CBA_EVENT equ <IMAGEHLP_CBA_EVENTW>
      PIMAGEHLP_CBA_EVENT equ <PIMAGEHLP_CBA_EVENTW>
      PENUMDIRTREE_CALLBACK equ <PENUMDIRTREE_CALLBACKW>
      IMAGEHLP_DEFERRED_SYMBOL_LOAD64 equ <IMAGEHLP_DEFERRED_SYMBOL_LOADW64>
      PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 equ <PIMAGEHLP_DEFERRED_SYMBOL_LOADW64>
      PFIND_DEBUG_FILE_CALLBACK equ <PFIND_DEBUG_FILE_CALLBACKW>
      PFINDFILEINPATHCALLBACK equ <PFINDFILEINPATHCALLBACKW>
      IMAGEHLP_MODULE64 equ <IMAGEHLP_MODULEW64>
      PIMAGEHLP_MODULE64 equ <PIMAGEHLP_MODULEW64>
      SYMSRV_INDEX_INFO equ <SYMSRV_INDEX_INFOW>
      PSYMSRV_INDEX_INFO equ <PSYMSRV_INDEX_INFOW>
      PSYMBOLSERVERPROC equ <PSYMBOLSERVERPROCW>
      PSYMBOLSERVERPINGPROC equ <PSYMBOLSERVERPINGPROCW>
    endif
    @DefProto DllImport, FindFileInPath, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :PVOID, :DWORD, :DWORD, :DWORD, :PSTR>, 32
    @DefProto DllImport, FindFileInSearchPath, WIN_STD_CALL_CONV,, <:HANDLE, :PCSTR, :PCSTR, :DWORD, :DWORD, :DWORD, :PSTR>, 28
    @DefProto DllImport, SymEnumSym, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PSYM_ENUMERATESYMBOLS_CALLBACK, :PVOID>, 20
    @DefProto DllImport, SymEnumerateSymbols64, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PSYM_ENUMSYMBOLS_CALLBACK64, :PVOID>, 20
    @DefProto DllImport, SymEnumerateSymbolsW64, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG64, :PSYM_ENUMSYMBOLS_CALLBACK64W, :PVOID>, 20
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymEnumerateSymbols equ <SymEnumerateSymbols64>
      SymEnumerateSymbolsW equ <SymEnumerateSymbolsW64>
    else
      @DefProto DllImport, SymEnumerateSymbols, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG, :PSYM_ENUMSYMBOLS_CALLBACK, :PVOID>, 16
      @DefProto DllImport, SymEnumerateSymbolsW, WIN_STD_CALL_CONV,, <:HANDLE, :ULONG, :PSYM_ENUMSYMBOLS_CALLBACKW, :PVOID>, 16
    endif
    @DefProto DllImport, SymLoadModule64, WIN_STD_CALL_CONV,, <:HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD64, :DWORD>, 28
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymLoadModule equ <SymLoadModule64>
    else
      @DefProto DllImport, SymLoadModule, WIN_STD_CALL_CONV,, <:HANDLE, :HANDLE, :PCSTR, :PCSTR, :DWORD, :DWORD>, 24
    endif
    @DefProto DllImport, SymGetSymNext64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOL64>, 8
    @DefProto DllImport, SymGetSymNextW64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOLW64>, 8
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetSymNext equ <SymGetSymNext64>
      SymGetSymNextW equ <SymGetSymNextW64>
    else
      @DefProto DllImport, SymGetSymNext, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOL>, 8
      @DefProto DllImport, SymGetSymNextW, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOLW>, 8
    endif
    @DefProto DllImport, SymGetSymPrev64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOL64>, 8
    @DefProto DllImport, SymGetSymPrevW64, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOLW64>, 8
    if  not Defined(_IMAGEHLP_SOURCE_) and Defined(_IMAGEHLP64)
      SymGetSymPrev equ <SymGetSymPrev64>
      SymGetSymPrevW equ <SymGetSymPrevW64>
    else
      @DefProto DllImport, SymGetSymPrev, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOL>, 8
      @DefProto DllImport, SymGetSymPrevW, WIN_STD_CALL_CONV,, <:HANDLE, :PIMAGEHLP_SYMBOLW>, 8
    endif
;    TYPE_LPCALL_BACK_USER_INTERRUPT_ROUTINE typedef proto WIN_STD_CALL_CONV :VOID
;    LPCALL_BACK_USER_INTERRUPT_ROUTINE typedef ptr TYPE_LPCALL_BACK_USER_INTERRUPT_ROUTINE
    DBGHELP_DATA_REPORT_STRUCT struct
      pBinPathNonExist PCWSTR ?
      pSymbolPathNonExist PCWSTR ?
    DBGHELP_DATA_REPORT_STRUCT ends
    PDBGHELP_DATA_REPORT_STRUCT typedef ptr DBGHELP_DATA_REPORT_STRUCT
    
;    @DefProto DllImport, SetCheckUserInterruptShared, WIN_STD_CALL_CONV,, <:LPCALL_BACK_USER_INTERRUPT_ROUTINE>, 4
    @DefProto DllImport, GetCheckUserInterruptShared, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, GetSymLoadError, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SetSymLoadError, WIN_STD_CALL_CONV,, <:DWORD>, 4
    @DefProto DllImport, ReportSymbolLoadSummary, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PDBGHELP_DATA_REPORT_STRUCT>, 12
    @DefProto DllImport, RemoveInvalidModuleList, WIN_STD_CALL_CONV,, <:HANDLE>, 4
    SYMF_OMAP_GENERATED equ 00000001h
    SYMF_OMAP_MODIFIED equ 00000002h
    SYMF_REGISTER equ 00000008h
    SYMF_REGREL equ 00000010h
    SYMF_FRAMEREL equ 00000020h
    SYMF_PARAMETER equ 00000040h
    SYMF_LOCAL equ 00000080h
    SYMF_CONSTANT equ 00000100h
    SYMF_EXPORT equ 00000200h
    SYMF_FORWARDER equ 00000400h
    SYMF_FUNCTION equ 00000800h
    SYMF_VIRTUAL equ 00001000h
    SYMF_THUNK equ 00002000h
    SYMF_TLSREL equ 00004000h
    IMAGEHLP_SYMBOL_INFO_VALUEPRESENT equ 1
    IMAGEHLP_SYMBOL_INFO_REGISTER equ <SYMF_REGISTER>
    IMAGEHLP_SYMBOL_INFO_REGRELATIVE equ <SYMF_REGREL>
    IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE equ <SYMF_FRAMEREL>
    IMAGEHLP_SYMBOL_INFO_PARAMETER equ <SYMF_PARAMETER>
    IMAGEHLP_SYMBOL_INFO_LOCAL equ <SYMF_LOCAL>
    IMAGEHLP_SYMBOL_INFO_CONSTANT equ <SYMF_CONSTANT>
    IMAGEHLP_SYMBOL_FUNCTION equ <SYMF_FUNCTION>
    IMAGEHLP_SYMBOL_VIRTUAL equ <SYMF_VIRTUAL>
    IMAGEHLP_SYMBOL_THUNK equ <SYMF_THUNK>
    IMAGEHLP_SYMBOL_INFO_TLSRELATIVE equ <SYMF_TLSREL>
    @DefProto DllImport, RangeMapCreate, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, RangeMapFree, WIN_STD_CALL_CONV,, <:PVOID>, 4
    IMAGEHLP_RMAP_MAPPED_FLAT equ 00000001h
    IMAGEHLP_RMAP_BIG_ENDIAN equ 00000002h
    IMAGEHLP_RMAP_IGNORE_MISCOMPARE equ 00000004h
    IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS equ 20000000h
    IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS equ 40000000h
    IMAGEHLP_RMAP_FIXUP_IMAGEBASE equ 80000000h
    @DefProto DllImport, RangeMapAddPeImageSections, WIN_STD_CALL_CONV,, <:PVOID, :PCWSTR, :PVOID, :DWORD, :DWORD64, :DWORD64, :DWORD>, 36
    @DefProto DllImport, RangeMapRemove, WIN_STD_CALL_CONV,, <:PVOID, :DWORD64>, 12
    @DefProto DllImport, RangeMapRead, WIN_STD_CALL_CONV,, <:PVOID, :DWORD64, :PVOID, :DWORD, :DWORD, :PDWORD>, 28
    @DefProto DllImport, RangeMapWrite, WIN_STD_CALL_CONV,, <:PVOID, :DWORD64, :PVOID, :DWORD, :DWORD, :PDWORD>, 28
    include poppack.inc
    include minidumpapiset.inc
  endif
endif

