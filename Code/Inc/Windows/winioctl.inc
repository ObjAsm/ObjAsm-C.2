;Include file created by h2incX, Version B.01.01, 10/09/2018 22:03
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: '\ObjAsm\Projects\h2IncX\header\winioctl.h', last modified: 19/04/2018 10:44
;Creation parameters: 

ifdef DEFINE_GUID
  ifndef FAR
    ifdef _WIN32
      ;FAR equ <>
    else
      ;[...]
    endif
  endif
  ifndef __WRAPPED__
    __WRAPPED__ equ <>
  endif
  DEFINE_GUID GUID_DEVINTERFACE_DISK, 53f56307h, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_CDROM, 53f56308h, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_PARTITION, 53f5630ah, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_TAPE, 53f5630bh, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_WRITEONCEDISK, 53f5630ch, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_VOLUME, 53f5630dh, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_MEDIUMCHANGER, 53f56310h, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_FLOPPY, 53f56311h, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_CDCHANGER, 53f56312h, 0b6bfh, 11d0h, 94h, 0f2h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_STORAGEPORT, 2accfe60h, 0c130h, 11d2h, 0b0h, 82h, 00h, 0a0h, 0c9h, 1eh, 0fbh, 8bh
  DEFINE_GUID GUID_DEVINTERFACE_VMLUN, 6f416619h, 9f29h, 42a5h, 0b2h, 0bh, 37h, 0e2h, 19h, 0cah, 02h, 0b0h
  DEFINE_GUID GUID_DEVINTERFACE_SES, 1790c9ech, 47d5h, 4df3h, 0b5h, 0afh, 9ah, 0dfh, 3ch, 0f2h, 3eh, 48h
  WDI_STORAGE_PREDICT_FAILURE_DPS_GUID equ { 0e9f2d03ah, 747ch, 41c2h, { 0bbh, 9ah, 02h, 0c6h, 2bh, 6dh, 5fh, 0cbh } } ;
  DEFINE_GUID GUID_DEVINTERFACE_SERVICE_VOLUME, 6ead3d82h, 25ech, 46bch, 0b7h, 0fdh, 0c1h, 0f0h, 0dfh, 8fh, 50h, 37h
  DEFINE_GUID GUID_DEVINTERFACE_HIDDEN_VOLUME, 7f108a28h, 9833h, 4b3bh, 0b7h, 80h, 2ch, 6bh, 5fh, 0a5h, 0c0h, 62h
  DEFINE_GUID GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB, 27447c21h, 0bcc3h, 4d07h, 0a0h, 5bh, 0a3h, 39h, 5bh, 0b4h, 0eeh, 0e7h
  DEFINE_GUID GUID_DEVINTERFACE_COMPORT, 86E0D1E0h, 8089h, 11D0h, 9Ch, 0E4h, 08h, 00h, 3Eh, 30h, 1Fh, 73h
  DEFINE_GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR, 4D36E978h, 0E325h, 11CEh, 0BFh, 0C1h, 08h, 00h, 2Bh, 0E1h, 03h, 18h
  ifndef __WRAPPED__
    __WRAPPED__ equ <>
  endif
  DiskClassGuid equ <GUID_DEVINTERFACE_DISK>
  CdRomClassGuid equ <GUID_DEVINTERFACE_CDROM>
  PartitionClassGuid equ <GUID_DEVINTERFACE_PARTITION>
  TapeClassGuid equ <GUID_DEVINTERFACE_TAPE>
  WriteOnceDiskClassGuid equ <GUID_DEVINTERFACE_WRITEONCEDISK>
  VolumeClassGuid equ <GUID_DEVINTERFACE_VOLUME>
  MediumChangerClassGuid equ <GUID_DEVINTERFACE_MEDIUMCHANGER>
  FloppyClassGuid equ <GUID_DEVINTERFACE_FLOPPY>
  CdChangerClassGuid equ <GUID_DEVINTERFACE_CDCHANGER>
  StoragePortClassGuid equ <GUID_DEVINTERFACE_STORAGEPORT>
  HiddenVolumeClassGuid equ <GUID_DEVINTERFACE_HIDDEN_VOLUME>
  GUID_CLASS_COMPORT equ <GUID_DEVINTERFACE_COMPORT>
  GUID_SERENUM_BUS_ENUMERATOR equ <GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR>
endif
ifdef DEFINE_DEVPROPKEY
  ifndef __WRAPPED__
    __WRAPPED__ equ <>
  endif
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Portable, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :2
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Removable_Media, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :3
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_System_Critical, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :4
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Disk_Number, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :5
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Partition_Number, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :6
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Mbr_Type, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :7
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Gpt_Type, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :8
  DEFINE_DEVPROPKEY proto WIN_STD_CALL_CONV :DEVPKEY_Storage_Gpt_Name, :4d1ebee8h, :803h, :4774h, :98h, :42h, :0b7h, :7dh, :0b5h, :2h, :65h, :0e9h, :9
endif
ifndef _WINIOCTL_
  _WINIOCTL_ equ <>
  if _MSC_VER ge 1200
  endif
  ifndef _DEVIOCTL_
    _DEVIOCTL_ equ <>
    DEVICE_TYPE equ <DWORD>
    FILE_DEVICE_BEEP equ 00000001h
    FILE_DEVICE_CD_ROM equ 00000002h
    FILE_DEVICE_CD_ROM_FILE_SYSTEM equ 00000003h
    FILE_DEVICE_CONTROLLER equ 00000004h
    FILE_DEVICE_DATALINK equ 00000005h
    FILE_DEVICE_DFS equ 00000006h
    FILE_DEVICE_DISK equ 00000007h
    FILE_DEVICE_DISK_FILE_SYSTEM equ 00000008h
    FILE_DEVICE_FILE_SYSTEM equ 00000009h
    FILE_DEVICE_INPORT_PORT equ 0000000ah
    FILE_DEVICE_KEYBOARD equ 0000000bh
    FILE_DEVICE_MAILSLOT equ 0000000ch
    FILE_DEVICE_MIDI_IN equ 0000000dh
    FILE_DEVICE_MIDI_OUT equ 0000000eh
    FILE_DEVICE_MOUSE equ 0000000fh
    FILE_DEVICE_MULTI_UNC_PROVIDER equ 00000010h
    FILE_DEVICE_NAMED_PIPE equ 00000011h
    FILE_DEVICE_NETWORK equ 00000012h
    FILE_DEVICE_NETWORK_BROWSER equ 00000013h
    FILE_DEVICE_NETWORK_FILE_SYSTEM equ 00000014h
    FILE_DEVICE_NULL equ 00000015h
    FILE_DEVICE_PARALLEL_PORT equ 00000016h
    FILE_DEVICE_PHYSICAL_NETCARD equ 00000017h
    FILE_DEVICE_PRINTER equ 00000018h
    FILE_DEVICE_SCANNER equ 00000019h
    FILE_DEVICE_SERIAL_MOUSE_PORT equ 0000001ah
    FILE_DEVICE_SERIAL_PORT equ 0000001bh
    FILE_DEVICE_SCREEN equ 0000001ch
    FILE_DEVICE_SOUND equ 0000001dh
    FILE_DEVICE_STREAMS equ 0000001eh
    FILE_DEVICE_TAPE equ 0000001fh
    FILE_DEVICE_TAPE_FILE_SYSTEM equ 00000020h
    FILE_DEVICE_TRANSPORT equ 00000021h
    FILE_DEVICE_UNKNOWN equ 00000022h
    FILE_DEVICE_VIDEO equ 00000023h
    FILE_DEVICE_VIRTUAL_DISK equ 00000024h
    FILE_DEVICE_WAVE_IN equ 00000025h
    FILE_DEVICE_WAVE_OUT equ 00000026h
    FILE_DEVICE_8042_PORT equ 00000027h
    FILE_DEVICE_NETWORK_REDIRECTOR equ 00000028h
    FILE_DEVICE_BATTERY equ 00000029h
    FILE_DEVICE_BUS_EXTENDER equ 0000002ah
    FILE_DEVICE_MODEM equ 0000002bh
    FILE_DEVICE_VDM equ 0000002ch
    FILE_DEVICE_MASS_STORAGE equ 0000002dh
    FILE_DEVICE_SMB equ 0000002eh
    FILE_DEVICE_KS equ 0000002fh
    FILE_DEVICE_CHANGER equ 00000030h
    FILE_DEVICE_SMARTCARD equ 00000031h
    FILE_DEVICE_ACPI equ 00000032h
    FILE_DEVICE_DVD equ 00000033h
    FILE_DEVICE_FULLSCREEN_VIDEO equ 00000034h
    FILE_DEVICE_DFS_FILE_SYSTEM equ 00000035h
    FILE_DEVICE_DFS_VOLUME equ 00000036h
    FILE_DEVICE_SERENUM equ 00000037h
    FILE_DEVICE_TERMSRV equ 00000038h
    FILE_DEVICE_KSEC equ 00000039h
    FILE_DEVICE_FIPS equ 0000003Ah
    FILE_DEVICE_INFINIBAND equ 0000003Bh
    FILE_DEVICE_VMBUS equ 0000003Eh
    FILE_DEVICE_CRYPT_PROVIDER equ 0000003Fh
    FILE_DEVICE_WPD equ 00000040h
    FILE_DEVICE_BLUETOOTH equ 00000041h
    FILE_DEVICE_MT_COMPOSITE equ 00000042h
    FILE_DEVICE_MT_TRANSPORT equ 00000043h
    FILE_DEVICE_BIOMETRIC equ 00000044h
    FILE_DEVICE_PMI equ 00000045h
    FILE_DEVICE_EHSTOR equ 00000046h
    FILE_DEVICE_DEVAPI equ 00000047h
    FILE_DEVICE_GPIO equ 00000048h
    FILE_DEVICE_USBEX equ 00000049h
    FILE_DEVICE_CONSOLE equ 00000050h
    FILE_DEVICE_NFP equ 00000051h
    FILE_DEVICE_SYSENV equ 00000052h
    FILE_DEVICE_VIRTUAL_BLOCK equ 00000053h
    FILE_DEVICE_POINT_OF_SERVICE equ 00000054h
    FILE_DEVICE_STORAGE_REPLICATION equ 00000055h
    FILE_DEVICE_TRUST_ENV equ 00000056h
    FILE_DEVICE_UCM equ 00000057h
    FILE_DEVICE_UCMTCPCI equ 00000058h
    FILE_DEVICE_PERSISTENT_MEMORY equ 00000059h
    FILE_DEVICE_NVDIMM equ 0000005ah
    FILE_DEVICE_HOLOGRAPHIC equ 0000005bh
    FILE_DEVICE_SDFXHCI equ 0000005ch
    CTL_CODE macro DeviceType, Function, Method_, Access
      exitm <(((DeviceType) shl 16) or ((Access) shl 14) or ((Function) shl 2) or (Method_))>
    endm
    DEVICE_TYPE_FROM_CTL_CODE macro ctrlCode
      exitm <(((ctrlCode and 0ffff0000h)) shr 16)>
    endm
    METHOD_FROM_CTL_CODE macro ctrlCode
      exitm <((ctrlCode and 3))>
    endm
    METHOD_BUFFERED equ 0
    METHOD_IN_DIRECT equ 1
    METHOD_OUT_DIRECT equ 2
    METHOD_NEITHER equ 3
    METHOD_DIRECT_TO_HARDWARE equ <METHOD_IN_DIRECT>
    METHOD_DIRECT_FROM_HARDWARE equ <METHOD_OUT_DIRECT>
    FILE_ANY_ACCESS equ 0
    FILE_SPECIAL_ACCESS equ <(FILE_ANY_ACCESS)>
    FILE_READ_ACCESS equ 0001h
    FILE_WRITE_ACCESS equ 0002h
  endif
  ifndef __WRAPPED__
    __WRAPPED__ equ <>
  endif
  ifndef _NTDDSTOR_H_
    _NTDDSTOR_H_ equ <>
    if Defined(__cplusplus) and  not Defined(__ALT_GENERATOR__)
      ;[...]
    endif
    if _MSC_VER ge 1200
    endif
    IOCTL_STORAGE_BASE equ <FILE_DEVICE_MASS_STORAGE>
    IOCTL_STORAGE_CHECK_VERIFY equ CTL_CODE(IOCTL_STORAGE_BASE, 0200h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_CHECK_VERIFY2 equ CTL_CODE(IOCTL_STORAGE_BASE, 0200h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_MEDIA_REMOVAL equ CTL_CODE(IOCTL_STORAGE_BASE, 0201h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_EJECT_MEDIA equ CTL_CODE(IOCTL_STORAGE_BASE, 0202h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_LOAD_MEDIA equ CTL_CODE(IOCTL_STORAGE_BASE, 0203h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_LOAD_MEDIA2 equ CTL_CODE(IOCTL_STORAGE_BASE, 0203h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_RESERVE equ CTL_CODE(IOCTL_STORAGE_BASE, 0204h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_RELEASE equ CTL_CODE(IOCTL_STORAGE_BASE, 0205h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_FIND_NEW_DEVICES equ CTL_CODE(IOCTL_STORAGE_BASE, 0206h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_EJECTION_CONTROL equ CTL_CODE(IOCTL_STORAGE_BASE, 0250h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_MCN_CONTROL equ CTL_CODE(IOCTL_STORAGE_BASE, 0251h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_MEDIA_TYPES equ CTL_CODE(IOCTL_STORAGE_BASE, 0300h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_MEDIA_TYPES_EX equ CTL_CODE(IOCTL_STORAGE_BASE, 0301h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER equ CTL_CODE(IOCTL_STORAGE_BASE, 0304h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_HOTPLUG_INFO equ CTL_CODE(IOCTL_STORAGE_BASE, 0305h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_SET_HOTPLUG_INFO equ CTL_CODE(IOCTL_STORAGE_BASE, 0306h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_RESET_BUS equ CTL_CODE(IOCTL_STORAGE_BASE, 0400h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_RESET_DEVICE equ CTL_CODE(IOCTL_STORAGE_BASE, 0401h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_BREAK_RESERVATION equ CTL_CODE(IOCTL_STORAGE_BASE, 0405h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_PERSISTENT_RESERVE_IN equ CTL_CODE(IOCTL_STORAGE_BASE, 0406h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_PERSISTENT_RESERVE_OUT equ CTL_CODE(IOCTL_STORAGE_BASE, 0407h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_GET_DEVICE_NUMBER equ CTL_CODE(IOCTL_STORAGE_BASE, 0420h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_DEVICE_NUMBER_EX equ CTL_CODE(IOCTL_STORAGE_BASE, 0421h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_PREDICT_FAILURE equ CTL_CODE(IOCTL_STORAGE_BASE, 0440h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG equ CTL_CODE(IOCTL_STORAGE_BASE, 0441h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_COUNTERS equ CTL_CODE(IOCTL_STORAGE_BASE, 442h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_READ_CAPACITY equ CTL_CODE(IOCTL_STORAGE_BASE, 0450h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_GET_DEVICE_TELEMETRY equ CTL_CODE(IOCTL_STORAGE_BASE, 0470h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY equ CTL_CODE(IOCTL_STORAGE_BASE, 0471h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS equ CTL_CODE(IOCTL_STORAGE_BASE, 0472h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW equ CTL_CODE(IOCTL_STORAGE_BASE, 0473h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD equ CTL_CODE(IOCTL_STORAGE_BASE, 0480h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_PROTOCOL_COMMAND equ CTL_CODE(IOCTL_STORAGE_BASE, 04F0h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_QUERY_PROPERTY equ CTL_CODE(IOCTL_STORAGE_BASE, 0500h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES equ CTL_CODE(IOCTL_STORAGE_BASE, 0501h, METHOD_BUFFERED, FILE_WRITE_ACCESS)
    IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES equ CTL_CODE(IOCTL_STORAGE_BASE, 0502h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_SET_PROPERTY equ CTL_CODE(IOCTL_STORAGE_BASE, 0503h, METHOD_BUFFERED, FILE_WRITE_ACCESS)
    IOCTL_STORAGE_REINITIALIZE_MEDIA equ CTL_CODE(IOCTL_STORAGE_BASE, 0590h, METHOD_BUFFERED, FILE_WRITE_ACCESS)
    IOCTL_STORAGE_GET_BC_PROPERTIES equ CTL_CODE(IOCTL_STORAGE_BASE, 0600h, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_STORAGE_ALLOCATE_BC_STREAM equ CTL_CODE(IOCTL_STORAGE_BASE, 0601h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_FREE_BC_STREAM equ CTL_CODE(IOCTL_STORAGE_BASE, 0602h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT equ CTL_CODE(IOCTL_STORAGE_BASE, 0620h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK equ CTL_CODE(IOCTL_STORAGE_BASE, 0621h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK equ CTL_CODE(IOCTL_STORAGE_BASE, 0622h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    OBSOLETE_IOCTL_STORAGE_RESET_BUS equ CTL_CODE(IOCTL_STORAGE_BASE, 0400h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    OBSOLETE_IOCTL_STORAGE_RESET_DEVICE equ CTL_CODE(IOCTL_STORAGE_BASE, 0401h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_FIRMWARE_GET_INFO equ CTL_CODE(IOCTL_STORAGE_BASE, 0700h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_FIRMWARE_DOWNLOAD equ CTL_CODE(IOCTL_STORAGE_BASE, 0701h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_FIRMWARE_ACTIVATE equ CTL_CODE(IOCTL_STORAGE_BASE, 0702h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_ENABLE_IDLE_POWER equ CTL_CODE(IOCTL_STORAGE_BASE, 0720h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_IDLE_POWERUP_REASON equ CTL_CODE(IOCTL_STORAGE_BASE, 0721h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_POWER_ACTIVE equ CTL_CODE(IOCTL_STORAGE_BASE, 0722h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_POWER_IDLE equ CTL_CODE(IOCTL_STORAGE_BASE, 0723h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_EVENT_NOTIFICATION equ CTL_CODE(IOCTL_STORAGE_BASE, 0724h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_DEVICE_POWER_CAP equ CTL_CODE(IOCTL_STORAGE_BASE, 0725h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_RPMB_COMMAND equ CTL_CODE(IOCTL_STORAGE_BASE, 0726h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT equ CTL_CODE(IOCTL_STORAGE_BASE, 0727h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_STORAGE_DIAGNOSTIC equ CTL_CODE(IOCTL_STORAGE_BASE, 0728h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS equ CTL_CODE(IOCTL_STORAGE_BASE, 0729h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE equ CTL_CODE(IOCTL_STORAGE_BASE, 0730h, METHOD_BUFFERED, FILE_ANY_ACCESS)
    STORAGE_HOTPLUG_INFO struct
      Size_ DWORD ?
      MediaRemovable BOOLEAN ?
      MediaHotplug BOOLEAN ?
      DeviceHotplug BOOLEAN ?
      WriteCacheEnableOverride BOOLEAN ?
    STORAGE_HOTPLUG_INFO ends
    _STORAGE_HOTPLUG_INFO typedef STORAGE_HOTPLUG_INFO
    PSTORAGE_HOTPLUG_INFO typedef ptr STORAGE_HOTPLUG_INFO
    
    STORAGE_DEVICE_NUMBER struct
      DeviceType DEVICE_TYPE ?
      DeviceNumber DWORD ?
      PartitionNumber DWORD ?
    STORAGE_DEVICE_NUMBER ends
    _STORAGE_DEVICE_NUMBER typedef STORAGE_DEVICE_NUMBER
    PSTORAGE_DEVICE_NUMBER typedef ptr STORAGE_DEVICE_NUMBER
    
    STORAGE_DEVICE_NUMBERS struct
      NumberOfDevices DWORD ?
      Devices STORAGE_DEVICE_NUMBER ANYSIZE_ARRAY dup (<>)
    STORAGE_DEVICE_NUMBERS ends
    _STORAGE_DEVICE_NUMBERS typedef STORAGE_DEVICE_NUMBERS
    PSTORAGE_DEVICE_NUMBERS typedef ptr STORAGE_DEVICE_NUMBERS
    
    STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT equ 1h
    STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID equ 2h
    STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID equ 4h
    STORAGE_DEVICE_NUMBER_EX struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      DeviceType DEVICE_TYPE ?
      DeviceNumber DWORD ?
      DeviceGuid GUID <>
      PartitionNumber DWORD ?
    STORAGE_DEVICE_NUMBER_EX ends
    _STORAGE_DEVICE_NUMBER_EX typedef STORAGE_DEVICE_NUMBER_EX
    PSTORAGE_DEVICE_NUMBER_EX typedef ptr STORAGE_DEVICE_NUMBER_EX
    
    STORAGE_BUS_RESET_REQUEST struct
      PathId BYTE ?
    STORAGE_BUS_RESET_REQUEST ends
    _STORAGE_BUS_RESET_REQUEST typedef STORAGE_BUS_RESET_REQUEST
    PSTORAGE_BUS_RESET_REQUEST typedef ptr STORAGE_BUS_RESET_REQUEST
    
    STORAGE_BREAK_RESERVATION_REQUEST struct
      Length_ DWORD ?
      _unused BYTE ?
      PathId BYTE ?
      TargetId BYTE ?
      Lun BYTE ?
    STORAGE_BREAK_RESERVATION_REQUEST ends
    PSTORAGE_BREAK_RESERVATION_REQUEST typedef ptr STORAGE_BREAK_RESERVATION_REQUEST
    
    PREVENT_MEDIA_REMOVAL struct
      PreventMediaRemoval BOOLEAN ?
    PREVENT_MEDIA_REMOVAL ends
    _PREVENT_MEDIA_REMOVAL typedef PREVENT_MEDIA_REMOVAL
    PPREVENT_MEDIA_REMOVAL typedef ptr PREVENT_MEDIA_REMOVAL
    
    CLASS_MEDIA_CHANGE_CONTEXT struct
      MediaChangeCount DWORD ?
      NewState DWORD ?
    CLASS_MEDIA_CHANGE_CONTEXT ends
    _CLASS_MEDIA_CHANGE_CONTEXT typedef CLASS_MEDIA_CHANGE_CONTEXT
    PCLASS_MEDIA_CHANGE_CONTEXT typedef ptr CLASS_MEDIA_CHANGE_CONTEXT
    
    ifndef __WRAPPED__
      __WRAPPED__ equ <>
    endif
    TAPE_STATISTICS struct
      Version DWORD ?
      Flags DWORD ?
      RecoveredWrites LARGE_INTEGER <>
      UnrecoveredWrites LARGE_INTEGER <>
      RecoveredReads LARGE_INTEGER <>
      UnrecoveredReads LARGE_INTEGER <>
      CompressionRatioReads BYTE ?
      CompressionRatioWrites BYTE ?
    TAPE_STATISTICS ends
    _TAPE_STATISTICS typedef TAPE_STATISTICS
    PTAPE_STATISTICS typedef ptr TAPE_STATISTICS
    
    RECOVERED_WRITES_VALID equ 00000001h
    UNRECOVERED_WRITES_VALID equ 00000002h
    RECOVERED_READS_VALID equ 00000004h
    UNRECOVERED_READS_VALID equ 00000008h
    WRITE_COMPRESSION_INFO_VALID equ 00000010h
    READ_COMPRESSION_INFO_VALID equ 00000020h
    TAPE_GET_STATISTICS struct
      Operation DWORD ?
    TAPE_GET_STATISTICS ends
    _TAPE_GET_STATISTICS typedef TAPE_GET_STATISTICS
    PTAPE_GET_STATISTICS typedef ptr TAPE_GET_STATISTICS
    
    TAPE_RETURN_STATISTICS equ 0
    TAPE_RETURN_ENV_INFO equ 1
    TAPE_RESET_STATISTICS equ 2
    STORAGE_MEDIA_TYPE typedef SDWORD
    DDS_4mm equ 20h
    MiniQic equ 1
    Travan equ 2
    QIC equ 3
    MP_8mm equ 4
    AME_8mm equ 5
    AIT1_8mm equ 6
    DLT equ 7
    NCTP equ 8
    IBM_3480 equ 9
    IBM_3490E equ 10
    IBM_Magstar_3590 equ 11
    IBM_Magstar_MP equ 12
    STK_DATA_D3 equ 13
    SONY_DTF equ 14
    DV_6mm equ 15
    DMI equ 16
    SONY_D2 equ 17
    CLEANER_CARTRIDGE equ 18
    CD_ROM equ 19
    CD_R equ 20
    CD_RW equ 21
    DVD_ROM equ 22
    DVD_R equ 23
    DVD_RW equ 24
    MO_3_RW equ 25
    MO_5_WO equ 26
    MO_5_RW equ 27
    MO_5_LIMDOW equ 28
    PC_5_WO equ 29
    PC_5_RW equ 30
    PD_5_RW equ 31
    ABL_5_WO equ 32
    PINNACLE_APEX_5_RW equ 33
    SONY_12_WO equ 34
    PHILIPS_12_WO equ 35
    HITACHI_12_WO equ 36
    CYGNET_12_WO equ 37
    KODAK_14_WO equ 38
    MO_NFR_525 equ 39
    NIKON_12_RW equ 40
    IOMEGA_ZIP equ 41
    IOMEGA_JAZ equ 42
    SYQUEST_EZ135 equ 43
    SYQUEST_EZFLYER equ 44
    SYQUEST_SYJET equ 45
    AVATAR_F2 equ 46
    MP2_8mm equ 47
    DST_S equ 48
    DST_M equ 49
    DST_L equ 50
    VXATape_1 equ 51
    VXATape_2 equ 52
    if (NTDDI_VERSION lt NTDDI_WINXP)
      STK_EAGLE equ 53
    else
      STK_9840 equ 54
    endif
    LTO_Ultrium equ 55
    LTO_Accelis equ 56
    DVD_RAM equ 57
    AIT_8mm equ 58
    ADR_1 equ 59
    ADR_2 equ 60
    STK_9940 equ 61
    SAIT equ 62
    VXATape equ 63
    _STORAGE_MEDIA_TYPE typedef STORAGE_MEDIA_TYPE
    PSTORAGE_MEDIA_TYPE typedef ptr STORAGE_MEDIA_TYPE
    
    MEDIA_ERASEABLE equ 00000001h
    MEDIA_WRITE_ONCE equ 00000002h
    MEDIA_READ_ONLY equ 00000004h
    MEDIA_READ_WRITE equ 00000008h
    MEDIA_WRITE_PROTECTED equ 00000100h
    MEDIA_CURRENTLY_MOUNTED equ 80000000h
    STORAGE_BUS_TYPE typedef SDWORD
    BusTypeUnknown equ 00h
    BusTypeScsi equ 1
    BusTypeAtapi equ 2
    BusTypeAta equ 3
    BusType1394 equ 4
    BusTypeSsa equ 5
    BusTypeFibre equ 6
    BusTypeUsb equ 7
    BusTypeRAID equ 8
    BusTypeiScsi equ 9
    BusTypeSas equ 10
    BusTypeSata equ 11
    BusTypeSd equ 12
    BusTypeMmc equ 13
    BusTypeVirtual equ 14
    BusTypeFileBackedVirtual equ 15
    BusTypeSpaces equ 16
    BusTypeNvme equ 17
    BusTypeSCM equ 18
    BusTypeUfs equ 19
    BusTypeMax equ 20
    BusTypeMaxReserved equ 7Fh
    _STORAGE_BUS_TYPE typedef STORAGE_BUS_TYPE
    PSTORAGE_BUS_TYPE typedef ptr STORAGE_BUS_TYPE
    
    SupportsDeviceSharing macro BusType
      exitm <((BusType == BusTypeScsi) or (BusType == BusTypeFibre) or (BusType == BusTypeiScsi) or (BusType == BusTypeSas) or (BusType == BusTypeSpaces))>
    endm
    DEVICE_MEDIA_INFO struct
      union DeviceSpecific
        struct DiskInfo
          Cylinders LARGE_INTEGER <>
          MediaType STORAGE_MEDIA_TYPE ?
          TracksPerCylinder DWORD ?
          SectorsPerTrack DWORD ?
          BytesPerSector DWORD ?
          NumberMediaSides DWORD ?
          MediaCharacteristics DWORD ?
        ends
        struct RemovableDiskInfo
          Cylinders LARGE_INTEGER <>
          MediaType STORAGE_MEDIA_TYPE ?
          TracksPerCylinder DWORD ?
          SectorsPerTrack DWORD ?
          BytesPerSector DWORD ?
          NumberMediaSides DWORD ?
          MediaCharacteristics DWORD ?
        ends
        struct TapeInfo
          MediaType STORAGE_MEDIA_TYPE ?
          MediaCharacteristics DWORD ?
          CurrentBlockSize DWORD ?
          BusType STORAGE_BUS_TYPE ?
          union BusSpecificData
            struct ScsiInformation
              MediumType BYTE ?
              DensityCode BYTE ?
            ends
          ends
        ends
      ends
    DEVICE_MEDIA_INFO ends
    _DEVICE_MEDIA_INFO typedef DEVICE_MEDIA_INFO
    PDEVICE_MEDIA_INFO typedef ptr DEVICE_MEDIA_INFO
    
    GET_MEDIA_TYPES struct
      DeviceType DWORD ?
      MediaInfoCount DWORD ?
      MediaInfo DEVICE_MEDIA_INFO 1 dup (<>)
    GET_MEDIA_TYPES ends
    _GET_MEDIA_TYPES typedef GET_MEDIA_TYPES
    PGET_MEDIA_TYPES typedef ptr GET_MEDIA_TYPES
    
    STORAGE_PREDICT_FAILURE struct
      PredictFailure DWORD ?
      VendorSpecific BYTE 512 dup (?)
    STORAGE_PREDICT_FAILURE ends
    _STORAGE_PREDICT_FAILURE typedef STORAGE_PREDICT_FAILURE
    PSTORAGE_PREDICT_FAILURE typedef ptr STORAGE_PREDICT_FAILURE
    
    STORAGE_FAILURE_PREDICTION_CONFIG struct
      Version DWORD ?
      Size_ DWORD ?
      Set BOOLEAN ?
      Enabled BOOLEAN ?
      Reserved WORD ?
    STORAGE_FAILURE_PREDICTION_CONFIG ends
    _STORAGE_FAILURE_PREDICTION_CONFIG typedef STORAGE_FAILURE_PREDICTION_CONFIG
    PSTORAGE_FAILURE_PREDICTION_CONFIG typedef ptr STORAGE_FAILURE_PREDICTION_CONFIG
    
    STORAGE_FAILURE_PREDICTION_CONFIG_V1 equ 1
    STORAGE_QUERY_TYPE typedef SDWORD
    PropertyStandardQuery equ 0
    PropertyExistsQuery equ 1
    PropertyMaskQuery equ 2
    PropertyQueryMaxDefined equ 3
    _STORAGE_QUERY_TYPE typedef STORAGE_QUERY_TYPE
    PSTORAGE_QUERY_TYPE typedef ptr STORAGE_QUERY_TYPE
    
    STORAGE_PROPERTY_ID typedef SDWORD
    StorageDeviceProperty equ 0
    StorageAdapterProperty equ 1
    StorageDeviceIdProperty equ 2
    StorageDeviceUniqueIdProperty equ 3
    StorageDeviceWriteCacheProperty equ 4
    StorageMiniportProperty equ 5
    StorageAccessAlignmentProperty equ 6
    StorageDeviceSeekPenaltyProperty equ 7
    StorageDeviceTrimProperty equ 8
    StorageDeviceWriteAggregationProperty equ 9
    StorageDeviceDeviceTelemetryProperty equ 10
    StorageDeviceLBProvisioningProperty equ 11
    StorageDevicePowerProperty equ 12
    StorageDeviceCopyOffloadProperty equ 13
    StorageDeviceResiliencyProperty equ 14
    StorageDeviceMediumProductType equ 15
    StorageAdapterRpmbProperty equ 16
    StorageAdapterCryptoProperty equ 17
    StorageDeviceIoCapabilityProperty equ 48
    StorageAdapterProtocolSpecificProperty equ 49
    StorageDeviceProtocolSpecificProperty equ 50
    StorageAdapterTemperatureProperty equ 51
    StorageDeviceTemperatureProperty equ 52
    StorageAdapterPhysicalTopologyProperty equ 53
    StorageDevicePhysicalTopologyProperty equ 54
    StorageDeviceAttributesProperty equ 55
    StorageDeviceManagementStatus equ 56
    StorageAdapterSerialNumberProperty equ 57
    StorageDeviceLocationProperty equ 58
    StorageDeviceNumaProperty equ 59
    StorageDeviceZonedDeviceProperty equ 60
    StorageDeviceUnsafeShutdownCount equ 61
    _STORAGE_PROPERTY_ID typedef STORAGE_PROPERTY_ID
    PSTORAGE_PROPERTY_ID typedef ptr STORAGE_PROPERTY_ID
    
    STORAGE_PROPERTY_QUERY struct 8
      PropertyId STORAGE_PROPERTY_ID ?
      QueryType STORAGE_QUERY_TYPE ?
      AdditionalParameters BYTE 1 dup (?)
    STORAGE_PROPERTY_QUERY ends
    _STORAGE_PROPERTY_QUERY typedef STORAGE_PROPERTY_QUERY
    PSTORAGE_PROPERTY_QUERY typedef ptr STORAGE_PROPERTY_QUERY
    
    STORAGE_DESCRIPTOR_HEADER struct
      Version DWORD ?
      Size_ DWORD ?
    STORAGE_DESCRIPTOR_HEADER ends
    _STORAGE_DESCRIPTOR_HEADER typedef STORAGE_DESCRIPTOR_HEADER
    PSTORAGE_DESCRIPTOR_HEADER typedef ptr STORAGE_DESCRIPTOR_HEADER
    
    STORAGE_DEVICE_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      DeviceType BYTE ?
      DeviceTypeModifier BYTE ?
      RemovableMedia BOOLEAN ?
      CommandQueueing BOOLEAN ?
      VendorIdOffset DWORD ?
      ProductIdOffset DWORD ?
      ProductRevisionOffset DWORD ?
      SerialNumberOffset DWORD ?
      BusType STORAGE_BUS_TYPE ?
      RawPropertiesLength DWORD ?
      RawDeviceProperties BYTE 1 dup (?)
    STORAGE_DEVICE_DESCRIPTOR ends
    _STORAGE_DEVICE_DESCRIPTOR typedef STORAGE_DEVICE_DESCRIPTOR
    PSTORAGE_DEVICE_DESCRIPTOR typedef ptr STORAGE_DEVICE_DESCRIPTOR
    
    STORAGE_ADAPTER_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      MaximumTransferLength DWORD ?
      MaximumPhysicalPages DWORD ?
      AlignmentMask DWORD ?
      AdapterUsesPio BOOLEAN ?
      AdapterScansDown BOOLEAN ?
      CommandQueueing BOOLEAN ?
      AcceleratedTransfer BOOLEAN ?
      if (NTDDI_VERSION lt NTDDI_WINXP)
        BusType BOOLEAN ?
      else
        BusType BYTE ?
      endif
      BusMajorVersion WORD ?
      BusMinorVersion WORD ?
      if (NTDDI_VERSION ge NTDDI_WIN8)
        SrbType BYTE ?
        AddressType BYTE ?
      endif
    STORAGE_ADAPTER_DESCRIPTOR ends
    _STORAGE_ADAPTER_DESCRIPTOR typedef STORAGE_ADAPTER_DESCRIPTOR
    PSTORAGE_ADAPTER_DESCRIPTOR typedef ptr STORAGE_ADAPTER_DESCRIPTOR
    
    if (NTDDI_VERSION ge NTDDI_WIN8)
      NO_SRBTYPE_ADAPTER_DESCRIPTOR_SIZE equ <UFIELD_OFFSET(STORAGE_ADAPTER_DESCRIPTOR, SrbType)>
      if  not Defined(SRB_TYPE_SCSI_REQUEST_BLOCK)
        SRB_TYPE_SCSI_REQUEST_BLOCK equ 0
      endif
      if  not Defined(SRB_TYPE_STORAGE_REQUEST_BLOCK)
        SRB_TYPE_STORAGE_REQUEST_BLOCK equ 1
      endif
      if  not Defined(STORAGE_ADDRESS_TYPE_BTL8)
        STORAGE_ADDRESS_TYPE_BTL8 equ 0
      endif
    endif
    STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      BytesPerCacheLine DWORD ?
      BytesOffsetForCacheAlignment DWORD ?
      BytesPerLogicalSector DWORD ?
      BytesPerPhysicalSector DWORD ?
      BytesOffsetForSectorAlignment DWORD ?
    STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR ends
    _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR typedef STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
    PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR typedef ptr STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
    
    STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      MediumProductType DWORD ?
    STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR ends
    _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR typedef STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
    PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR typedef ptr STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
    
    STORAGE_PORT_CODE_SET typedef SDWORD
    StoragePortCodeSetReserved equ 0
    StoragePortCodeSetStorport equ 1
    StoragePortCodeSetSCSIport equ 2
    StoragePortCodeSetSpaceport equ 3
    StoragePortCodeSetATAport equ 4
    StoragePortCodeSetUSBport equ 5
    StoragePortCodeSetSBP2port equ 6
    StoragePortCodeSetSDport equ 7
    _STORAGE_PORT_CODE_SET typedef STORAGE_PORT_CODE_SET
    PSTORAGE_PORT_CODE_SET typedef ptr STORAGE_PORT_CODE_SET
    
    if (NTDDI_VERSION ge NTDDI_WIN8)
      STORAGE_MINIPORT_DESCRIPTOR_V1_SIZE equ <RTL_SIZEOF_THROUGH_FIELD(STORAGE_MINIPORT_DESCRIPTOR, IoTimeoutValue)>
    endif
    STORAGE_MINIPORT_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      Portdriver STORAGE_PORT_CODE_SET ?
      LUNResetSupported BOOLEAN ?
      TargetResetSupported BOOLEAN ?
      if (NTDDI_VERSION ge NTDDI_WIN8)
        IoTimeoutValue WORD ?
      endif
      if (NTDDI_VERSION ge NTDDI_WINBLUE)
        ExtraIoInfoSupported BOOLEAN ?
        Reserved0 BYTE 3 dup (?)
        Reserved1 DWORD ?
      endif
    STORAGE_MINIPORT_DESCRIPTOR ends
    _STORAGE_MINIPORT_DESCRIPTOR typedef STORAGE_MINIPORT_DESCRIPTOR
    PSTORAGE_MINIPORT_DESCRIPTOR typedef ptr STORAGE_MINIPORT_DESCRIPTOR
    
    STORAGE_IDENTIFIER_CODE_SET typedef SDWORD
    StorageIdCodeSetReserved equ 0
    StorageIdCodeSetBinary equ 1
    StorageIdCodeSetAscii equ 2
    StorageIdCodeSetUtf8 equ 3
    _STORAGE_IDENTIFIER_CODE_SET typedef STORAGE_IDENTIFIER_CODE_SET
    PSTORAGE_IDENTIFIER_CODE_SET typedef ptr STORAGE_IDENTIFIER_CODE_SET
    
    STORAGE_IDENTIFIER_TYPE typedef SDWORD
    StorageIdTypeVendorSpecific equ 0
    StorageIdTypeVendorId equ 1
    StorageIdTypeEUI64 equ 2
    StorageIdTypeFCPHName equ 3
    StorageIdTypePortRelative equ 4
    StorageIdTypeTargetPortGroup equ 5
    StorageIdTypeLogicalUnitGroup equ 6
    StorageIdTypeMD5LogicalUnitIdentifier equ 7
    StorageIdTypeScsiNameString equ 8
    _STORAGE_IDENTIFIER_TYPE typedef STORAGE_IDENTIFIER_TYPE
    PSTORAGE_IDENTIFIER_TYPE typedef ptr STORAGE_IDENTIFIER_TYPE
    
    StorageIdTypeNAA equ <StorageIdTypeFCPHName>
    STORAGE_ID_NAA_FORMAT typedef SDWORD
    StorageIdNAAFormatIEEEExtended equ 2
    StorageIdNAAFormatIEEERegistered equ 3
    StorageIdNAAFormatIEEEERegisteredExtended equ 5
    _STORAGE_ID_NAA_FORMAT typedef STORAGE_ID_NAA_FORMAT
    PSTORAGE_ID_NAA_FORMAT typedef ptr STORAGE_ID_NAA_FORMAT
    
    STORAGE_ASSOCIATION_TYPE typedef SDWORD
    StorageIdAssocDevice equ 0
    StorageIdAssocPort equ 1
    StorageIdAssocTarget equ 2
    _STORAGE_ASSOCIATION_TYPE typedef STORAGE_ASSOCIATION_TYPE
    PSTORAGE_ASSOCIATION_TYPE typedef ptr STORAGE_ASSOCIATION_TYPE
    
    STORAGE_IDENTIFIER struct
      CodeSet STORAGE_IDENTIFIER_CODE_SET ?
      Type_ STORAGE_IDENTIFIER_TYPE ?
      IdentifierSize WORD ?
      NextOffset WORD ?
      Association STORAGE_ASSOCIATION_TYPE ?
      Identifier BYTE 1 dup (?)
    STORAGE_IDENTIFIER ends
    _STORAGE_IDENTIFIER typedef STORAGE_IDENTIFIER
    PSTORAGE_IDENTIFIER typedef ptr STORAGE_IDENTIFIER
    
    STORAGE_DEVICE_ID_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      NumberOfIdentifiers DWORD ?
      Identifiers BYTE 1 dup (?)
    STORAGE_DEVICE_ID_DESCRIPTOR ends
    _STORAGE_DEVICE_ID_DESCRIPTOR typedef STORAGE_DEVICE_ID_DESCRIPTOR
    PSTORAGE_DEVICE_ID_DESCRIPTOR typedef ptr STORAGE_DEVICE_ID_DESCRIPTOR
    
    DEVICE_SEEK_PENALTY_DESCRIPTOR struct 8
      Version DWORD ?
      Size_ DWORD ?
      IncursSeekPenalty BOOLEAN ?
    DEVICE_SEEK_PENALTY_DESCRIPTOR ends
    _DEVICE_SEEK_PENALTY_DESCRIPTOR typedef DEVICE_SEEK_PENALTY_DESCRIPTOR
    PDEVICE_SEEK_PENALTY_DESCRIPTOR typedef ptr DEVICE_SEEK_PENALTY_DESCRIPTOR
    
    DEVICE_WRITE_AGGREGATION_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      BenefitsFromWriteAggregation BOOLEAN ?
    DEVICE_WRITE_AGGREGATION_DESCRIPTOR ends
    _DEVICE_WRITE_AGGREGATION_DESCRIPTOR typedef DEVICE_WRITE_AGGREGATION_DESCRIPTOR
    PDEVICE_WRITE_AGGREGATION_DESCRIPTOR typedef ptr DEVICE_WRITE_AGGREGATION_DESCRIPTOR
    
    DEVICE_TRIM_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      TrimEnabled BOOLEAN ?
    DEVICE_TRIM_DESCRIPTOR ends
    _DEVICE_TRIM_DESCRIPTOR typedef DEVICE_TRIM_DESCRIPTOR
    PDEVICE_TRIM_DESCRIPTOR typedef ptr DEVICE_TRIM_DESCRIPTOR
    
    DEVICE_LB_PROVISIONING_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      DEVICE_LB_PROVISIONING_DESCRIPTOR_??60 record ThinProvisioningEnabled_??60:1, ThinProvisioningReadZeros_??60:1, AnchorSupported_??60:3, UnmapGranularityAlignmentValid_??60:1, Reserved0_??60:2
      DEVICE_LB_PROVISIONING_DESCRIPTOR_??60 <>
      Reserved1 BYTE 7 dup (?)
      OptimalUnmapGranularity DWORDLONG ?
      UnmapGranularityAlignment DWORDLONG ?
      if (NTDDI_VERSION ge NTDDI_WINBLUE)
        MaxUnmapLbaCount DWORD ?
        MaxUnmapBlockDescriptorCount DWORD ?
      endif
    DEVICE_LB_PROVISIONING_DESCRIPTOR ends
    _DEVICE_LB_PROVISIONING_DESCRIPTOR typedef DEVICE_LB_PROVISIONING_DESCRIPTOR
    PDEVICE_LB_PROVISIONING_DESCRIPTOR typedef ptr DEVICE_LB_PROVISIONING_DESCRIPTOR
    
    DEVICE_LB_PROVISIONING_DESCRIPTOR_V1_SIZE equ <RTL_SIZEOF_THROUGH_FIELD(DEVICE_LB_PROVISIONING_DESCRIPTOR, UnmapGranularityAlignment)>
    STORAGE_LB_PROVISIONING_MAP_RESOURCES struct
      Size_ DWORD ?
      Version DWORD ?
      STORAGE_LB_PROVISIONING_MAP_RESOURCES_??61 record AvailableMappingResourcesValid_??61:1, UsedMappingResourcesValid_??61:1, Reserved0_??61:6
      STORAGE_LB_PROVISIONING_MAP_RESOURCES_??61 <>
      Reserved1 BYTE 3 dup (?)
      STORAGE_LB_PROVISIONING_MAP_RESOURCES_??62 record AvailableMappingResourcesScope_??62:2, UsedMappingResourcesScope_??62:2, Reserved2_??62:4
      STORAGE_LB_PROVISIONING_MAP_RESOURCES_??62 <>
      Reserved3 BYTE 3 dup (?)
      AvailableMappingResources DWORDLONG ?
      UsedMappingResources DWORDLONG ?
    STORAGE_LB_PROVISIONING_MAP_RESOURCES ends
    _STORAGE_LB_PROVISIONING_MAP_RESOURCES typedef STORAGE_LB_PROVISIONING_MAP_RESOURCES
    PSTORAGE_LB_PROVISIONING_MAP_RESOURCES typedef ptr STORAGE_LB_PROVISIONING_MAP_RESOURCES
    
    DEVICE_POWER_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      DeviceAttentionSupported BOOLEAN ?
      AsynchronousNotificationSupported BOOLEAN ?
      IdlePowerManagementEnabled BOOLEAN ?
      D3ColdEnabled BOOLEAN ?
      D3ColdSupported BOOLEAN ?
      NoVerifyDuringIdlePower BOOLEAN ?
      Reserved BYTE 2 dup (?)
      IdleTimeoutInMS DWORD ?
    DEVICE_POWER_DESCRIPTOR ends
    _DEVICE_POWER_DESCRIPTOR typedef DEVICE_POWER_DESCRIPTOR
    PDEVICE_POWER_DESCRIPTOR typedef ptr DEVICE_POWER_DESCRIPTOR
    
    DEVICE_COPY_OFFLOAD_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      MaximumTokenLifetime DWORD ?
      DefaultTokenLifetime DWORD ?
      MaximumTransferSize DWORDLONG ?
      OptimalTransferCount DWORDLONG ?
      MaximumDataDescriptors DWORD ?
      MaximumTransferLengthPerDescriptor DWORD ?
      OptimalTransferLengthPerDescriptor DWORD ?
      OptimalTransferLengthGranularity WORD ?
      Reserved BYTE 2 dup (?)
    DEVICE_COPY_OFFLOAD_DESCRIPTOR ends
    _DEVICE_COPY_OFFLOAD_DESCRIPTOR typedef DEVICE_COPY_OFFLOAD_DESCRIPTOR
    PDEVICE_COPY_OFFLOAD_DESCRIPTOR typedef ptr DEVICE_COPY_OFFLOAD_DESCRIPTOR
    
    STORAGE_DEVICE_RESILIENCY_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      NameOffset DWORD ?
      NumberOfLogicalCopies DWORD ?
      NumberOfPhysicalCopies DWORD ?
      PhysicalDiskRedundancy DWORD ?
      NumberOfColumns DWORD ?
      Interleave DWORD ?
    STORAGE_DEVICE_RESILIENCY_DESCRIPTOR ends
    _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR typedef STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
    PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR typedef ptr STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
    
    STORAGE_RPMB_FRAME_TYPE typedef SDWORD
    StorageRpmbFrameTypeUnknown equ 0
    StorageRpmbFrameTypeStandard equ 1
    StorageRpmbFrameTypeMax equ 2
    _STORAGE_RPMB_FRAME_TYPE typedef STORAGE_RPMB_FRAME_TYPE
    PSTORAGE_RPMB_FRAME_TYPE typedef ptr STORAGE_RPMB_FRAME_TYPE
    
    STORAGE_RPMB_DESCRIPTOR_VERSION_1 equ 1
    STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE equ 512
    STORAGE_RPMB_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      SizeInBytes DWORD ?
      MaxReliableWriteSizeInBytes DWORD ?
      FrameFormat STORAGE_RPMB_FRAME_TYPE ?
    STORAGE_RPMB_DESCRIPTOR ends
    _STORAGE_RPMB_DESCRIPTOR typedef STORAGE_RPMB_DESCRIPTOR
    PSTORAGE_RPMB_DESCRIPTOR typedef ptr STORAGE_RPMB_DESCRIPTOR
    
    STORAGE_CRYPTO_ALGORITHM_ID typedef SDWORD
    StorageCryptoAlgorithmUnknown equ 0
    StorageCryptoAlgorithmXTSAES equ 1
    StorageCryptoAlgorithmBitlockerAESCBC equ 2
    StorageCryptoAlgorithmAESECB equ 3
    StorageCryptoAlgorithmESSIVAESCBC equ 4
    StorageCryptoAlgorithmMax equ 5
    _STORAGE_CRYPTO_ALGORITHM_ID typedef STORAGE_CRYPTO_ALGORITHM_ID
    PSTORAGE_CRYPTO_ALGORITHM_ID typedef ptr STORAGE_CRYPTO_ALGORITHM_ID
    
    STORAGE_CRYPTO_KEY_SIZE typedef SDWORD
    StorageCryptoKeySizeUnknown equ 0
    StorageCryptoKeySize128Bits equ 1
    StorageCryptoKeySize192Bits equ 2
    StorageCryptoKeySize256Bits equ 3
    StorageCryptoKeySize512Bits equ 4
    _STORAGE_CRYPTO_KEY_SIZE typedef STORAGE_CRYPTO_KEY_SIZE
    PSTORAGE_CRYPTO_KEY_SIZE typedef ptr STORAGE_CRYPTO_KEY_SIZE
    
    STORAGE_CRYPTO_CAPABILITY_VERSION_1 equ 1
    STORAGE_CRYPTO_CAPABILITY struct
      Version DWORD ?
      Size_ DWORD ?
      CryptoCapabilityIndex DWORD ?
      AlgorithmId STORAGE_CRYPTO_ALGORITHM_ID ?
      KeySize STORAGE_CRYPTO_KEY_SIZE ?
      DataUnitSizeBitmask DWORD ?
    STORAGE_CRYPTO_CAPABILITY ends
    _STORAGE_CRYPTO_CAPABILITY typedef STORAGE_CRYPTO_CAPABILITY
    PSTORAGE_CRYPTO_CAPABILITY typedef ptr STORAGE_CRYPTO_CAPABILITY
    
    STORAGE_CRYPTO_DESCRIPTOR_VERSION_1 equ 1
    STORAGE_CRYPTO_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      NumKeysSupported DWORD ?
      NumCryptoCapabilities DWORD ?
      CryptoCapabilities STORAGE_CRYPTO_CAPABILITY ANYSIZE_ARRAY dup (<>)
    STORAGE_CRYPTO_DESCRIPTOR ends
    _STORAGE_CRYPTO_DESCRIPTOR typedef STORAGE_CRYPTO_DESCRIPTOR
    PSTORAGE_CRYPTO_DESCRIPTOR typedef ptr STORAGE_CRYPTO_DESCRIPTOR
    
    STORAGE_TIER_NAME_LENGTH equ 256
    STORAGE_TIER_DESCRIPTION_LENGTH equ 512
    STORAGE_TIER_FLAG_NO_SEEK_PENALTY equ 00020000h
    STORAGE_TIER_FLAG_WRITE_BACK_CACHE equ 00200000h
    STORAGE_TIER_FLAG_READ_CACHE equ 00400000h
    STORAGE_TIER_FLAG_PARITY equ 00800000h
    STORAGE_TIER_FLAG_SMR equ 01000000h
    STORAGE_TIER_MEDIA_TYPE typedef SDWORD
    StorageTierMediaTypeUnspecified equ 0
    StorageTierMediaTypeDisk equ 1
    StorageTierMediaTypeSsd equ 2
    StorageTierMediaTypeScm equ 4
    StorageTierMediaTypeMax equ 5
    _STORAGE_TIER_MEDIA_TYPE typedef STORAGE_TIER_MEDIA_TYPE
    PSTORAGE_TIER_MEDIA_TYPE typedef ptr STORAGE_TIER_MEDIA_TYPE
    
    STORAGE_TIER_CLASS typedef SDWORD
    StorageTierClassUnspecified equ 0
    StorageTierClassCapacity equ 1
    StorageTierClassPerformance equ 2
    StorageTierClassMax equ 3
    _STORAGE_TIER_CLASS typedef STORAGE_TIER_CLASS
    PSTORAGE_TIER_CLASS typedef ptr STORAGE_TIER_CLASS
    
    STORAGE_TIER struct
      Id GUID <>
      Name_ WCHAR STORAGE_TIER_NAME_LENGTH dup (?)
      Description WCHAR STORAGE_TIER_NAME_LENGTH dup (?)
      Flags DWORDLONG ?
      ProvisionedCapacity DWORDLONG ?
      MediaType STORAGE_TIER_MEDIA_TYPE ?
      Class STORAGE_TIER_CLASS ?
    STORAGE_TIER ends
    _STORAGE_TIER typedef STORAGE_TIER
    PSTORAGE_TIER typedef ptr STORAGE_TIER
    
    STORAGE_DEVICE_TIERING_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      TotalNumberOfTiers DWORD ?
      NumberOfTiersReturned DWORD ?
      Tiers STORAGE_TIER ANYSIZE_ARRAY dup (<>)
    STORAGE_DEVICE_TIERING_DESCRIPTOR ends
    _STORAGE_DEVICE_TIERING_DESCRIPTOR typedef STORAGE_DEVICE_TIERING_DESCRIPTOR
    PSTORAGE_DEVICE_TIERING_DESCRIPTOR typedef ptr STORAGE_DEVICE_TIERING_DESCRIPTOR
    
    STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      NumberOfFaultDomains DWORD ?
      FaultDomainIds GUID ANYSIZE_ARRAY dup (<>)
    STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR ends
    _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR typedef STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
    PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR typedef ptr STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
    
    STORAGE_PROTOCOL_TYPE typedef SDWORD
    ProtocolTypeUnknown equ 00h
    ProtocolTypeScsi equ 1
    ProtocolTypeAta equ 2
    ProtocolTypeNvme equ 3
    ProtocolTypeSd equ 4
    ProtocolTypeUfs equ 5
    ProtocolTypeProprietary equ 7Eh
    ProtocolTypeMaxReserved equ 7Fh
    _STORAGE_PROTOCOL_TYPE typedef STORAGE_PROTOCOL_TYPE
    PSTORAGE_PROTOCOL_TYPE typedef ptr STORAGE_PROTOCOL_TYPE
    
    STORAGE_PROTOCOL_NVME_DATA_TYPE typedef SDWORD
    NVMeDataTypeUnknown equ 0
    NVMeDataTypeIdentify equ 1
    NVMeDataTypeLogPage equ 2
    NVMeDataTypeFeature equ 3
    _STORAGE_PROTOCOL_NVME_DATA_TYPE typedef STORAGE_PROTOCOL_NVME_DATA_TYPE
    PSTORAGE_PROTOCOL_NVME_DATA_TYPE typedef ptr STORAGE_PROTOCOL_NVME_DATA_TYPE
    
    STORAGE_PROTOCOL_ATA_DATA_TYPE typedef SDWORD
    AtaDataTypeUnknown equ 0
    AtaDataTypeIdentify equ 1
    AtaDataTypeLogPage equ 2
    _STORAGE_PROTOCOL_ATA_DATA_TYPE typedef STORAGE_PROTOCOL_ATA_DATA_TYPE
    PSTORAGE_PROTOCOL_ATA_DATA_TYPE typedef ptr STORAGE_PROTOCOL_ATA_DATA_TYPE
    
    STORAGE_PROTOCOL_UFS_DATA_TYPE typedef SDWORD
    UfsDataTypeUnknown equ 0
    UfsDataTypeQueryDescriptor equ 1
    UfsDataTypeMax equ 2
    _STORAGE_PROTOCOL_UFS_DATA_TYPE typedef STORAGE_PROTOCOL_UFS_DATA_TYPE
    PSTORAGE_PROTOCOL_UFS_DATA_TYPE typedef ptr STORAGE_PROTOCOL_UFS_DATA_TYPE
    
    STORAGE_PROTOCOL_SPECIFIC_DATA struct
      ProtocolType STORAGE_PROTOCOL_TYPE ?
      DataType DWORD ?
      ProtocolDataRequestValue DWORD ?
      ProtocolDataRequestSubValue DWORD ?
      ProtocolDataOffset DWORD ?
      ProtocolDataLength DWORD ?
      FixedProtocolReturnData DWORD ?
      Reserved DWORD 3 dup (?)
    STORAGE_PROTOCOL_SPECIFIC_DATA ends
    _STORAGE_PROTOCOL_SPECIFIC_DATA typedef STORAGE_PROTOCOL_SPECIFIC_DATA
    PSTORAGE_PROTOCOL_SPECIFIC_DATA typedef ptr STORAGE_PROTOCOL_SPECIFIC_DATA
    
    STORAGE_PROTOCOL_DATA_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      ProtocolSpecificData STORAGE_PROTOCOL_SPECIFIC_DATA <>
    STORAGE_PROTOCOL_DATA_DESCRIPTOR ends
    _STORAGE_PROTOCOL_DATA_DESCRIPTOR typedef STORAGE_PROTOCOL_DATA_DESCRIPTOR
    PSTORAGE_PROTOCOL_DATA_DESCRIPTOR typedef ptr STORAGE_PROTOCOL_DATA_DESCRIPTOR
    
    STORAGE_TEMPERATURE_VALUE_NOT_REPORTED equ 8000h
    STORAGE_TEMPERATURE_INFO struct
      Index WORD ?
      Temperature SHORT_ ?
      OverThreshold SHORT_ ?
      UnderThreshold SHORT_ ?
      OverThresholdChangable BOOLEAN ?
      UnderThresholdChangable BOOLEAN ?
      EventGenerated BOOLEAN ?
      Reserved0 BYTE ?
      Reserved1 DWORD ?
    STORAGE_TEMPERATURE_INFO ends
    _STORAGE_TEMPERATURE_INFO typedef STORAGE_TEMPERATURE_INFO
    PSTORAGE_TEMPERATURE_INFO typedef ptr STORAGE_TEMPERATURE_INFO
    
    STORAGE_TEMPERATURE_DATA_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      CriticalTemperature SHORT_ ?
      WarningTemperature SHORT_ ?
      InfoCount WORD ?
      Reserved0 BYTE 2 dup (?)
      Reserved1 DWORD 2 dup (?)
      TemperatureInfo STORAGE_TEMPERATURE_INFO ANYSIZE_ARRAY dup (<>)
    STORAGE_TEMPERATURE_DATA_DESCRIPTOR ends
    _STORAGE_TEMPERATURE_DATA_DESCRIPTOR typedef STORAGE_TEMPERATURE_DATA_DESCRIPTOR
    PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR typedef ptr STORAGE_TEMPERATURE_DATA_DESCRIPTOR
    
    STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST equ 0001h
    STORAGE_TEMPERATURE_THRESHOLD struct
      Version DWORD ?
      Size_ DWORD ?
      Flags WORD ?
      Index WORD ?
      Threshold SHORT_ ?
      OverThreshold BOOLEAN ?
      Reserved BYTE ?
    STORAGE_TEMPERATURE_THRESHOLD ends
    _STORAGE_TEMPERATURE_THRESHOLD typedef STORAGE_TEMPERATURE_THRESHOLD
    PSTORAGE_TEMPERATURE_THRESHOLD typedef ptr STORAGE_TEMPERATURE_THRESHOLD
    
    NVME_RESERVED_QUEUE_HEADER struct
      Version DWORD ?
      Size_ DWORD ?
    NVME_RESERVED_QUEUE_HEADER ends
    _NVME_RESERVED_QUEUE_HEADER typedef NVME_RESERVED_QUEUE_HEADER
    PNVME_RESERVED_QUEUE_HEADER typedef ptr NVME_RESERVED_QUEUE_HEADER
    
    NVME_RESERVED_SQ_CREATE_REQUEST struct
      PhysicalAddress DWORD64 ?
      QueuePriority WORD ?
      QueueDepth WORD ?
      PhysicalContiguous BOOLEAN ?
    NVME_RESERVED_SQ_CREATE_REQUEST ends
    _NVME_RESERVED_SQ_CREATE_REQUEST typedef NVME_RESERVED_SQ_CREATE_REQUEST
    PNVME_RESERVED_SQ_CREATE_REQUEST typedef ptr NVME_RESERVED_SQ_CREATE_REQUEST
    
    NVME_RESERVED_CQ_CREATE_REQUEST struct
      PhysicalAddress DWORD64 ?
      InterruptVector DWORD ?
      QueueDepth WORD ?
      InterruptEnabled BOOLEAN ?
      PhysicalContiguous BOOLEAN ?
    NVME_RESERVED_CQ_CREATE_REQUEST ends
    _NVME_RESERVED_CQ_CREATE_REQUEST typedef NVME_RESERVED_CQ_CREATE_REQUEST
    PNVME_RESERVED_CQ_CREATE_REQUEST typedef ptr NVME_RESERVED_CQ_CREATE_REQUEST
    
    NVME_RESERVED_QUEUES_CREATE_REQUEST struct
      Header NVME_RESERVED_QUEUE_HEADER <>
      CompletionQueue NVME_RESERVED_CQ_CREATE_REQUEST <>
      SubmissionQueueCount WORD ?
      SubmissionQueue NVME_RESERVED_SQ_CREATE_REQUEST ANYSIZE_ARRAY dup (<>)
    NVME_RESERVED_QUEUES_CREATE_REQUEST ends
    _NVME_RESERVED_QUEUES_CREATE_REQUEST typedef NVME_RESERVED_QUEUES_CREATE_REQUEST
    PNVME_RESERVED_QUEUES_CREATE_REQUEST typedef ptr NVME_RESERVED_QUEUES_CREATE_REQUEST
    
    NVME_RESERVED_SQ_INFO struct
      PhysicalAddress DWORD64 ?
      DoorbellRegisterAddress DWORD64 ?
      QueueID WORD ?
      QueueDepth WORD ?
      PhysicalContiguous BOOLEAN ?
      CompletionQueueID WORD ?
      QueuePriority BYTE ?
    NVME_RESERVED_SQ_INFO ends
    _NVME_RESERVED_SQ_INFO typedef NVME_RESERVED_SQ_INFO
    PNVME_RESERVED_SQ_INFO typedef ptr NVME_RESERVED_SQ_INFO
    
    NVME_RESERVED_CQ_INFO struct
      PhysicalAddress DWORD64 ?
      DoorbellRegisterAddress DWORD64 ?
      QueueID WORD ?
      QueueDepth WORD ?
      InterruptEnabled BOOLEAN ?
      PhysicalContiguous BOOLEAN ?
      InterruptVector DWORD ?
    NVME_RESERVED_CQ_INFO ends
    _NVME_RESERVED_CQ_INFO typedef NVME_RESERVED_CQ_INFO
    PNVME_RESERVED_CQ_INFO typedef ptr NVME_RESERVED_CQ_INFO
    
    NVME_RESERVED_QUEUES_CREATE_RESPONSE struct
      Header NVME_RESERVED_QUEUE_HEADER <>
      CompletionQueue NVME_RESERVED_CQ_INFO <>
      SubmissionQueueCount WORD ?
      SubmissionQueue NVME_RESERVED_SQ_INFO ANYSIZE_ARRAY dup (<>)
    NVME_RESERVED_QUEUES_CREATE_RESPONSE ends
    _NVME_RESERVED_QUEUES_CREATE_RESPONSE typedef NVME_RESERVED_QUEUES_CREATE_RESPONSE
    PNVME_RESERVED_QUEUES_CREATE_RESPONSE typedef ptr NVME_RESERVED_QUEUES_CREATE_RESPONSE
    
    NVME_RESERVED_QUEUES_DELETE_REQUEST struct
      Header NVME_RESERVED_QUEUE_HEADER <>
      QueueID WORD ?
    NVME_RESERVED_QUEUES_DELETE_REQUEST ends
    _NVME_RESERVED_QUEUES_DELETE_REQUEST typedef NVME_RESERVED_QUEUES_DELETE_REQUEST
    PNVME_RESERVED_QUEUES_DELETE_REQUEST typedef ptr NVME_RESERVED_QUEUES_DELETE_REQUEST
    
    NVME_RESERVED_QUEUES_PROPERTIES struct
      Header NVME_RESERVED_QUEUE_HEADER <>
      QueuePairCount WORD ?
      struct QueueMapping
        CompletionQueue NVME_RESERVED_CQ_INFO <>
        SubmissionQueueCount WORD ?
        SubmissionQueue NVME_RESERVED_SQ_INFO ANYSIZE_ARRAY dup (<>)
      ends
    NVME_RESERVED_QUEUES_PROPERTIES ends
    _NVME_RESERVED_QUEUES_PROPERTIES typedef NVME_RESERVED_QUEUES_PROPERTIES
    PNVME_RESERVED_QUEUES_PROPERTIES typedef ptr NVME_RESERVED_QUEUES_PROPERTIES
    
    STORAGE_COMPONENT_ROLE_CACHE equ 00000001h
    STORAGE_COMPONENT_ROLE_TIERING equ 00000002h
    STORAGE_COMPONENT_ROLE_DATA equ 00000004h
    STORAGE_DEVICE_FORM_FACTOR typedef SDWORD
    FormFactorUnknown equ 0
    FormFactor3_5 equ 1
    FormFactor2_5 equ 2
    FormFactor1_8 equ 3
    FormFactor1_8Less equ 4
    FormFactorEmbedded equ 5
    FormFactorMemoryCard equ 6
    FormFactormSata equ 7
    FormFactorM_2 equ 8
    FormFactorPCIeBoard equ 9
    FormFactorDimm equ 10
    _STORAGE_DEVICE_FORM_FACTOR typedef STORAGE_DEVICE_FORM_FACTOR
    PSTORAGE_DEVICE_FORM_FACTOR typedef ptr STORAGE_DEVICE_FORM_FACTOR
    
    STORAGE_COMPONENT_HEALTH_STATUS typedef SDWORD
    HealthStatusUnknown equ 0
    HealthStatusNormal equ 1
    HealthStatusThrottled equ 2
    HealthStatusWarning equ 3
    HealthStatusDisabled equ 4
    HealthStatusFailed equ 5
    _STORAGE_COMPONENT_HEALTH_STATUS typedef STORAGE_COMPONENT_HEALTH_STATUS
    PSTORAGE_COMPONENT_HEALTH_STATUS typedef ptr STORAGE_COMPONENT_HEALTH_STATUS
    
    STORAGE_SPEC_VERSION union
      struct
        union MinorVersion
          struct
            SubMinor BYTE ?
            Minor BYTE ?
          ends
          AsUshort WORD ?
        ends
        MajorVersion WORD ?
      ends
      AsUlong DWORD ?
    STORAGE_SPEC_VERSION ends
    _STORAGE_SPEC_VERSION typedef STORAGE_SPEC_VERSION
    PSTORAGE_SPEC_VERSION typedef ptr STORAGE_SPEC_VERSION
    
    STORAGE_PHYSICAL_DEVICE_DATA struct
      DeviceId DWORD ?
      Role DWORD ?
      HealthStatus STORAGE_COMPONENT_HEALTH_STATUS ?
      CommandProtocol STORAGE_PROTOCOL_TYPE ?
      SpecVersion STORAGE_SPEC_VERSION <>
      FormFactor STORAGE_DEVICE_FORM_FACTOR ?
      Vendor BYTE 8 dup (?)
      Model BYTE 40 dup (?)
      FirmwareRevision BYTE 16 dup (?)
      Capacity DWORDLONG ?
      PhysicalLocation BYTE 32 dup (?)
      Reserved DWORD 2 dup (?)
    STORAGE_PHYSICAL_DEVICE_DATA ends
    _STORAGE_PHYSICAL_DEVICE_DATA typedef STORAGE_PHYSICAL_DEVICE_DATA
    PSTORAGE_PHYSICAL_DEVICE_DATA typedef ptr STORAGE_PHYSICAL_DEVICE_DATA
    
    STORAGE_PHYSICAL_ADAPTER_DATA struct
      AdapterId DWORD ?
      HealthStatus STORAGE_COMPONENT_HEALTH_STATUS ?
      CommandProtocol STORAGE_PROTOCOL_TYPE ?
      SpecVersion STORAGE_SPEC_VERSION <>
      Vendor BYTE 8 dup (?)
      Model BYTE 40 dup (?)
      FirmwareRevision BYTE 16 dup (?)
      PhysicalLocation BYTE 32 dup (?)
      ExpanderConnected BOOLEAN ?
      Reserved0 BYTE 3 dup (?)
      Reserved1 DWORD 3 dup (?)
    STORAGE_PHYSICAL_ADAPTER_DATA ends
    _STORAGE_PHYSICAL_ADAPTER_DATA typedef STORAGE_PHYSICAL_ADAPTER_DATA
    PSTORAGE_PHYSICAL_ADAPTER_DATA typedef ptr STORAGE_PHYSICAL_ADAPTER_DATA
    
    STORAGE_PHYSICAL_NODE_DATA struct
      NodeId DWORD ?
      AdapterCount DWORD ?
      AdapterDataLength DWORD ?
      AdapterDataOffset DWORD ?
      DeviceCount DWORD ?
      DeviceDataLength DWORD ?
      DeviceDataOffset DWORD ?
      Reserved DWORD 3 dup (?)
    STORAGE_PHYSICAL_NODE_DATA ends
    _STORAGE_PHYSICAL_NODE_DATA typedef STORAGE_PHYSICAL_NODE_DATA
    PSTORAGE_PHYSICAL_NODE_DATA typedef ptr STORAGE_PHYSICAL_NODE_DATA
    
    STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      NodeCount DWORD ?
      Reserved DWORD ?
      Node STORAGE_PHYSICAL_NODE_DATA ANYSIZE_ARRAY dup (<>)
    STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR ends
    _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR typedef STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
    PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR typedef ptr STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
    
    STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      LunMaxIoCount DWORD ?
      AdapterMaxIoCount DWORD ?
    STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR ends
    _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR typedef STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
    PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR typedef ptr STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
    
    STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      Attributes DWORD64 ?
    STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR ends
    _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR typedef STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
    PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR typedef ptr STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
    
    STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO equ 01h
    STORAGE_ATTRIBUTE_BLOCK_IO equ 02h
    STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE equ 04h
    STORAGE_ATTRIBUTE_VOLATILE equ 08h
    STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION equ 10h
    STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT equ 20h
    STORAGE_DISK_HEALTH_STATUS typedef SDWORD
    DiskHealthUnknown equ 0
    DiskHealthUnhealthy equ 1
    DiskHealthWarning equ 2
    DiskHealthHealthy equ 3
    DiskHealthMax equ 4
    _STORAGE_DISK_HEALTH_STATUS typedef STORAGE_DISK_HEALTH_STATUS
    PSTORAGE_DISK_HEALTH_STATUS typedef ptr STORAGE_DISK_HEALTH_STATUS
    
    STORAGE_DISK_OPERATIONAL_STATUS typedef SDWORD
    DiskOpStatusNone equ 0
    DiskOpStatusUnknown equ 1
    DiskOpStatusOk equ 2
    DiskOpStatusPredictingFailure equ 3
    DiskOpStatusInService equ 4
    DiskOpStatusHardwareError equ 5
    DiskOpStatusNotUsable equ 6
    DiskOpStatusTransientError equ 7
    DiskOpStatusMissing equ 8
    _STORAGE_DISK_OPERATIONAL_STATUS typedef STORAGE_DISK_OPERATIONAL_STATUS
    PSTORAGE_DISK_OPERATIONAL_STATUS typedef ptr STORAGE_DISK_OPERATIONAL_STATUS
    
    STORAGE_OPERATIONAL_STATUS_REASON typedef SDWORD
    DiskOpReasonUnknown equ 0
    DiskOpReasonScsiSenseCode equ 1
    DiskOpReasonMedia equ 2
    DiskOpReasonIo equ 3
    DiskOpReasonThresholdExceeded equ 4
    DiskOpReasonLostData equ 5
    DiskOpReasonEnergySource equ 6
    DiskOpReasonConfiguration equ 7
    DiskOpReasonDeviceController equ 8
    DiskOpReasonMediaController equ 9
    DiskOpReasonComponent equ 10
    DiskOpReasonNVDIMM_N equ 11
    DiskOpReasonBackgroundOperation equ 12
    DiskOpReasonInvalidFirmware equ 13
    DiskOpReasonHealthCheck equ 14
    DiskOpReasonLostDataPersistence equ 15
    DiskOpReasonDisabledByPlatform equ 16
    DiskOpReasonLostWritePersistence equ 17
    DiskOpReasonDataPersistenceLossImminent equ 18
    DiskOpReasonWritePersistenceLossImminent equ 19
    DiskOpReasonMax equ 20
    _STORAGE_OPERATIONAL_STATUS_REASON typedef STORAGE_OPERATIONAL_STATUS_REASON
    PSTORAGE_OPERATIONAL_STATUS_REASON typedef ptr STORAGE_OPERATIONAL_STATUS_REASON
    
    STORAGE_OPERATIONAL_REASON struct
      Version DWORD ?
      Size_ DWORD ?
      Reason STORAGE_OPERATIONAL_STATUS_REASON ?
      union RawBytes
        struct ScsiSenseKey
          SenseKey BYTE ?
          ASC BYTE ?
          ASCQ BYTE ?
          Reserved BYTE ?
        ends
        struct NVDIMM_N
          CriticalHealth BYTE ?
          ModuleHealth BYTE 2 dup (?)
          ErrorThresholdStatus BYTE ?
        ends
        AsUlong DWORD ?
      ends
    STORAGE_OPERATIONAL_REASON ends
    _STORAGE_OPERATIONAL_REASON typedef STORAGE_OPERATIONAL_REASON
    PSTORAGE_OPERATIONAL_REASON typedef ptr STORAGE_OPERATIONAL_REASON
    
    STORAGE_DEVICE_MAX_OPERATIONAL_STATUS equ 16
    STORAGE_DEVICE_MANAGEMENT_STATUS struct
      Version DWORD ?
      Size_ DWORD ?
      Health STORAGE_DISK_HEALTH_STATUS ?
      NumberOfOperationalStatus DWORD ?
      NumberOfAdditionalReasons DWORD ?
      OperationalStatus STORAGE_DISK_OPERATIONAL_STATUS STORAGE_DEVICE_MAX_OPERATIONAL_STATUS dup (?)
      AdditionalReasons STORAGE_OPERATIONAL_REASON ANYSIZE_ARRAY dup (<>)
    STORAGE_DEVICE_MANAGEMENT_STATUS ends
    _STORAGE_DEVICE_MANAGEMENT_STATUS typedef STORAGE_DEVICE_MANAGEMENT_STATUS
    PSTORAGE_DEVICE_MANAGEMENT_STATUS typedef ptr STORAGE_DEVICE_MANAGEMENT_STATUS
    
    STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH equ 128
    STORAGE_ADAPTER_SERIAL_NUMBER struct
      Version DWORD ?
      Size_ DWORD ?
      SerialNumber WCHAR STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH dup (?)
    STORAGE_ADAPTER_SERIAL_NUMBER ends
    _STORAGE_ADAPTER_SERIAL_NUMBER typedef STORAGE_ADAPTER_SERIAL_NUMBER
    PSTORAGE_ADAPTER_SERIAL_NUMBER typedef ptr STORAGE_ADAPTER_SERIAL_NUMBER
    
    STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION equ <(sizeof(STORAGE_ADAPTER_SERIAL_NUMBER))>
    STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE equ <(sizeof(STORAGE_ADAPTER_SERIAL_NUMBER))>
    STORAGE_ZONED_DEVICE_TYPES typedef SDWORD
    ZonedDeviceTypeUnknown equ 0
    ZonedDeviceTypeHostManaged equ 1
    ZonedDeviceTypeHostAware equ 2
    ZonedDeviceTypeDeviceManaged equ 3
    _STORAGE_ZONED_DEVICE_TYPES typedef STORAGE_ZONED_DEVICE_TYPES
    PSTORAGE_ZONED_DEVICE_TYPES typedef ptr STORAGE_ZONED_DEVICE_TYPES
    
    STORAGE_ZONE_TYPES typedef SDWORD
    ZoneTypeUnknown equ 0
    ZoneTypeConventional equ 1
    ZoneTypeSequentialWriteRequired equ 2
    ZoneTypeSequentialWritePreferred equ 3
    ZoneTypeMax equ 4
    _STORAGE_ZONE_TYPES typedef STORAGE_ZONE_TYPES
    PSTORAGE_ZONE_TYPES typedef ptr STORAGE_ZONE_TYPES
    
    STORAGE_ZONE_GROUP struct
      ZoneCount DWORD ?
      ZoneType STORAGE_ZONE_TYPES ?
      ZoneSize DWORDLONG ?
    STORAGE_ZONE_GROUP ends
    _STORAGE_ZONE_GROUP typedef STORAGE_ZONE_GROUP
    PSTORAGE_ZONE_GROUP typedef ptr STORAGE_ZONE_GROUP
    
    STORAGE_ZONED_DEVICE_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      DeviceType STORAGE_ZONED_DEVICE_TYPES ?
      ZoneCount DWORD ?
      union ZoneAttributes
        struct SequentialRequiredZone
          MaxOpenZoneCount DWORD ?
          UnrestrictedRead BOOLEAN ?
          Reserved BYTE 3 dup (?)
        ends
        struct SequentialPreferredZone
          OptimalOpenZoneCount DWORD ?
          Reserved DWORD ?
        ends
      ends
      ZoneGroupCount DWORD ?
      ZoneGroup STORAGE_ZONE_GROUP ANYSIZE_ARRAY dup (<>)
    STORAGE_ZONED_DEVICE_DESCRIPTOR ends
    _STORAGE_ZONED_DEVICE_DESCRIPTOR typedef STORAGE_ZONED_DEVICE_DESCRIPTOR
    PSTORAGE_ZONED_DEVICE_DESCRIPTOR typedef ptr STORAGE_ZONED_DEVICE_DESCRIPTOR
    
    DEVICE_LOCATION struct
      Socket DWORD ?
      Slot DWORD ?
      Adapter DWORD ?
      Port DWORD ?
      union
        struct
          Channel DWORD ?
          Device DWORD ?
        ends
        struct DUMMYSTRUCTNAME2
          Target DWORD ?
          Lun DWORD ?
        ends
      ends
    DEVICE_LOCATION ends
    _DEVICE_LOCATION typedef DEVICE_LOCATION
    PDEVICE_LOCATION typedef ptr DEVICE_LOCATION
    
    STORAGE_DEVICE_LOCATION_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      Location DEVICE_LOCATION <>
      StringOffset DWORD ?
    STORAGE_DEVICE_LOCATION_DESCRIPTOR ends
    _STORAGE_DEVICE_LOCATION_DESCRIPTOR typedef STORAGE_DEVICE_LOCATION_DESCRIPTOR
    PSTORAGE_DEVICE_LOCATION_DESCRIPTOR typedef ptr STORAGE_DEVICE_LOCATION_DESCRIPTOR
    
    STORAGE_DEVICE_NUMA_PROPERTY struct
      Version DWORD ?
      Size_ DWORD ?
      NumaNode DWORD ?
    STORAGE_DEVICE_NUMA_PROPERTY ends
    _STORAGE_DEVICE_NUMA_PROPERTY typedef STORAGE_DEVICE_NUMA_PROPERTY
    PSTORAGE_DEVICE_NUMA_PROPERTY typedef ptr STORAGE_DEVICE_NUMA_PROPERTY
    
    STORAGE_DEVICE_NUMA_NODE_UNKNOWN equ <MAXDWORD>
    STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT struct
      Version DWORD ?
      Size_ DWORD ?
      UnsafeShutdownCount DWORD ?
    STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT ends
    _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT typedef STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
    PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT typedef ptr STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
    
    DEVICE_DATA_MANAGEMENT_SET_ACTION typedef DWORD
    DEVICE_DSM_ACTION typedef DWORD
    DeviceDsmActionFlag_NonDestructive equ 80000000h
    IsDsmActionNonDestructive macro _Action
      exitm <(((_Action and DeviceDsmActionFlag_NonDestructive) != 0))>
    endm
    DeviceDsmAction_None equ 00000000h
    DeviceDsmAction_Trim equ 00000001h
    DeviceDsmAction_Notification equ (00000002h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_OffloadRead equ (00000003h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_OffloadWrite equ 00000004h
    DeviceDsmAction_Allocation equ (00000005h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_Repair equ (00000006h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_Scrub equ (00000007h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_DrtQuery equ (00000008h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_DrtClear equ (00000009h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_DrtDisable equ (0000000Ah or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_TieringQuery equ (0000000Bh or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_Map equ (0000000Ch or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_RegenerateParity equ (0000000Dh or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_NvCache_Change_Priority equ (0000000Eh or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_NvCache_Evict equ (0000000Fh or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_TopologyIdQuery equ (00000010h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_GetPhysicalAddresses equ (00000011h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_ScopeRegen equ (00000012h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_ReportZones equ (00000013h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_OpenZone equ (00000014h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_FinishZone equ (00000015h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_CloseZone equ (00000016h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_ResetWritePointer equ 00000017h
    DeviceDsmAction_GetRangeErrorInfo equ (00000018h or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_WriteZeroes equ 00000019h
    DeviceDsmAction_LostQuery equ (0000001Ah or DeviceDsmActionFlag_NonDestructive)
    DeviceDsmAction_GetFreeSpace equ (0000001Bh or DeviceDsmActionFlag_NonDestructive)
    DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE equ 00000001h
    DEVICE_DATA_SET_RANGE struct
      StartingOffset LONGLONG ?
      LengthInBytes DWORDLONG ?
    DEVICE_DATA_SET_RANGE ends
    _DEVICE_DATA_SET_RANGE typedef DEVICE_DATA_SET_RANGE
    PDEVICE_DATA_SET_RANGE typedef ptr DEVICE_DATA_SET_RANGE
    DEVICE_DSM_RANGE typedef DEVICE_DATA_SET_RANGE
    PDEVICE_DSM_RANGE typedef ptr DEVICE_DATA_SET_RANGE
    
    DEVICE_MANAGE_DATA_SET_ATTRIBUTES struct
      Size_ DWORD ?
      Action DEVICE_DSM_ACTION ?
      Flags DWORD ?
      ParameterBlockOffset DWORD ?
      ParameterBlockLength DWORD ?
      DataSetRangesOffset DWORD ?
      DataSetRangesLength DWORD ?
    DEVICE_MANAGE_DATA_SET_ATTRIBUTES ends
    _DEVICE_MANAGE_DATA_SET_ATTRIBUTES typedef DEVICE_MANAGE_DATA_SET_ATTRIBUTES
    PDEVICE_MANAGE_DATA_SET_ATTRIBUTES typedef ptr DEVICE_MANAGE_DATA_SET_ATTRIBUTES
    DEVICE_DSM_INPUT typedef DEVICE_MANAGE_DATA_SET_ATTRIBUTES
    PDEVICE_DSM_INPUT typedef ptr DEVICE_MANAGE_DATA_SET_ATTRIBUTES
    
    DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT struct
      Size_ DWORD ?
      Action DEVICE_DSM_ACTION ?
      Flags DWORD ?
      OperationStatus DWORD ?
      ExtendedError DWORD ?
      TargetDetailedError DWORD ?
      ReservedStatus DWORD ?
      OutputBlockOffset DWORD ?
      OutputBlockLength DWORD ?
    DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT ends
    _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT typedef DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT typedef ptr DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    DEVICE_DSM_OUTPUT typedef DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    PDEVICE_DSM_OUTPUT typedef ptr DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    
    DEVICE_DSM_DEFINITION struct
      Action DEVICE_DSM_ACTION ?
      SingleRange BOOLEAN ?
      ParameterBlockAlignment DWORD ?
      ParameterBlockLength DWORD ?
      HasOutput BOOLEAN ?
      OutputBlockAlignment DWORD ?
      OutputBlockLength DWORD ?
    DEVICE_DSM_DEFINITION ends
    _DEVICE_DSM_DEFINITION typedef DEVICE_DSM_DEFINITION
    PDEVICE_DSM_DEFINITION typedef ptr DEVICE_DSM_DEFINITION
    
    DeviceDsmDefinition_None equ { DeviceDsmAction_None, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED equ 80000000h
    DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT equ 40000000h
    DeviceDsmDefinition_Trim equ { DeviceDsmAction_Trim, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_NOTIFY_FLAG_BEGIN equ 00000001h
    DEVICE_DSM_NOTIFY_FLAG_END equ 00000002h
    DEVICE_DSM_NOTIFICATION_PARAMETERS struct
      Size_ DWORD ?
      Flags DWORD ?
      NumFileTypeIDs DWORD ?
      FileTypeID GUID ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_NOTIFICATION_PARAMETERS ends
    _DEVICE_DSM_NOTIFICATION_PARAMETERS typedef DEVICE_DSM_NOTIFICATION_PARAMETERS
    PDEVICE_DSM_NOTIFICATION_PARAMETERS typedef ptr DEVICE_DSM_NOTIFICATION_PARAMETERS
    
    DeviceDsmDefinition_Notification equ { DeviceDsmAction_Notification, FALSE, __alignof(DEVICE_DSM_NOTIFICATION_PARAMETERS), sizeof(DEVICE_DSM_NOTIFICATION_PARAMETERS), FALSE, 0, 0 }
    STORAGE_OFFLOAD_MAX_TOKEN_LENGTH equ 512
    STORAGE_OFFLOAD_TOKEN_ID_LENGTH equ 1F8h
    STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA equ 0FFFF0001h
    STORAGE_OFFLOAD_TOKEN struct
      TokenType BYTE 4 dup (?)
      Reserved BYTE 2 dup (?)
      TokenIdLength BYTE 2 dup (?)
      union
        struct StorageOffloadZeroDataToken
          Reserved2 BYTE STORAGE_OFFLOAD_TOKEN_ID_LENGTH dup (?)
        ends
        Token BYTE STORAGE_OFFLOAD_TOKEN_ID_LENGTH dup (?)
      ends
    STORAGE_OFFLOAD_TOKEN ends
    _STORAGE_OFFLOAD_TOKEN typedef STORAGE_OFFLOAD_TOKEN
    PSTORAGE_OFFLOAD_TOKEN typedef ptr STORAGE_OFFLOAD_TOKEN
    
    MAKE_ZERO_TOKEN macro T
      exitm <(((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 0 ] = 0FFh, ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 1 ] = 0FFh, ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 2 ] = 00h, ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 3 ] = 01h, ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenIdLength [ 0 ] = 01h, ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenIdLength [ 1 ] = 0F8h)>
    endm
    IS_ZERO_TOKEN macro T
      exitm <((((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 0 ] == 0FFh and ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 1 ] == 0FFh and ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 2 ] == 00h and ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenType [ 3 ] == 01h and ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenIdLength [ 0 ] == 01h and ((PSTORAGE_OFFLOAD_TOKEN) T) - TokenIdLength [ 1 ] == 0F8h))>
    endm
    DEVICE_DSM_OFFLOAD_READ_PARAMETERS struct
      Flags DWORD ?
      TimeToLive DWORD ?
      Reserved DWORD 2 dup (?)
    DEVICE_DSM_OFFLOAD_READ_PARAMETERS ends
    _DEVICE_DSM_OFFLOAD_READ_PARAMETERS typedef DEVICE_DSM_OFFLOAD_READ_PARAMETERS
    PDEVICE_DSM_OFFLOAD_READ_PARAMETERS typedef ptr DEVICE_DSM_OFFLOAD_READ_PARAMETERS
    
    STORAGE_OFFLOAD_READ_RANGE_TRUNCATED equ 00000001h
    STORAGE_OFFLOAD_READ_OUTPUT struct
      OffloadReadFlags DWORD ?
      Reserved DWORD ?
      LengthProtected DWORDLONG ?
      TokenLength DWORD ?
      Token STORAGE_OFFLOAD_TOKEN <>
    STORAGE_OFFLOAD_READ_OUTPUT ends
    _STORAGE_OFFLOAD_READ_OUTPUT typedef STORAGE_OFFLOAD_READ_OUTPUT
    PSTORAGE_OFFLOAD_READ_OUTPUT typedef ptr STORAGE_OFFLOAD_READ_OUTPUT
    
    DeviceDsmDefinition_OffloadRead equ <{ DeviceDsmAction_OffloadRead, FALSE, __alignof(DEVICE_DSM_OFFLOAD_READ_PARAMETERS), sizeof(DEVICE_DSM_OFFLOAD_READ_PARAMETERS), FALSE, __alignof(STORAGE_OFFLOAD_READ_OUTPUT), sizeof(STORAGE_OFFLOAD_READ_OUTPUT) }>
    DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS struct
      Flags DWORD ?
      Reserved DWORD ?
      TokenOffset DWORDLONG ?
      Token STORAGE_OFFLOAD_TOKEN <>
    DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS ends
    _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS typedef DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
    PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS typedef ptr DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
    
    STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED equ 0001h
    STORAGE_OFFLOAD_TOKEN_INVALID equ 0002h
    STORAGE_OFFLOAD_WRITE_OUTPUT struct
      OffloadWriteFlags DWORD ?
      Reserved DWORD ?
      LengthCopied DWORDLONG ?
    STORAGE_OFFLOAD_WRITE_OUTPUT ends
    _STORAGE_OFFLOAD_WRITE_OUTPUT typedef STORAGE_OFFLOAD_WRITE_OUTPUT
    PSTORAGE_OFFLOAD_WRITE_OUTPUT typedef ptr STORAGE_OFFLOAD_WRITE_OUTPUT
    
    DeviceDsmDefinition_OffloadWrite equ <{ DeviceDsmAction_OffloadWrite, FALSE, __alignof(DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS), sizeof(DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS), FALSE, __alignof(STORAGE_OFFLOAD_WRITE_OUTPUT), sizeof(STORAGE_OFFLOAD_WRITE_OUTPUT) }>
    DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY equ 40000000h
    DEVICE_DATA_SET_LBP_STATE_PARAMETERS struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      OutputVersion DWORD ?
    DEVICE_DATA_SET_LBP_STATE_PARAMETERS ends
    _DEVICE_DATA_SET_LBP_STATE_PARAMETERS typedef DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    PDEVICE_DATA_SET_LBP_STATE_PARAMETERS typedef ptr DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    DEVICE_DSM_ALLOCATION_PARAMETERS typedef DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    PDEVICE_DSM_ALLOCATION_PARAMETERS typedef ptr DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    
    DEVICE_DSM_PARAMETERS_V1 equ 1
    DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1 equ <DEVICE_DSM_PARAMETERS_V1>
    DEVICE_DATA_SET_LB_PROVISIONING_STATE struct
      Size_ DWORD ?
      Version DWORD ?
      SlabSizeInBytes DWORDLONG ?
      SlabOffsetDeltaInBytes DWORD ?
      SlabAllocationBitMapBitCount DWORD ?
      SlabAllocationBitMapLength DWORD ?
      SlabAllocationBitMap DWORD ANYSIZE_ARRAY dup (?)
    DEVICE_DATA_SET_LB_PROVISIONING_STATE ends
    _DEVICE_DATA_SET_LB_PROVISIONING_STATE typedef DEVICE_DATA_SET_LB_PROVISIONING_STATE
    PDEVICE_DATA_SET_LB_PROVISIONING_STATE typedef ptr DEVICE_DATA_SET_LB_PROVISIONING_STATE
    DEVICE_DSM_ALLOCATION_OUTPUT typedef DEVICE_DATA_SET_LB_PROVISIONING_STATE
    PDEVICE_DSM_ALLOCATION_OUTPUT typedef ptr DEVICE_DATA_SET_LB_PROVISIONING_STATE
    
    DEVICE_DSM_ALLOCATION_OUTPUT_V1 equ <(sizeof(DEVICE_DSM_ALLOCATION_OUTPUT))>
    DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1 equ <DEVICE_DSM_ALLOCATION_OUTPUT_V1>
    DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 struct
      Size_ DWORD ?
      Version DWORD ?
      SlabSizeInBytes DWORDLONG ?
      SlabOffsetDeltaInBytes DWORDLONG ?
      SlabAllocationBitMapBitCount DWORD ?
      SlabAllocationBitMapLength DWORD ?
      SlabAllocationBitMap DWORD ANYSIZE_ARRAY dup (?)
    DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 ends
    _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 typedef DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 typedef ptr DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    DEVICE_DSM_ALLOCATION_OUTPUT2 typedef DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    PDEVICE_DSM_ALLOCATION_OUTPUT2 typedef ptr DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    
    DEVICE_DSM_ALLOCATION_OUTPUT_V2 equ <(sizeof(DEVICE_DSM_ALLOCATION_OUTPUT2))>
    DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2 equ <DEVICE_DSM_ALLOCATION_OUTPUT_V2>
    DeviceDsmDefinition_Allocation equ <{ DeviceDsmAction_Allocation, TRUE, __alignof(DEVICE_DSM_ALLOCATION_PARAMETERS), sizeof(DEVICE_DSM_ALLOCATION_PARAMETERS), TRUE, __alignof(DEVICE_DSM_ALLOCATION_OUTPUT2), sizeof(DEVICE_DSM_ALLOCATION_OUTPUT2) }>
    DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT equ 40000000h
    DEVICE_DATA_SET_REPAIR_PARAMETERS struct
      NumberOfRepairCopies DWORD ?
      SourceCopy DWORD ?
      RepairCopies DWORD ANYSIZE_ARRAY dup (?)
    DEVICE_DATA_SET_REPAIR_PARAMETERS ends
    _DEVICE_DATA_SET_REPAIR_PARAMETERS typedef DEVICE_DATA_SET_REPAIR_PARAMETERS
    PDEVICE_DATA_SET_REPAIR_PARAMETERS typedef ptr DEVICE_DATA_SET_REPAIR_PARAMETERS
    DEVICE_DSM_REPAIR_PARAMETERS typedef DEVICE_DATA_SET_REPAIR_PARAMETERS
    PDEVICE_DSM_REPAIR_PARAMETERS typedef ptr DEVICE_DATA_SET_REPAIR_PARAMETERS
    
    GET_REPAIR_TOPOLOGY_ID macro R
      exitm <RtlOffsetToPointer (R, ALIGN_UP_BY (FIELD_OFFSET(DEVICE_DATA_SET_REPAIR_PARAMETERS, RepairCopies) + sizeof(DWORD) * R - NumberOfRepairCopies, 8))>
    endm
    DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT equ 20000000h
    DEVICE_DATA_SET_REPAIR_OUTPUT struct
      ParityExtent DEVICE_DSM_RANGE <>
    DEVICE_DATA_SET_REPAIR_OUTPUT ends
    _DEVICE_DATA_SET_REPAIR_OUTPUT typedef DEVICE_DATA_SET_REPAIR_OUTPUT
    PDEVICE_DATA_SET_REPAIR_OUTPUT typedef ptr DEVICE_DATA_SET_REPAIR_OUTPUT
    DEVICE_DSM_REPAIR_OUTPUT typedef DEVICE_DATA_SET_REPAIR_OUTPUT
    PDEVICE_DSM_REPAIR_OUTPUT typedef ptr DEVICE_DATA_SET_REPAIR_OUTPUT
    
    DeviceDsmDefinition_Repair equ <{ DeviceDsmAction_Repair, TRUE, __alignof(DEVICE_DSM_REPAIR_PARAMETERS), sizeof(DEVICE_DSM_REPAIR_PARAMETERS), TRUE, __alignof(DEVICE_DSM_REPAIR_OUTPUT), sizeof(DEVICE_DSM_REPAIR_OUTPUT) }>
    DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC equ 10000000h
    DEVICE_DATA_SET_SCRUB_OUTPUT struct
      BytesProcessed DWORDLONG ?
      BytesRepaired DWORDLONG ?
      BytesFailed DWORDLONG ?
    DEVICE_DATA_SET_SCRUB_OUTPUT ends
    _DEVICE_DATA_SET_SCRUB_OUTPUT typedef DEVICE_DATA_SET_SCRUB_OUTPUT
    PDEVICE_DATA_SET_SCRUB_OUTPUT typedef ptr DEVICE_DATA_SET_SCRUB_OUTPUT
    DEVICE_DSM_SCRUB_OUTPUT typedef DEVICE_DATA_SET_SCRUB_OUTPUT
    PDEVICE_DSM_SCRUB_OUTPUT typedef ptr DEVICE_DATA_SET_SCRUB_OUTPUT
    
    DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT equ 20000000h
    DEVICE_DATA_SET_SCRUB_EX_OUTPUT struct
      BytesProcessed DWORDLONG ?
      BytesRepaired DWORDLONG ?
      BytesFailed DWORDLONG ?
      ParityExtent DEVICE_DSM_RANGE <>
    DEVICE_DATA_SET_SCRUB_EX_OUTPUT ends
    _DEVICE_DATA_SET_SCRUB_EX_OUTPUT typedef DEVICE_DATA_SET_SCRUB_EX_OUTPUT
    PDEVICE_DATA_SET_SCRUB_EX_OUTPUT typedef ptr DEVICE_DATA_SET_SCRUB_EX_OUTPUT
    DEVICE_DSM_SCRUB_OUTPUT2 typedef DEVICE_DATA_SET_SCRUB_EX_OUTPUT
    PDEVICE_DSM_SCRUB_OUTPUT2 typedef ptr DEVICE_DATA_SET_SCRUB_EX_OUTPUT
    
    DeviceDsmDefinition_Scrub equ { DeviceDsmAction_Scrub, FALSE, 0, 0, TRUE, __alignof(DEVICE_DSM_SCRUB_OUTPUT2), sizeof(DEVICE_DSM_SCRUB_OUTPUT2) }
    DeviceDsmDefinition_DrtQuery equ { DeviceDsmAction_DrtQuery, FALSE, 0, 0, TRUE, 0, 0 }
    DeviceDsmDefinition_DrtClear equ { DeviceDsmAction_DrtClear, FALSE, 0, 0, FALSE, 0, 0 }
    DeviceDsmDefinition_DrtDisable equ { DeviceDsmAction_DrtDisable, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_TIERING_QUERY_INPUT struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      NumberOfTierIds DWORD ?
      TierIds GUID ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_TIERING_QUERY_INPUT ends
    _DEVICE_DSM_TIERING_QUERY_INPUT typedef DEVICE_DSM_TIERING_QUERY_INPUT
    PDEVICE_DSM_TIERING_QUERY_INPUT typedef ptr DEVICE_DSM_TIERING_QUERY_INPUT
    DEVICE_DSM_TIERING_QUERY_PARAMETERS typedef DEVICE_DSM_TIERING_QUERY_INPUT
    PDEVICE_DSM_TIERING_QUERY_PARAMETERS typedef ptr DEVICE_DSM_TIERING_QUERY_INPUT
    
    STORAGE_TIER_REGION struct
      TierId GUID <>
      Offset_ DWORDLONG ?
      Length_ DWORDLONG ?
    STORAGE_TIER_REGION ends
    _STORAGE_TIER_REGION typedef STORAGE_TIER_REGION
    PSTORAGE_TIER_REGION typedef ptr STORAGE_TIER_REGION
    
    DEVICE_DSM_TIERING_QUERY_OUTPUT struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      Reserved DWORD ?
      Alignment DWORDLONG ?
      TotalNumberOfRegions DWORD ?
      NumberOfRegionsReturned DWORD ?
      Regions STORAGE_TIER_REGION ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_TIERING_QUERY_OUTPUT ends
    _DEVICE_DSM_TIERING_QUERY_OUTPUT typedef DEVICE_DSM_TIERING_QUERY_OUTPUT
    PDEVICE_DSM_TIERING_QUERY_OUTPUT typedef ptr DEVICE_DSM_TIERING_QUERY_OUTPUT
    
    DeviceDsmDefinition_TieringQuery equ <{ DeviceDsmAction_TieringQuery, TRUE, __alignof(DEVICE_DSM_TIERING_QUERY_PARAMETERS), sizeof(DEVICE_DSM_TIERING_QUERY_PARAMETERS), TRUE, __alignof(DEVICE_DSM_TIERING_QUERY_OUTPUT), sizeof(DEVICE_DSM_TIERING_QUERY_OUTPUT) }>
    DeviceDsmDefinition_Map equ { DeviceDsmAction_Map, FALSE, 0, 0, FALSE, 0, 0 }
    DeviceDsmDefinition_RegenerateParity equ { DeviceDsmAction_RegenerateParity, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS struct
      Size_ DWORD ?
      TargetPriority BYTE ?
      Reserved BYTE 3 dup (?)
    DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS ends
    _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS typedef DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
    PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS typedef ptr DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
    
    DeviceDsmDefinition_NvCache_Change_Priority equ { DeviceDsmAction_NvCache_Change_Priority, FALSE, __alignof(DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS), sizeof(DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS), FALSE, 0, 0 }
    DeviceDsmDefinition_NvCache_Evict equ { DeviceDsmAction_NvCache_Evict, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT struct
      TopologyRangeBytes DWORDLONG ?
      TopologyId BYTE 16 dup (?)
    DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT ends
    _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT typedef DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT typedef ptr DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT typedef DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT typedef ptr DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    
    DeviceDsmDefinition_TopologyIdQuery equ { DeviceDsmAction_TopologyIdQuery, FALSE, 0, 0, TRUE, __alignof(DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT), sizeof(DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT) }
    DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES equ 10000000h
    DEVICE_STORAGE_ADDRESS_RANGE struct
      StartAddress LONGLONG ?
      LengthInBytes DWORDLONG ?
    DEVICE_STORAGE_ADDRESS_RANGE ends
    _DEVICE_STORAGE_ADDRESS_RANGE typedef DEVICE_STORAGE_ADDRESS_RANGE
    PDEVICE_STORAGE_ADDRESS_RANGE typedef ptr DEVICE_STORAGE_ADDRESS_RANGE
    
    DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT struct
      Version DWORD ?
      Flags DWORD ?
      TotalNumberOfRanges DWORD ?
      NumberOfRangesReturned DWORD ?
      Ranges DEVICE_STORAGE_ADDRESS_RANGE ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT ends
    _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT typedef DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
    PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT typedef ptr DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
    
    DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1 equ 1
    DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1 equ <DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1>
    DeviceDsmDefinition_GetPhysicalAddresses equ { DeviceDsmAction_GetPhysicalAddresses, FALSE, 0, 0, TRUE, __alignof(DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT), sizeof(DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT) }
    DeviceDsmDefinition_ScopeRegen equ { DeviceDsmAction_ScopeRegen, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_REPORT_ZONES_PARAMETERS struct
      Size_ DWORD ?
      ReportOption BYTE ?
      Partial BYTE ?
      Reserved BYTE 2 dup (?)
    DEVICE_DSM_REPORT_ZONES_PARAMETERS ends
    _DEVICE_DSM_REPORT_ZONES_PARAMETERS typedef DEVICE_DSM_REPORT_ZONES_PARAMETERS
    PDEVICE_DSM_REPORT_ZONES_PARAMETERS typedef ptr DEVICE_DSM_REPORT_ZONES_PARAMETERS
    
    STORAGE_ZONES_ATTRIBUTES typedef SDWORD
    ZonesAttributeTypeAndLengthMayDifferent equ 0
    ZonesAttributeTypeSameLengthSame equ 1
    ZonesAttributeTypeSameLastZoneLengthDifferent equ 2
    ZonesAttributeTypeMayDifferentLengthSame equ 3
    _STORAGE_ZONES_ATTRIBUTES typedef STORAGE_ZONES_ATTRIBUTES
    PSTORAGE_ZONES_ATTRIBUTES typedef ptr STORAGE_ZONES_ATTRIBUTES
    
    STORAGE_ZONE_CONDITION typedef SDWORD
    ZoneConditionConventional equ 00h
    ZoneConditionEmpty equ 01h
    ZoneConditionImplicitlyOpened equ 02h
    ZoneConditionExplicitlyOpened equ 03h
    ZoneConditionClosed equ 04h
    ZoneConditionReadOnly equ 0Dh
    ZoneConditionFull equ 0Eh
    ZoneConditionOffline equ 0Fh
    _STORAGE_ZONE_CONDITION typedef STORAGE_ZONE_CONDITION
    PSTORAGE_ZONE_CONDITION typedef ptr STORAGE_ZONE_CONDITION
    
    STORAGE_ZONE_DESCRIPTOR struct
      Size_ DWORD ?
      ZoneType STORAGE_ZONE_TYPES ?
      ZoneCondition STORAGE_ZONE_CONDITION ?
      ResetWritePointerRecommend BOOLEAN ?
      Reserved0 BYTE 3 dup (?)
      ZoneSize DWORDLONG ?
      WritePointerOffset DWORDLONG ?
    STORAGE_ZONE_DESCRIPTOR ends
    _STORAGE_ZONE_DESCRIPTOR typedef STORAGE_ZONE_DESCRIPTOR
    PSTORAGE_ZONE_DESCRIPTOR typedef ptr STORAGE_ZONE_DESCRIPTOR
    
    DEVICE_DSM_REPORT_ZONES_DATA struct
      Size_ DWORD ?
      ZoneCount DWORD ?
      Attributes STORAGE_ZONES_ATTRIBUTES ?
      Reserved0 DWORD ?
      ZoneDescriptors STORAGE_ZONE_DESCRIPTOR ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_REPORT_ZONES_DATA ends
    _DEVICE_DSM_REPORT_ZONES_DATA typedef DEVICE_DSM_REPORT_ZONES_DATA
    PDEVICE_DSM_REPORT_ZONES_DATA typedef ptr DEVICE_DSM_REPORT_ZONES_DATA
    DEVICE_DSM_REPORT_ZONES_OUTPUT typedef DEVICE_DSM_REPORT_ZONES_DATA
    PDEVICE_DSM_REPORT_ZONES_OUTPUT typedef ptr DEVICE_DSM_REPORT_ZONES_DATA
    
    DeviceDsmDefinition_ReportZones equ <{ DeviceDsmAction_ReportZones, FALSE, __alignof(DEVICE_DSM_REPORT_ZONES_PARAMETERS), sizeof(DEVICE_DSM_REPORT_ZONES_PARAMETERS), TRUE, __alignof(DEVICE_DSM_REPORT_ZONES_OUTPUT), sizeof(DEVICE_DSM_REPORT_ZONES_OUTPUT) }>
    DeviceDsmDefinition_OpenZone equ { DeviceDsmAction_OpenZone, FALSE, 0, 0, FALSE, 0, 0 }
    DeviceDsmDefinition_FinishZone equ { DeviceDsmAction_FinishZone, FALSE, 0, 0, FALSE, 0, 0 }
    DeviceDsmDefinition_CloseZone equ { DeviceDsmAction_CloseZone, FALSE, 0, 0, FALSE, 0, 0 }
    DeviceDsmDefinition_ResetWritePointer equ { DeviceDsmAction_ResetWritePointer, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_STORAGE_RANGE_ATTRIBUTES struct
      LengthInBytes DWORDLONG ?
      union
        AllFlags DWORD ?
        struct
          DUMMYRECORDNAME_??63 record IsRangeBad_??63:1
          DUMMYRECORDNAME_??63 <>
        ends
      ends
      Reserved DWORD ?
    DEVICE_STORAGE_RANGE_ATTRIBUTES ends
    _DEVICE_STORAGE_RANGE_ATTRIBUTES typedef DEVICE_STORAGE_RANGE_ATTRIBUTES
    PDEVICE_STORAGE_RANGE_ATTRIBUTES typedef ptr DEVICE_STORAGE_RANGE_ATTRIBUTES
    
    DEVICE_STORAGE_NO_ERRORS equ 1h
    DEVICE_DSM_RANGE_ERROR_INFO struct
      Version DWORD ?
      Flags DWORD ?
      TotalNumberOfRanges DWORD ?
      NumberOfRangesReturned DWORD ?
      Ranges DEVICE_STORAGE_RANGE_ATTRIBUTES ANYSIZE_ARRAY dup (<>)
    DEVICE_DSM_RANGE_ERROR_INFO ends
    _DEVICE_DSM_RANGE_ERROR_INFO typedef DEVICE_DSM_RANGE_ERROR_INFO
    PDEVICE_DSM_RANGE_ERROR_INFO typedef ptr DEVICE_DSM_RANGE_ERROR_INFO
    DEVICE_DSM_RANGE_ERROR_OUTPUT typedef DEVICE_DSM_RANGE_ERROR_INFO
    PDEVICE_DSM_RANGE_ERROR_OUTPUT typedef ptr DEVICE_DSM_RANGE_ERROR_INFO
    
    DEVICE_DSM_RANGE_ERROR_OUTPUT_V1 equ 1
    DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1 equ <DEVICE_DSM_RANGE_ERROR_OUTPUT_V1>
    DeviceDsmDefinition_GetRangeErrorInfo equ { DeviceDsmAction_GetRangeErrorInfo, FALSE, 0, 0, TRUE, __alignof(DEVICE_DSM_RANGE_ERROR_OUTPUT), sizeof(DEVICE_DSM_RANGE_ERROR_OUTPUT) }
    DeviceDsmDefinition_WriteZeroes equ { DeviceDsmAction_WriteZeroes, FALSE, 0, 0, FALSE, 0, 0 }
    DEVICE_DSM_LOST_QUERY_PARAMETERS struct
      Version DWORD ?
      Granularity DWORDLONG ?
    DEVICE_DSM_LOST_QUERY_PARAMETERS ends
    _DEVICE_DSM_LOST_QUERY_PARAMETERS typedef DEVICE_DSM_LOST_QUERY_PARAMETERS
    PDEVICE_DSM_LOST_QUERY_PARAMETERS typedef ptr DEVICE_DSM_LOST_QUERY_PARAMETERS
    
    DEVICE_DSM_LOST_QUERY_OUTPUT struct
      Version DWORD ?
      Size_ DWORD ?
      Alignment DWORDLONG ?
      NumberOfBits DWORD ?
      BitMap DWORD ANYSIZE_ARRAY dup (?)
    DEVICE_DSM_LOST_QUERY_OUTPUT ends
    _DEVICE_DSM_LOST_QUERY_OUTPUT typedef DEVICE_DSM_LOST_QUERY_OUTPUT
    PDEVICE_DSM_LOST_QUERY_OUTPUT typedef ptr DEVICE_DSM_LOST_QUERY_OUTPUT
    
    DeviceDsmDefinition_LostQuery equ <{ DeviceDsmAction_LostQuery, TRUE, __alignof(DEVICE_DSM_LOST_QUERY_PARAMETERS), sizeof(DEVICE_DSM_LOST_QUERY_PARAMETERS), TRUE, __alignof(DEVICE_DSM_LOST_QUERY_OUTPUT), sizeof(DEVICE_DSM_LOST_QUERY_OUTPUT) }>
    DEVICE_DSM_FREE_SPACE_OUTPUT struct
      Version DWORD ?
      FreeSpace DWORDLONG ?
    DEVICE_DSM_FREE_SPACE_OUTPUT ends
    _DEVICE_DSM_FREE_SPACE_OUTPUT typedef DEVICE_DSM_FREE_SPACE_OUTPUT
    PDEVICE_DSM_FREE_SPACE_OUTPUT typedef ptr DEVICE_DSM_FREE_SPACE_OUTPUT
    
    DeviceDsmDefinition_GetFreeSpace equ { DeviceDsmAction_GetFreeSpace, FALSE, 0, 0, TRUE, __alignof(DEVICE_DSM_FREE_SPACE_OUTPUT), sizeof(DEVICE_DSM_FREE_SPACE_OUTPUT) }
    DEVICE_DSM_ROUND_UP macro _a, _b
      exitm <(((_a) + ((_b) - 1)) / (_b) * (_b))>
    endm
    DEVICE_DSM_ROUND_DN macro _a, _b
      exitm <(((_a)) / (_b) * (_b))>
    endm
    DeviceDsmParameterBlock proto WIN_STD_CALL_CONV :PDEVICE_DSM_INPUT
    DeviceDsmDataSetRanges proto WIN_STD_CALL_CONV :PDEVICE_DSM_INPUT
    DeviceDsmNumberOfDataSetRanges proto WIN_STD_CALL_CONV :PDEVICE_DSM_INPUT
    DeviceDsmGetInputLength proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :DWORD, :DWORD
    DeviceDsmGetNumberOfDataSetRanges proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :DWORD, :DWORD
    DeviceDsmInitializeInput proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :PDEVICE_DSM_INPUT, :DWORD, :DWORD, :PVOID, :DWORD
    DeviceDsmAddDataSetRange proto WIN_STD_CALL_CONV :PDEVICE_DSM_INPUT, :DWORD, :LONGLONG, :DWORDLONG
    DeviceDsmValidateInput proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :PDEVICE_DSM_INPUT, :DWORD
    DeviceDsmOutputBlock proto WIN_STD_CALL_CONV :PDEVICE_DSM_OUTPUT
    DeviceDsmGetOutputLength proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :DWORD
    DeviceDsmGetOutputBlockLength proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :DWORD
    DeviceDsmInitializeOutput proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :PDEVICE_DSM_OUTPUT, :DWORD, :DWORD
    DeviceDsmValidateOutput proto WIN_STD_CALL_CONV :PDEVICE_DSM_DEFINITION, :PDEVICE_DSM_OUTPUT, :DWORD
    STORAGE_GET_BC_PROPERTIES_OUTPUT struct
      MaximumRequestsPerPeriod DWORD ?
      MinimumPeriod DWORD ?
      MaximumRequestSize DWORDLONG ?
      EstimatedTimePerRequest DWORD ?
      NumOutStandingRequests DWORD ?
      RequestSize DWORDLONG ?
    STORAGE_GET_BC_PROPERTIES_OUTPUT ends
    _STORAGE_GET_BC_PROPERTIES_OUTPUT typedef STORAGE_GET_BC_PROPERTIES_OUTPUT
    PSTORAGE_GET_BC_PROPERTIES_OUTPUT typedef ptr STORAGE_GET_BC_PROPERTIES_OUTPUT
    
    IOCTL_STORAGE_BC_VERSION equ 1
    STORAGE_ALLOCATE_BC_STREAM_INPUT struct
      Version DWORD ?
      RequestsPerPeriod DWORD ?
      Period DWORD ?
      RetryFailures BOOLEAN ?
      Discardable BOOLEAN ?
      Reserved1 BOOLEAN 2 dup (?)
      AccessType DWORD ?
      AccessMode DWORD ?
    STORAGE_ALLOCATE_BC_STREAM_INPUT ends
    _STORAGE_ALLOCATE_BC_STREAM_INPUT typedef STORAGE_ALLOCATE_BC_STREAM_INPUT
    PSTORAGE_ALLOCATE_BC_STREAM_INPUT typedef ptr STORAGE_ALLOCATE_BC_STREAM_INPUT
    
    STORAGE_ALLOCATE_BC_STREAM_OUTPUT struct
      RequestSize DWORDLONG ?
      NumOutStandingRequests DWORD ?
    STORAGE_ALLOCATE_BC_STREAM_OUTPUT ends
    _STORAGE_ALLOCATE_BC_STREAM_OUTPUT typedef STORAGE_ALLOCATE_BC_STREAM_OUTPUT
    PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT typedef ptr STORAGE_ALLOCATE_BC_STREAM_OUTPUT
    
    STORAGE_PRIORITY_HINT_SUPPORTED equ 0001h
    STORAGE_PRIORITY_HINT_SUPPORT struct
      SupportFlags DWORD ?
    STORAGE_PRIORITY_HINT_SUPPORT ends
    _STORAGE_PRIORITY_HINT_SUPPORT typedef STORAGE_PRIORITY_HINT_SUPPORT
    PSTORAGE_PRIORITY_HINT_SUPPORT typedef ptr STORAGE_PRIORITY_HINT_SUPPORT
    
    STORAGE_DIAGNOSTIC_LEVEL typedef SDWORD
    StorageDiagnosticLevelDefault equ 0
    StorageDiagnosticLevelMax equ 1
    _STORAGE_DIAGNOSTIC_LEVEL typedef STORAGE_DIAGNOSTIC_LEVEL
    PSTORAGE_DIAGNOSTIC_LEVEL typedef ptr STORAGE_DIAGNOSTIC_LEVEL
    
    STORAGE_DIAGNOSTIC_TARGET_TYPE typedef SDWORD
    StorageDiagnosticTargetTypeUndefined equ 0
    StorageDiagnosticTargetTypePort equ 1
    StorageDiagnosticTargetTypeMiniport equ 2
    StorageDiagnosticTargetTypeHbaFirmware equ 3
    StorageDiagnosticTargetTypeMax equ 4
    _STORAGE_DIAGNOSTIC_TARGET_TYPE typedef STORAGE_DIAGNOSTIC_TARGET_TYPE
    PSTORAGE_DIAGNOSTIC_TARGET_TYPE typedef ptr STORAGE_DIAGNOSTIC_TARGET_TYPE
    
    STORAGE_DIAGNOSTIC_REQUEST struct
      Version DWORD ?
      Size_ DWORD ?
      Reserved DWORD ?
      TargetType STORAGE_DIAGNOSTIC_TARGET_TYPE ?
      Level STORAGE_DIAGNOSTIC_LEVEL ?
    STORAGE_DIAGNOSTIC_REQUEST ends
    _STORAGE_DIAGNOSTIC_REQUEST typedef STORAGE_DIAGNOSTIC_REQUEST
    PSTORAGE_DIAGNOSTIC_REQUEST typedef ptr STORAGE_DIAGNOSTIC_REQUEST
    
    STORAGE_DIAGNOSTIC_DATA struct
      Version DWORD ?
      Size_ DWORD ?
      ProviderId GUID <>
      BufferSize DWORD ?
      Reserved DWORD ?
      DiagnosticDataBuffer BYTE ANYSIZE_ARRAY dup (?)
    STORAGE_DIAGNOSTIC_DATA ends
    _STORAGE_DIAGNOSTIC_DATA typedef STORAGE_DIAGNOSTIC_DATA
    PSTORAGE_DIAGNOSTIC_DATA typedef ptr STORAGE_DIAGNOSTIC_DATA
    
    PHYSICAL_ELEMENT_STATUS_REQUEST struct
      Version DWORD ?
      Size_ DWORD ?
      StartingElement DWORD ?
      Filter BYTE ?
      ReportType BYTE ?
      Reserved BYTE 2 dup (?)
    PHYSICAL_ELEMENT_STATUS_REQUEST ends
    _PHYSICAL_ELEMENT_STATUS_REQUEST typedef PHYSICAL_ELEMENT_STATUS_REQUEST
    PPHYSICAL_ELEMENT_STATUS_REQUEST typedef ptr PHYSICAL_ELEMENT_STATUS_REQUEST
    
    PHYSICAL_ELEMENT_STATUS_DESCRIPTOR struct
      Version DWORD ?
      Size_ DWORD ?
      ElementIdentifier DWORD ?
      PhysicalElementType BYTE ?
      PhysicalElementHealth BYTE ?
      Reserved1 BYTE 2 dup (?)
      AssociatedCapacity DWORDLONG ?
      Reserved2 DWORD 4 dup (?)
    PHYSICAL_ELEMENT_STATUS_DESCRIPTOR ends
    _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR typedef PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
    PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR typedef ptr PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
    
    PHYSICAL_ELEMENT_STATUS struct
      Version DWORD ?
      Size_ DWORD ?
      DescriptorCount DWORD ?
      ReturnedDescriptorCount DWORD ?
      ElementIdentifierBeingDepoped DWORD ?
      Reserved DWORD ?
      Descriptors PHYSICAL_ELEMENT_STATUS_DESCRIPTOR ANYSIZE_ARRAY dup (<>)
    PHYSICAL_ELEMENT_STATUS ends
    _PHYSICAL_ELEMENT_STATUS typedef PHYSICAL_ELEMENT_STATUS
    PPHYSICAL_ELEMENT_STATUS typedef ptr PHYSICAL_ELEMENT_STATUS
    
    REMOVE_ELEMENT_AND_TRUNCATE_REQUEST struct
      Version DWORD ?
      Size_ DWORD ?
      RequestCapacity DWORDLONG ?
      ElementIdentifier DWORD ?
      Reserved DWORD ?
    REMOVE_ELEMENT_AND_TRUNCATE_REQUEST ends
    _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST typedef REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
    PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST typedef ptr REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
    
    if Defined(_MSC_EXTENSIONS)
      STORAGE_MEDIA_SERIAL_NUMBER_DATA struct
        Reserved WORD ?
        SerialNumberLength WORD ?
        if  not Defined(__midl)
          SerialNumber BYTE 0 dup (?)
        endif
      STORAGE_MEDIA_SERIAL_NUMBER_DATA ends
      _STORAGE_MEDIA_SERIAL_NUMBER_DATA typedef STORAGE_MEDIA_SERIAL_NUMBER_DATA
      PSTORAGE_MEDIA_SERIAL_NUMBER_DATA typedef ptr STORAGE_MEDIA_SERIAL_NUMBER_DATA
      
    endif
    STORAGE_READ_CAPACITY struct
      Version DWORD ?
      Size_ DWORD ?
      BlockLength DWORD ?
      NumberOfBlocks LARGE_INTEGER <>
      DiskLength LARGE_INTEGER <>
    STORAGE_READ_CAPACITY ends
    _STORAGE_READ_CAPACITY typedef STORAGE_READ_CAPACITY
    PSTORAGE_READ_CAPACITY typedef ptr STORAGE_READ_CAPACITY
    
    WRITE_CACHE_TYPE typedef SDWORD
    WriteCacheTypeUnknown equ 0
    WriteCacheTypeNone equ 1
    WriteCacheTypeWriteBack equ 2
    WriteCacheTypeWriteThrough equ 3
    _WRITE_CACHE_TYPE typedef WRITE_CACHE_TYPE
    
    WRITE_CACHE_ENABLE typedef SDWORD
    WriteCacheEnableUnknown equ 0
    WriteCacheDisabled equ 1
    WriteCacheEnabled equ 2
    _WRITE_CACHE_ENABLE typedef WRITE_CACHE_ENABLE
    
    WRITE_CACHE_CHANGE typedef SDWORD
    WriteCacheChangeUnknown equ 0
    WriteCacheNotChangeable equ 1
    WriteCacheChangeable equ 2
    _WRITE_CACHE_CHANGE typedef WRITE_CACHE_CHANGE
    
    WRITE_THROUGH typedef SDWORD
    WriteThroughUnknown equ 0
    WriteThroughNotSupported equ 1
    WriteThroughSupported equ 2
    _WRITE_THROUGH typedef WRITE_THROUGH
    
    STORAGE_WRITE_CACHE_PROPERTY struct
      Version DWORD ?
      Size_ DWORD ?
      WriteCacheType WRITE_CACHE_TYPE ?
      WriteCacheEnabled WRITE_CACHE_ENABLE ?
      WriteCacheChangeable WRITE_CACHE_CHANGE ?
      WriteThroughSupported WRITE_THROUGH ?
      FlushCacheSupported BOOLEAN ?
      UserDefinedPowerProtection BOOLEAN ?
      NVCacheEnabled BOOLEAN ?
    STORAGE_WRITE_CACHE_PROPERTY ends
    _STORAGE_WRITE_CACHE_PROPERTY typedef STORAGE_WRITE_CACHE_PROPERTY
    PSTORAGE_WRITE_CACHE_PROPERTY typedef ptr STORAGE_WRITE_CACHE_PROPERTY
    
    if Defined(_MSC_EXTENSIONS)
      PERSISTENT_RESERVE_COMMAND struct
        Version DWORD ?
        Size_ DWORD ?
        union
          struct PR_IN
            PR_IN_??64 record ServiceAction_??64:5, Reserved1_??64:3
            PR_IN_??64 <>
            AllocationLength WORD ?
          ends
          struct PR_OUT
            PR_OUT_??65 record ServiceAction_??65:5, Reserved1_??65:3, Type_??65:4, Scope_??65:4
            PR_OUT_??65 <>
            if  not Defined(__midl)
              ParameterList BYTE 0 dup (?)
            endif
          ends
        ends
      PERSISTENT_RESERVE_COMMAND ends
      _PERSISTENT_RESERVE_COMMAND typedef PERSISTENT_RESERVE_COMMAND
      PPERSISTENT_RESERVE_COMMAND typedef ptr PERSISTENT_RESERVE_COMMAND
      
    endif
    DEVICEDUMP_STRUCTURE_VERSION_V1 equ 1
    DEVICEDUMP_MAX_IDSTRING equ 32
    MAX_FW_BUCKET_ID_LENGTH equ 132
    STORAGE_CRASH_TELEMETRY_REGKEY equ <L("\Registry\Machine\System\CurrentControlSet\Control\CrashControl\StorageTelemetry")>
    STORAGE_DEVICE_TELEMETRY_REGKEY equ <L("\Registry\Machine\System\CurrentControlSet\Control\Storage\StorageTelemetry")>
    DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE typedef SDWORD
    TCCollectionBugCheck equ 1
    TCCollectionApplicationRequested equ 2
    TCCollectionDeviceRequested equ 3
    _DEVICEDUMP_COLLECTION_TYPE typedef DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE
    PDEVICEDUMP_COLLECTION_TYPE typedef ptr DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE
    
    DDUMP_FLAG_DATA_READ_FROM_DEVICE equ 0001h
    FW_ISSUEID_NO_ISSUE equ 00000000h
    FW_ISSUEID_UNKNOWN equ 0FFFFFFFFh
    include pshpack1.inc
    DEVICEDUMP_SUBSECTION_POINTER struct
      dwSize DWORD ?
      dwFlags DWORD ?
      dwOffset DWORD ?
    DEVICEDUMP_SUBSECTION_POINTER ends
    _DEVICEDUMP_SUBSECTION_POINTER typedef DEVICEDUMP_SUBSECTION_POINTER
    PDEVICEDUMP_SUBSECTION_POINTER typedef ptr DEVICEDUMP_SUBSECTION_POINTER
    
    DEVICEDUMP_STRUCTURE_VERSION struct
      dwSignature DWORD ?
      dwVersion DWORD ?
      dwSize DWORD ?
    DEVICEDUMP_STRUCTURE_VERSION ends
    _DEVICEDUMP_STRUCTURE_VERSION typedef DEVICEDUMP_STRUCTURE_VERSION
    PDEVICEDUMP_STRUCTURE_VERSION typedef ptr DEVICEDUMP_STRUCTURE_VERSION
    
    DEVICEDUMP_SECTION_HEADER struct
      guidDeviceDataId GUID <>
      sOrganizationID BYTE 16 dup (?)
      dwFirmwareRevision DWORD ?
      sModelNumber BYTE DEVICEDUMP_MAX_IDSTRING dup (?)
      szDeviceManufacturingID BYTE DEVICEDUMP_MAX_IDSTRING dup (?)
      dwFlags DWORD ?
      bRestrictedPrivateDataVersion DWORD ?
      dwFirmwareIssueId DWORD ?
      szIssueDescriptionString BYTE MAX_FW_BUCKET_ID_LENGTH dup (?)
    DEVICEDUMP_SECTION_HEADER ends
    _DEVICEDUMP_SECTION_HEADER typedef DEVICEDUMP_SECTION_HEADER
    PDEVICEDUMP_SECTION_HEADER typedef ptr DEVICEDUMP_SECTION_HEADER
    
    TC_PUBLIC_DEVICEDUMP_CONTENT_SMART equ 01h
    TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG equ 02h
    TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX equ 16
    TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH equ 16
    TC_PUBLIC_DATA_TYPE_ATAGP equ <"ATAGPLogPages">
    TC_PUBLIC_DATA_TYPE_ATASMART equ <"ATASMARTPages">
    GP_LOG_PAGE_DESCRIPTOR struct
      LogAddress WORD ?
      LogSectors WORD ?
    GP_LOG_PAGE_DESCRIPTOR ends
    _GP_LOG_PAGE_DESCRIPTOR typedef GP_LOG_PAGE_DESCRIPTOR
    PGP_LOG_PAGE_DESCRIPTOR typedef ptr GP_LOG_PAGE_DESCRIPTOR
    
    DEVICEDUMP_PUBLIC_SUBSECTION struct
      dwFlags DWORD ?
      GPLogTable GP_LOG_PAGE_DESCRIPTOR TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX dup (<>)
      szDescription CHAR TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH dup (?)
      bData BYTE ANYSIZE_ARRAY dup (?)
    DEVICEDUMP_PUBLIC_SUBSECTION ends
    _DEVICEDUMP_PUBLIC_SUBSECTION typedef DEVICEDUMP_PUBLIC_SUBSECTION
    PDEVICEDUMP_PUBLIC_SUBSECTION typedef ptr DEVICEDUMP_PUBLIC_SUBSECTION
    
    DEVICEDUMP_RESTRICTED_SUBSECTION struct
      bData BYTE ANYSIZE_ARRAY dup (?)
    DEVICEDUMP_RESTRICTED_SUBSECTION ends
    _DEVICEDUMP_RESTRICTED_SUBSECTION typedef DEVICEDUMP_RESTRICTED_SUBSECTION
    PDEVICEDUMP_RESTRICTED_SUBSECTION typedef ptr DEVICEDUMP_RESTRICTED_SUBSECTION
    
    DEVICEDUMP_PRIVATE_SUBSECTION struct
      dwFlags DWORD ?
      GPLogId GP_LOG_PAGE_DESCRIPTOR <>
      bData BYTE ANYSIZE_ARRAY dup (?)
    DEVICEDUMP_PRIVATE_SUBSECTION ends
    _DEVICEDUMP_PRIVATE_SUBSECTION typedef DEVICEDUMP_PRIVATE_SUBSECTION
    PDEVICEDUMP_PRIVATE_SUBSECTION typedef ptr DEVICEDUMP_PRIVATE_SUBSECTION
    
    DEVICEDUMP_STORAGEDEVICE_DATA struct
      Descriptor DEVICEDUMP_STRUCTURE_VERSION <>
      SectionHeader DEVICEDUMP_SECTION_HEADER <>
      dwBufferSize DWORD ?
      dwReasonForCollection DWORD ?
      PublicData DEVICEDUMP_SUBSECTION_POINTER <>
      RestrictedData DEVICEDUMP_SUBSECTION_POINTER <>
      PrivateData DEVICEDUMP_SUBSECTION_POINTER <>
    DEVICEDUMP_STORAGEDEVICE_DATA ends
    _DEVICEDUMP_STORAGEDEVICE_DATA typedef DEVICEDUMP_STORAGEDEVICE_DATA
    PDEVICEDUMP_STORAGEDEVICE_DATA typedef ptr DEVICEDUMP_STORAGEDEVICE_DATA
    
    CDB_SIZE equ 16
    TELEMETRY_COMMAND_SIZE equ 16
    TCRecordStorportSrbFunction equ Command [ 0 ]
    DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD struct
      Cdb BYTE CDB_SIZE dup (?)
      Command BYTE TELEMETRY_COMMAND_SIZE dup (?)
      StartTime DWORDLONG ?
      EndTime DWORDLONG ?
      OperationStatus DWORD ?
      OperationError DWORD ?
      union StackSpecific
        struct ExternalStack
          dwReserved DWORD ?
        ends
        struct AtaPort
          dwAtaPortSpecific DWORD ?
        ends
        struct StorPort
          SrbTag DWORD ?
        ends
      ends
    DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD ends
    _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD typedef DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
    PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD typedef ptr DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
    
    DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP struct
      Descriptor DEVICEDUMP_STRUCTURE_VERSION <>
      dwReasonForCollection DWORD ?
      cDriverName BYTE 16 dup (?)
      uiNumRecords DWORD ?
      RecordArray DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD ANYSIZE_ARRAY dup (<>)
    DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP ends
    _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP typedef DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
    PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP typedef ptr DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
    
    include poppack.inc
    DEVICEDUMP_CAP_PRIVATE_SECTION equ 00000001h
    DEVICEDUMP_CAP_RESTRICTED_SECTION equ 00000002h
    STORAGE_IDLE_POWER struct
      Version DWORD ?
      Size_ DWORD ?
      STORAGE_IDLE_POWER_??66 record WakeCapableHint_??66:1, D3ColdSupported_??66:1, Reserved_??66:30
      STORAGE_IDLE_POWER_??66 <>
      D3IdleTimeout DWORD ?
    STORAGE_IDLE_POWER ends
    _STORAGE_IDLE_POWER typedef STORAGE_IDLE_POWER
    PSTORAGE_IDLE_POWER typedef ptr STORAGE_IDLE_POWER
    
    STORAGE_POWERUP_REASON_TYPE typedef SDWORD
    StoragePowerupUnknown equ 0
    StoragePowerupIO equ 1
    StoragePowerupDeviceAttention equ 2
    _STORAGE_POWERUP_REASON_TYPE typedef STORAGE_POWERUP_REASON_TYPE
    PSTORAGE_POWERUP_REASON_TYPE typedef ptr STORAGE_POWERUP_REASON_TYPE
    
    STORAGE_IDLE_POWERUP_REASON struct
      Version DWORD ?
      Size_ DWORD ?
      PowerupReason STORAGE_POWERUP_REASON_TYPE ?
    STORAGE_IDLE_POWERUP_REASON ends
    _STORAGE_IDLE_POWERUP_REASON typedef STORAGE_IDLE_POWERUP_REASON
    PSTORAGE_IDLE_POWERUP_REASON typedef ptr STORAGE_IDLE_POWERUP_REASON
    
    STORAGE_IDLE_POWERUP_REASON_VERSION_V1 equ 1
    STORAGE_DEVICE_POWER_CAP_UNITS typedef SDWORD
    StorageDevicePowerCapUnitsPercent equ 0
    StorageDevicePowerCapUnitsMilliwatts equ 1
    _STORAGE_DEVICE_POWER_CAP_UNITS typedef STORAGE_DEVICE_POWER_CAP_UNITS
    PSTORAGE_DEVICE_POWER_CAP_UNITS typedef ptr STORAGE_DEVICE_POWER_CAP_UNITS
    
    STORAGE_DEVICE_POWER_CAP struct
      Version DWORD ?
      Size_ DWORD ?
      Units STORAGE_DEVICE_POWER_CAP_UNITS ?
      MaxPower DWORDLONG ?
    STORAGE_DEVICE_POWER_CAP ends
    _STORAGE_DEVICE_POWER_CAP typedef STORAGE_DEVICE_POWER_CAP
    PSTORAGE_DEVICE_POWER_CAP typedef ptr STORAGE_DEVICE_POWER_CAP
    
    STORAGE_DEVICE_POWER_CAP_VERSION_V1 equ 1
    STORAGE_RPMB_DATA_FRAME struct
      Stuff BYTE 196 dup (?)
      KeyOrMAC BYTE 32 dup (?)
      Data BYTE 256 dup (?)
      Nonce BYTE 16 dup (?)
      WriteCounter BYTE 4 dup (?)
      Address BYTE 2 dup (?)
      BlockCount BYTE 2 dup (?)
      OperationResult BYTE 2 dup (?)
      RequestOrResponseType BYTE 2 dup (?)
    STORAGE_RPMB_DATA_FRAME ends
    _STORAGE_RPMB_DATA_FRAME typedef STORAGE_RPMB_DATA_FRAME
    PSTORAGE_RPMB_DATA_FRAME typedef ptr STORAGE_RPMB_DATA_FRAME
    
    STORAGE_RPMB_COMMAND_TYPE typedef SDWORD
    StorRpmbProgramAuthKey equ 00000001h
    StorRpmbQueryWriteCounter equ 00000002h
    StorRpmbAuthenticatedWrite equ 00000003h
    StorRpmbAuthenticatedRead equ 00000004h
    StorRpmbReadResultRequest equ 00000005h
    StorRpmbAuthenticatedDeviceConfigWrite equ 00000006h
    StorRpmbAuthenticatedDeviceConfigRead equ 00000007h
    _STORAGE_RPMB_COMMAND_TYPE typedef STORAGE_RPMB_COMMAND_TYPE
    PSTORAGE_RPMB_COMMAND_TYPE typedef ptr STORAGE_RPMB_COMMAND_TYPE
    
    STORAGE_EVENT_NOTIFICATION struct
      Version DWORD ?
      Size_ DWORD ?
      Events DWORDLONG ?
    STORAGE_EVENT_NOTIFICATION ends
    _STORAGE_EVENT_NOTIFICATION typedef STORAGE_EVENT_NOTIFICATION
    PSTORAGE_EVENT_NOTIFICATION typedef ptr STORAGE_EVENT_NOTIFICATION
    
    STORAGE_EVENT_NOTIFICATION_VERSION_V1 equ 1
    STORAGE_EVENT_MEDIA_STATUS equ 0000000000000001h
    STORAGE_EVENT_DEVICE_STATUS equ 0000000000000002h
    STORAGE_EVENT_DEVICE_OPERATION equ 0000000000000004h
    STORAGE_EVENT_ALL equ <(STORAGE_EVENT_MEDIA_STATUS or STORAGE_EVENT_DEVICE_STATUS or STORAGE_EVENT_DEVICE_OPERATION)>
    READ_COPY_NUMBER_KEY equ 52434e00h
    IsKeyReadCopyNumber macro _k
      exitm <(((_k) and 0FFFFFF00h) == READ_COPY_NUMBER_KEY)>
    endm
    ReadCopyNumberToKey macro _c
      exitm <(READ_COPY_NUMBER_KEY or (_c))>
    endm
    ReadCopyNumberFromKey macro _k
      exitm <((_k) and 000000FFh)>
    endm
    STORAGE_COUNTER_TYPE typedef SDWORD
    StorageCounterTypeUnknown equ 0
    StorageCounterTypeTemperatureCelsius equ 1
    StorageCounterTypeTemperatureCelsiusMax equ 2
    StorageCounterTypeReadErrorsTotal equ 3
    StorageCounterTypeReadErrorsCorrected equ 4
    StorageCounterTypeReadErrorsUncorrected equ 5
    StorageCounterTypeWriteErrorsTotal equ 6
    StorageCounterTypeWriteErrorsCorrected equ 7
    StorageCounterTypeWriteErrorsUncorrected equ 8
    StorageCounterTypeManufactureDate equ 9
    StorageCounterTypeStartStopCycleCount equ 10
    StorageCounterTypeStartStopCycleCountMax equ 11
    StorageCounterTypeLoadUnloadCycleCount equ 12
    StorageCounterTypeLoadUnloadCycleCountMax equ 13
    StorageCounterTypeWearPercentage equ 14
    StorageCounterTypeWearPercentageWarning equ 15
    StorageCounterTypeWearPercentageMax equ 16
    StorageCounterTypePowerOnHours equ 17
    StorageCounterTypeReadLatency100NSMax equ 18
    StorageCounterTypeWriteLatency100NSMax equ 19
    StorageCounterTypeFlushLatency100NSMax equ 20
    StorageCounterTypeMax equ 21
    _STORAGE_COUNTER_TYPE typedef STORAGE_COUNTER_TYPE
    PSTORAGE_COUNTER_TYPE typedef ptr STORAGE_COUNTER_TYPE
    
    STORAGE_COUNTER struct
      Type_ STORAGE_COUNTER_TYPE ?
      union Value
        struct ManufactureDate
          Week DWORD ?
          Year DWORD ?
        ends
        AsUlonglong DWORDLONG ?
      ends
    STORAGE_COUNTER ends
    _STORAGE_COUNTER typedef STORAGE_COUNTER
    PSTORAGE_COUNTER typedef ptr STORAGE_COUNTER
    
    STORAGE_COUNTERS struct
      Version DWORD ?
      Size_ DWORD ?
      NumberOfCounters DWORD ?
      Counters STORAGE_COUNTER ANYSIZE_ARRAY dup (<>)
    STORAGE_COUNTERS ends
    _STORAGE_COUNTERS typedef STORAGE_COUNTERS
    PSTORAGE_COUNTERS typedef ptr STORAGE_COUNTERS
    
    STORAGE_COUNTERS_VERSION_V1 equ <sizeof(STORAGE_COUNTERS)>
    STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER equ 00000001h
    STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT equ 00000002h
    STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT equ 00000004h
    STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE equ 80000000h
    STORAGE_HW_FIRMWARE_INFO_QUERY struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      Reserved DWORD ?
    STORAGE_HW_FIRMWARE_INFO_QUERY ends
    _STORAGE_HW_FIRMWARE_INFO_QUERY typedef STORAGE_HW_FIRMWARE_INFO_QUERY
    PSTORAGE_HW_FIRMWARE_INFO_QUERY typedef ptr STORAGE_HW_FIRMWARE_INFO_QUERY
    
    STORAGE_HW_FIRMWARE_INVALID_SLOT equ 0FFh
    STORAGE_HW_FIRMWARE_REVISION_LENGTH equ 16
    STORAGE_HW_FIRMWARE_SLOT_INFO struct
      Version DWORD ?
      Size_ DWORD ?
      SlotNumber BYTE ?
      STORAGE_HW_FIRMWARE_SLOT_INFO_??67 record ReadOnly_??67:1, Reserved0_??67:7
      STORAGE_HW_FIRMWARE_SLOT_INFO_??67 <>
      Reserved1 BYTE 6 dup (?)
      Revision BYTE STORAGE_HW_FIRMWARE_REVISION_LENGTH dup (?)
    STORAGE_HW_FIRMWARE_SLOT_INFO ends
    _STORAGE_HW_FIRMWARE_SLOT_INFO typedef STORAGE_HW_FIRMWARE_SLOT_INFO
    PSTORAGE_HW_FIRMWARE_SLOT_INFO typedef ptr STORAGE_HW_FIRMWARE_SLOT_INFO
    
    STORAGE_HW_FIRMWARE_INFO struct
      Version DWORD ?
      Size_ DWORD ?
      STORAGE_HW_FIRMWARE_INFO_??68 record SupportUpgrade_??68:1, Reserved0_??68:7
      STORAGE_HW_FIRMWARE_INFO_??68 <>
      SlotCount BYTE ?
      ActiveSlot BYTE ?
      PendingActivateSlot BYTE ?
      FirmwareShared BOOLEAN ?
      Reserved BYTE 3 dup (?)
      ImagePayloadAlignment DWORD ?
      ImagePayloadMaxSize DWORD ?
      Slot STORAGE_HW_FIRMWARE_SLOT_INFO ANYSIZE_ARRAY dup (<>)
    STORAGE_HW_FIRMWARE_INFO ends
    _STORAGE_HW_FIRMWARE_INFO typedef STORAGE_HW_FIRMWARE_INFO
    PSTORAGE_HW_FIRMWARE_INFO typedef ptr STORAGE_HW_FIRMWARE_INFO
    
    STORAGE_HW_FIRMWARE_DOWNLOAD struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      Slot BYTE ?
      Reserved BYTE 3 dup (?)
      Offset_ DWORDLONG ?
      BufferSize DWORDLONG ?
      ImageBuffer BYTE ANYSIZE_ARRAY dup (?)
    STORAGE_HW_FIRMWARE_DOWNLOAD ends
    _STORAGE_HW_FIRMWARE_DOWNLOAD typedef STORAGE_HW_FIRMWARE_DOWNLOAD
    PSTORAGE_HW_FIRMWARE_DOWNLOAD typedef ptr STORAGE_HW_FIRMWARE_DOWNLOAD
    
    STORAGE_HW_FIRMWARE_DOWNLOAD_V2 struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      Slot BYTE ?
      Reserved BYTE 3 dup (?)
      Offset_ DWORDLONG ?
      BufferSize DWORDLONG ?
      ImageSize DWORD ?
      Reserved2 DWORD ?
      ImageBuffer BYTE ANYSIZE_ARRAY dup (?)
    STORAGE_HW_FIRMWARE_DOWNLOAD_V2 ends
    _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 typedef STORAGE_HW_FIRMWARE_DOWNLOAD_V2
    PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 typedef ptr STORAGE_HW_FIRMWARE_DOWNLOAD_V2
    
    STORAGE_HW_FIRMWARE_ACTIVATE struct
      Version DWORD ?
      Size_ DWORD ?
      Flags DWORD ?
      Slot BYTE ?
      Reserved0 BYTE 3 dup (?)
    STORAGE_HW_FIRMWARE_ACTIVATE ends
    _STORAGE_HW_FIRMWARE_ACTIVATE typedef STORAGE_HW_FIRMWARE_ACTIVATE
    PSTORAGE_HW_FIRMWARE_ACTIVATE typedef ptr STORAGE_HW_FIRMWARE_ACTIVATE
    
    STORAGE_PROTOCOL_STRUCTURE_VERSION equ 1h
    STORAGE_PROTOCOL_COMMAND struct
      Version DWORD ?
      Length_ DWORD ?
      ProtocolType STORAGE_PROTOCOL_TYPE ?
      Flags DWORD ?
      ReturnStatus DWORD ?
      ErrorCode DWORD ?
      CommandLength DWORD ?
      ErrorInfoLength DWORD ?
      DataToDeviceTransferLength DWORD ?
      DataFromDeviceTransferLength DWORD ?
      TimeOutValue DWORD ?
      ErrorInfoOffset DWORD ?
      DataToDeviceBufferOffset DWORD ?
      DataFromDeviceBufferOffset DWORD ?
      CommandSpecific DWORD ?
      Reserved0 DWORD ?
      FixedProtocolReturnData DWORD ?
      Reserved1 DWORD 3 dup (?)
      Command BYTE ANYSIZE_ARRAY dup (?)
    STORAGE_PROTOCOL_COMMAND ends
    _STORAGE_PROTOCOL_COMMAND typedef STORAGE_PROTOCOL_COMMAND
    PSTORAGE_PROTOCOL_COMMAND typedef ptr STORAGE_PROTOCOL_COMMAND
    
    STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST equ 80000000h
    STORAGE_PROTOCOL_STATUS_PENDING equ 0h
    STORAGE_PROTOCOL_STATUS_SUCCESS equ 1h
    STORAGE_PROTOCOL_STATUS_ERROR equ 2h
    STORAGE_PROTOCOL_STATUS_INVALID_REQUEST equ 3h
    STORAGE_PROTOCOL_STATUS_NO_DEVICE equ 4h
    STORAGE_PROTOCOL_STATUS_BUSY equ 5h
    STORAGE_PROTOCOL_STATUS_DATA_OVERRUN equ 6h
    STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES equ 7h
    STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED equ 0FFh
    STORAGE_PROTOCOL_COMMAND_LENGTH_NVME equ 40h
    STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND equ 01h
    STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND equ 02h
    STORAGE_ATTRIBUTE_MGMT_ACTION typedef SDWORD
    StorAttributeMgmt_ClearAttribute equ 0
    StorAttributeMgmt_SetAttribute equ 1
    StorAttributeMgmt_ResetAttribute equ 2
    _STORAGE_ATTRIBUTE_MGMT_ACTION typedef STORAGE_ATTRIBUTE_MGMT_ACTION
    PSTORAGE_ATTRIBUTE_MGMT_ACTION typedef ptr STORAGE_ATTRIBUTE_MGMT_ACTION
    
    STORATTRIBUTE_NONE equ 0
    STORATTRIBUTE_MANAGEMENT_STATE equ 1
    STORAGE_ATTRIBUTE_MGMT struct
      Version DWORD ?
      Size_ DWORD ?
      Action STORAGE_ATTRIBUTE_MGMT_ACTION ?
      Attribute DWORD ?
    STORAGE_ATTRIBUTE_MGMT ends
    _STORAGE_ATTRIBUTE_MGMT typedef STORAGE_ATTRIBUTE_MGMT
    PSTORAGE_ATTRIBUTE_MGMT typedef ptr STORAGE_ATTRIBUTE_MGMT
    
    if _MSC_VER ge 1200
    endif
    if Defined(__cplusplus) and  not Defined(__ALT_GENERATOR__)
      ;[...]
    endif
  endif
  ifndef _NTDDDISK_H_
    _NTDDDISK_H_ equ <>
    include winapifamily.inc
    ifndef __WRAPPED__
      __WRAPPED__ equ <>
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
      if Defined(_MSC_VER)
        if (_MSC_VER ge 1200)
        endif
      endif
      IOCTL_DISK_BASE equ <FILE_DEVICE_DISK>
      IOCTL_DISK_GET_DRIVE_GEOMETRY equ CTL_CODE(IOCTL_DISK_BASE, 0000h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_GET_PARTITION_INFO equ CTL_CODE(IOCTL_DISK_BASE, 0001h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_SET_PARTITION_INFO equ CTL_CODE(IOCTL_DISK_BASE, 0002h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      IOCTL_DISK_GET_DRIVE_LAYOUT equ CTL_CODE(IOCTL_DISK_BASE, 0003h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_SET_DRIVE_LAYOUT equ CTL_CODE(IOCTL_DISK_BASE, 0004h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      IOCTL_DISK_VERIFY equ CTL_CODE(IOCTL_DISK_BASE, 0005h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_FORMAT_TRACKS equ CTL_CODE(IOCTL_DISK_BASE, 0006h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      IOCTL_DISK_REASSIGN_BLOCKS equ CTL_CODE(IOCTL_DISK_BASE, 0007h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      IOCTL_DISK_PERFORMANCE equ CTL_CODE(IOCTL_DISK_BASE, 0008h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_IS_WRITABLE equ CTL_CODE(IOCTL_DISK_BASE, 0009h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_LOGGING equ CTL_CODE(IOCTL_DISK_BASE, 000ah, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_FORMAT_TRACKS_EX equ CTL_CODE(IOCTL_DISK_BASE, 000bh, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      IOCTL_DISK_HISTOGRAM_STRUCTURE equ CTL_CODE(IOCTL_DISK_BASE, 000ch, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_HISTOGRAM_DATA equ CTL_CODE(IOCTL_DISK_BASE, 000dh, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_HISTOGRAM_RESET equ CTL_CODE(IOCTL_DISK_BASE, 000eh, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_REQUEST_STRUCTURE equ CTL_CODE(IOCTL_DISK_BASE, 000fh, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_REQUEST_DATA equ CTL_CODE(IOCTL_DISK_BASE, 0010h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_PERFORMANCE_OFF equ CTL_CODE(IOCTL_DISK_BASE, 0018h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      if (_WIN32_WINNT ge 0400h)
        IOCTL_DISK_CONTROLLER_NUMBER equ CTL_CODE(IOCTL_DISK_BASE, 0011h, METHOD_BUFFERED, FILE_ANY_ACCESS)
        SMART_GET_VERSION equ CTL_CODE(IOCTL_DISK_BASE, 0020h, METHOD_BUFFERED, FILE_READ_ACCESS)
        SMART_SEND_DRIVE_COMMAND equ CTL_CODE(IOCTL_DISK_BASE, 0021h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        SMART_RCV_DRIVE_DATA equ CTL_CODE(IOCTL_DISK_BASE, 0022h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      endif
      if (_WIN32_WINNT ge 500h)
        IOCTL_DISK_GET_PARTITION_INFO_EX equ CTL_CODE(IOCTL_DISK_BASE, 0012h, METHOD_BUFFERED, FILE_ANY_ACCESS)
        IOCTL_DISK_SET_PARTITION_INFO_EX equ CTL_CODE(IOCTL_DISK_BASE, 0013h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_GET_DRIVE_LAYOUT_EX equ CTL_CODE(IOCTL_DISK_BASE, 0014h, METHOD_BUFFERED, FILE_ANY_ACCESS)
        IOCTL_DISK_SET_DRIVE_LAYOUT_EX equ CTL_CODE(IOCTL_DISK_BASE, 0015h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_CREATE_DISK equ CTL_CODE(IOCTL_DISK_BASE, 0016h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_GET_LENGTH_INFO equ CTL_CODE(IOCTL_DISK_BASE, 0017h, METHOD_BUFFERED, FILE_READ_ACCESS)
        IOCTL_DISK_GET_DRIVE_GEOMETRY_EX equ CTL_CODE(IOCTL_DISK_BASE, 0028h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      endif
      if (_WIN32_WINNT ge 0502h)
        IOCTL_DISK_REASSIGN_BLOCKS_EX equ CTL_CODE(IOCTL_DISK_BASE, 0029h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      endif
      if (_WIN32_WINNT ge 0500h)
        IOCTL_DISK_UPDATE_DRIVE_SIZE equ CTL_CODE(IOCTL_DISK_BASE, 0032h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_GROW_PARTITION equ CTL_CODE(IOCTL_DISK_BASE, 0034h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_GET_CACHE_INFORMATION equ CTL_CODE(IOCTL_DISK_BASE, 0035h, METHOD_BUFFERED, FILE_READ_ACCESS)
        IOCTL_DISK_SET_CACHE_INFORMATION equ CTL_CODE(IOCTL_DISK_BASE, 0036h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        if (NTDDI_VERSION lt NTDDI_WS03)
          IOCTL_DISK_GET_WRITE_CACHE_STATE equ CTL_CODE(IOCTL_DISK_BASE, 0037h, METHOD_BUFFERED, FILE_READ_ACCESS)
        else
          OBSOLETE_DISK_GET_WRITE_CACHE_STATE equ CTL_CODE(IOCTL_DISK_BASE, 0037h, METHOD_BUFFERED, FILE_READ_ACCESS)
        endif
        IOCTL_DISK_DELETE_DRIVE_LAYOUT equ CTL_CODE(IOCTL_DISK_BASE, 0040h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_UPDATE_PROPERTIES equ CTL_CODE(IOCTL_DISK_BASE, 0050h, METHOD_BUFFERED, FILE_ANY_ACCESS)
        IOCTL_DISK_FORMAT_DRIVE equ CTL_CODE(IOCTL_DISK_BASE, 00f3h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
        IOCTL_DISK_SENSE_DEVICE equ CTL_CODE(IOCTL_DISK_BASE, 00f8h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      endif
      IOCTL_DISK_CHECK_VERIFY equ CTL_CODE(IOCTL_DISK_BASE, 0200h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_MEDIA_REMOVAL equ CTL_CODE(IOCTL_DISK_BASE, 0201h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_EJECT_MEDIA equ CTL_CODE(IOCTL_DISK_BASE, 0202h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_LOAD_MEDIA equ CTL_CODE(IOCTL_DISK_BASE, 0203h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_RESERVE equ CTL_CODE(IOCTL_DISK_BASE, 0204h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_RELEASE equ CTL_CODE(IOCTL_DISK_BASE, 0205h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_FIND_NEW_DEVICES equ CTL_CODE(IOCTL_DISK_BASE, 0206h, METHOD_BUFFERED, FILE_READ_ACCESS)
      IOCTL_DISK_GET_MEDIA_TYPES equ CTL_CODE(IOCTL_DISK_BASE, 0300h, METHOD_BUFFERED, FILE_ANY_ACCESS)
      PARTITION_ENTRY_UNUSED equ 00h
      PARTITION_FAT_12 equ 01h
      PARTITION_XENIX_1 equ 02h
      PARTITION_XENIX_2 equ 03h
      PARTITION_FAT_16 equ 04h
      PARTITION_EXTENDED equ 05h
      PARTITION_HUGE equ 06h
      PARTITION_IFS equ 07h
      PARTITION_OS2BOOTMGR equ 0Ah
      PARTITION_FAT32 equ 0Bh
      PARTITION_FAT32_XINT13 equ 0Ch
      PARTITION_XINT13 equ 0Eh
      PARTITION_XINT13_EXTENDED equ 0Fh
      PARTITION_MSFT_RECOVERY equ 27h
      PARTITION_MAIN_OS equ 28h
      PARTIITON_OS_DATA equ 29h
      PARTITION_PRE_INSTALLED equ 2ah
      PARTITION_BSP equ 2bh
      PARTITION_DPP equ 2ch
      PARTITION_WINDOWS_SYSTEM equ 2dh
      PARTITION_PREP equ 41h
      PARTITION_LDM equ 42h
      PARTITION_DM equ 54h
      PARTITION_EZDRIVE equ 55h
      PARTITION_UNIX equ 63h
      PARTITION_SPACES equ 0E7h
      PARTITION_GPT equ 0EEh
      PARTITION_SYSTEM equ 0EFh
      VALID_NTFT equ 0C0h
      PARTITION_NTFT equ 80h
      if (NTDDI_VERSION lt NTDDI_VISTA)
        IsRecognizedPartition macro PartitionType
          exitm <>
          ;(((PartitionType and PARTITION_NTFT) and (((PartitionType and not 0C0h) == PARTITION_HUGE) or 
          ;((PartitionType and not 0C0h) == PARTITION_IFS) or ((PartitionType and not 0C0h) == PARTITION_FAT32) or 
          ;((PartitionType and not 0C0h) == PARTITION_FAT32_XINT13))) or ((PartitionType) == PARTITION_FAT_12) or 
          ;((PartitionType) == PARTITION_FAT_16) or ((PartitionType) == PARTITION_HUGE) or ((PartitionType) == PARTITION_IFS) or 
          ;((PartitionType) == PARTITION_FAT32) or ((PartitionType) == PARTITION_FAT32_XINT13) or ((PartitionType) == PARTITION_XINT13))
        endm
      else
        IsRecognizedPartition macro PartitionType
          exitm <>
          ;(((PartitionType) == PARTITION_BSP) or ((PartitionType) == PARTITION_DPP) or ((PartitionType) == PARTITION_FAT_12) or 
          ;((PartitionType) == PARTITION_FAT_16) or ((PartitionType) == PARTITION_FAT32) or ((PartitionType) == PARTITION_FAT32_XINT13) or 
          ;((PartitionType) == PARTITION_HUGE) or ((PartitionType) == PARTITION_IFS) or ((PartitionType) == PARTITION_MAIN_OS) or 
          ;((PartitionType) == PARTITION_MSFT_RECOVERY) or ((PartitionType) == PARTIITON_OS_DATA) or ((PartitionType) == PARTITION_PRE_INSTALLED) or 
          ;((PartitionType) == PARTITION_SYSTEM) or ((PartitionType) == PARTITION_WINDOWS_SYSTEM) or ((PartitionType) == PARTITION_XINT13))
        endm
      endif
      IsContainerPartition macro PartitionType
        exitm <((PartitionType == PARTITION_EXTENDED) or (PartitionType == PARTITION_XINT13_EXTENDED))>
      endm
      IsFTPartition macro PartitionType
        exitm <((PartitionType and PARTITION_NTFT) and (((PartitionType and not 0C0h) == PARTITION_HUGE) or ((PartitionType and not 0C0h) == PARTITION_IFS) or ((PartitionType and not 0C0h) == PARTITION_FAT32) or ((PartitionType and not 0C0h) == PARTITION_FAT32_XINT13)))>
      endm
      MEDIA_TYPE typedef SDWORD
      Unknown equ 0
      F5_1Pt2_512 equ 1
      F3_1Pt44_512 equ 2
      F3_2Pt88_512 equ 3
      F3_20Pt8_512 equ 4
      F3_720_512 equ 5
      F5_360_512 equ 6
      F5_320_512 equ 7
      F5_320_1024 equ 8
      F5_180_512 equ 9
      F5_160_512 equ 10
      RemovableMedia equ 11
      FixedMedia equ 12
      F3_120M_512 equ 13
      F3_640_512 equ 14
      F5_640_512 equ 15
      F5_720_512 equ 16
      F3_1Pt2_512 equ 17
      F3_1Pt23_1024 equ 18
      F5_1Pt23_1024 equ 19
      F3_128Mb_512 equ 20
      F3_230Mb_512 equ 21
      F8_256_128 equ 22
      F3_200Mb_512 equ 23
      F3_240M_512 equ 24
      F3_32M_512 equ 25
      _MEDIA_TYPE typedef MEDIA_TYPE
      PMEDIA_TYPE typedef ptr MEDIA_TYPE
      
      FORMAT_PARAMETERS struct
        MediaType MEDIA_TYPE ?
        StartCylinderNumber DWORD ?
        EndCylinderNumber DWORD ?
        StartHeadNumber DWORD ?
        EndHeadNumber DWORD ?
      FORMAT_PARAMETERS ends
      _FORMAT_PARAMETERS typedef FORMAT_PARAMETERS
      PFORMAT_PARAMETERS typedef ptr FORMAT_PARAMETERS
      
      BAD_TRACK_NUMBER typedef WORD
      PBAD_TRACK_NUMBER typedef ptr WORD
      FORMAT_EX_PARAMETERS struct
        MediaType MEDIA_TYPE ?
        StartCylinderNumber DWORD ?
        EndCylinderNumber DWORD ?
        StartHeadNumber DWORD ?
        EndHeadNumber DWORD ?
        FormatGapLength WORD ?
        SectorsPerTrack WORD ?
        SectorNumber WORD 1 dup (?)
      FORMAT_EX_PARAMETERS ends
      _FORMAT_EX_PARAMETERS typedef FORMAT_EX_PARAMETERS
      PFORMAT_EX_PARAMETERS typedef ptr FORMAT_EX_PARAMETERS
      
      DISK_GEOMETRY struct
        Cylinders LARGE_INTEGER <>
        MediaType MEDIA_TYPE ?
        TracksPerCylinder DWORD ?
        SectorsPerTrack DWORD ?
        BytesPerSector DWORD ?
      DISK_GEOMETRY ends
      _DISK_GEOMETRY typedef DISK_GEOMETRY
      PDISK_GEOMETRY typedef ptr DISK_GEOMETRY
      
      WMI_DISK_GEOMETRY_GUID equ { 25007f51h, 57c2h, 11d1h, { 0a5h, 28h, 0h, 0a0h, 0c9h, 6h, 29h, 10h } }
      PARTITION_INFORMATION struct
        StartingOffset LARGE_INTEGER <>
        PartitionLength LARGE_INTEGER <>
        HiddenSectors DWORD ?
        PartitionNumber DWORD ?
        PartitionType BYTE ?
        BootIndicator BOOLEAN ?
        RecognizedPartition BOOLEAN ?
        RewritePartition BOOLEAN ?
      PARTITION_INFORMATION ends
      _PARTITION_INFORMATION typedef PARTITION_INFORMATION
      PPARTITION_INFORMATION typedef ptr PARTITION_INFORMATION
      
      SET_PARTITION_INFORMATION struct
        PartitionType BYTE ?
      SET_PARTITION_INFORMATION ends
      _SET_PARTITION_INFORMATION typedef SET_PARTITION_INFORMATION
      PSET_PARTITION_INFORMATION typedef ptr SET_PARTITION_INFORMATION
      
      DRIVE_LAYOUT_INFORMATION struct
        PartitionCount DWORD ?
        Signature DWORD ?
        PartitionEntry PARTITION_INFORMATION 1 dup (<>)
      DRIVE_LAYOUT_INFORMATION ends
      _DRIVE_LAYOUT_INFORMATION typedef DRIVE_LAYOUT_INFORMATION
      PDRIVE_LAYOUT_INFORMATION typedef ptr DRIVE_LAYOUT_INFORMATION
      
      VERIFY_INFORMATION struct
        StartingOffset LARGE_INTEGER <>
        Length_ DWORD ?
      VERIFY_INFORMATION ends
      _VERIFY_INFORMATION typedef VERIFY_INFORMATION
      PVERIFY_INFORMATION typedef ptr VERIFY_INFORMATION
      
      REASSIGN_BLOCKS struct
        Reserved WORD ?
        Count WORD ?
        BlockNumber DWORD 1 dup (?)
      REASSIGN_BLOCKS ends
      _REASSIGN_BLOCKS typedef REASSIGN_BLOCKS
      PREASSIGN_BLOCKS typedef ptr REASSIGN_BLOCKS
      
      include pshpack1.inc
      REASSIGN_BLOCKS_EX struct
        Reserved WORD ?
        Count WORD ?
        BlockNumber LARGE_INTEGER 1 dup (<>)
      REASSIGN_BLOCKS_EX ends
      _REASSIGN_BLOCKS_EX typedef REASSIGN_BLOCKS_EX
      PREASSIGN_BLOCKS_EX typedef ptr REASSIGN_BLOCKS_EX
      
      include poppack.inc
      if (_WIN32_WINNT ge 500h)
        PARTITION_STYLE typedef SDWORD
        PARTITION_STYLE_MBR equ 0
        PARTITION_STYLE_GPT equ 1
        PARTITION_STYLE_RAW equ 2
        _PARTITION_STYLE typedef PARTITION_STYLE
        
        PARTITION_INFORMATION_GPT struct
          PartitionType GUID <>
          PartitionId GUID <>
          Attributes DWORD64 ?
          Name_ WCHAR 36 dup (?)
        PARTITION_INFORMATION_GPT ends
        _PARTITION_INFORMATION_GPT typedef PARTITION_INFORMATION_GPT
        PPARTITION_INFORMATION_GPT typedef ptr PARTITION_INFORMATION_GPT
        
        GPT_ATTRIBUTE_PLATFORM_REQUIRED equ 0000000000000001h
        GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER equ 8000000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_HIDDEN equ 4000000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY equ 2000000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY equ 1000000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_OFFLINE equ 0800000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_DAX equ 0400000000000000h
        GPT_BASIC_DATA_ATTRIBUTE_SERVICE equ 0200000000000000h
        GPT_SPACES_ATTRIBUTE_NO_METADATA equ 8000000000000000h
        PARTITION_INFORMATION_MBR struct
          PartitionType BYTE ?
          BootIndicator BOOLEAN ?
          RecognizedPartition BOOLEAN ?
          HiddenSectors DWORD ?
          if (NTDDI_VERSION ge NTDDI_WINBLUE)
            PartitionId GUID <>
          endif
        PARTITION_INFORMATION_MBR ends
        _PARTITION_INFORMATION_MBR typedef PARTITION_INFORMATION_MBR
        PPARTITION_INFORMATION_MBR typedef ptr PARTITION_INFORMATION_MBR
        
        SET_PARTITION_INFORMATION_MBR typedef SET_PARTITION_INFORMATION
        SET_PARTITION_INFORMATION_GPT typedef PARTITION_INFORMATION_GPT
        SET_PARTITION_INFORMATION_EX struct
          PartitionStyle PARTITION_STYLE ?
          union
            Mbr SET_PARTITION_INFORMATION_MBR <>
            Gpt SET_PARTITION_INFORMATION_GPT <>
          ends
        SET_PARTITION_INFORMATION_EX ends
        _SET_PARTITION_INFORMATION_EX typedef SET_PARTITION_INFORMATION_EX
        PSET_PARTITION_INFORMATION_EX typedef ptr SET_PARTITION_INFORMATION_EX
        
        CREATE_DISK_GPT struct
          DiskId GUID <>
          MaxPartitionCount DWORD ?
        CREATE_DISK_GPT ends
        _CREATE_DISK_GPT typedef CREATE_DISK_GPT
        PCREATE_DISK_GPT typedef ptr CREATE_DISK_GPT
        
        CREATE_DISK_MBR struct
          Signature DWORD ?
        CREATE_DISK_MBR ends
        _CREATE_DISK_MBR typedef CREATE_DISK_MBR
        PCREATE_DISK_MBR typedef ptr CREATE_DISK_MBR
        
        CREATE_DISK struct
          PartitionStyle PARTITION_STYLE ?
          union
            Mbr CREATE_DISK_MBR <>
            Gpt CREATE_DISK_GPT <>
          ends
        CREATE_DISK ends
        _CREATE_DISK typedef CREATE_DISK
        PCREATE_DISK typedef ptr CREATE_DISK
        
        GET_LENGTH_INFORMATION struct
          Length_ LARGE_INTEGER <>
        GET_LENGTH_INFORMATION ends
        _GET_LENGTH_INFORMATION typedef GET_LENGTH_INFORMATION
        PGET_LENGTH_INFORMATION typedef ptr GET_LENGTH_INFORMATION
        
        PARTITION_INFORMATION_EX struct
          PartitionStyle PARTITION_STYLE ?
          StartingOffset LARGE_INTEGER <>
          PartitionLength LARGE_INTEGER <>
          PartitionNumber DWORD ?
          RewritePartition BOOLEAN ?
          if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
            IsServicePartition BOOLEAN ?
          endif
          union
            Mbr PARTITION_INFORMATION_MBR <>
            Gpt PARTITION_INFORMATION_GPT <>
          ends
        PARTITION_INFORMATION_EX ends
        _PARTITION_INFORMATION_EX typedef PARTITION_INFORMATION_EX
        PPARTITION_INFORMATION_EX typedef ptr PARTITION_INFORMATION_EX
        
        DRIVE_LAYOUT_INFORMATION_GPT struct
          DiskId GUID <>
          StartingUsableOffset LARGE_INTEGER <>
          UsableLength LARGE_INTEGER <>
          MaxPartitionCount DWORD ?
        DRIVE_LAYOUT_INFORMATION_GPT ends
        _DRIVE_LAYOUT_INFORMATION_GPT typedef DRIVE_LAYOUT_INFORMATION_GPT
        PDRIVE_LAYOUT_INFORMATION_GPT typedef ptr DRIVE_LAYOUT_INFORMATION_GPT
        
        DRIVE_LAYOUT_INFORMATION_MBR struct
          Signature DWORD ?
          if (NTDDI_VERSION ge NTDDI_WIN10_RS1)
            CheckSum DWORD ?
          endif
        DRIVE_LAYOUT_INFORMATION_MBR ends
        _DRIVE_LAYOUT_INFORMATION_MBR typedef DRIVE_LAYOUT_INFORMATION_MBR
        PDRIVE_LAYOUT_INFORMATION_MBR typedef ptr DRIVE_LAYOUT_INFORMATION_MBR
        
        DRIVE_LAYOUT_INFORMATION_EX struct
          PartitionStyle DWORD ?
          PartitionCount DWORD ?
          union
            Mbr DRIVE_LAYOUT_INFORMATION_MBR <>
            Gpt DRIVE_LAYOUT_INFORMATION_GPT <>
          ends
          PartitionEntry PARTITION_INFORMATION_EX 1 dup (<>)
        DRIVE_LAYOUT_INFORMATION_EX ends
        _DRIVE_LAYOUT_INFORMATION_EX typedef DRIVE_LAYOUT_INFORMATION_EX
        PDRIVE_LAYOUT_INFORMATION_EX typedef ptr DRIVE_LAYOUT_INFORMATION_EX
        
      endif
      if (_WIN32_WINNT ge 0500h)
        DETECTION_TYPE typedef SDWORD
        DetectNone equ 0
        DetectInt13 equ 1
        DetectExInt13 equ 2
        _DETECTION_TYPE typedef DETECTION_TYPE
        
        DISK_INT13_INFO struct
          DriveSelect WORD ?
          MaxCylinders DWORD ?
          SectorsPerTrack WORD ?
          MaxHeads WORD ?
          NumberDrives WORD ?
        DISK_INT13_INFO ends
        _DISK_INT13_INFO typedef DISK_INT13_INFO
        PDISK_INT13_INFO typedef ptr DISK_INT13_INFO
        
        DISK_EX_INT13_INFO struct
          ExBufferSize WORD ?
          ExFlags WORD ?
          ExCylinders DWORD ?
          ExHeads DWORD ?
          ExSectorsPerTrack DWORD ?
          ExSectorsPerDrive DWORD64 ?
          ExSectorSize WORD ?
          ExReserved WORD ?
        DISK_EX_INT13_INFO ends
        _DISK_EX_INT13_INFO typedef DISK_EX_INT13_INFO
        PDISK_EX_INT13_INFO typedef ptr DISK_EX_INT13_INFO
        
        if (_MSC_VER ge 1200)
        endif
        DISK_DETECTION_INFO struct
          SizeOfDetectInfo DWORD ?
          DetectionType DETECTION_TYPE ?
          union
            struct
              Int13 DISK_INT13_INFO <>
              ExInt13 DISK_EX_INT13_INFO <>
            ends
          ends
        DISK_DETECTION_INFO ends
        _DISK_DETECTION_INFO typedef DISK_DETECTION_INFO
        PDISK_DETECTION_INFO typedef ptr DISK_DETECTION_INFO
        
        DISK_PARTITION_INFO struct
          SizeOfPartitionInfo DWORD ?
          PartitionStyle PARTITION_STYLE ?
          union
            struct Mbr
              Signature DWORD ?
              CheckSum DWORD ?
            ends
            struct Gpt
              DiskId GUID <>
            ends
          ends
        DISK_PARTITION_INFO ends
        _DISK_PARTITION_INFO typedef DISK_PARTITION_INFO
        PDISK_PARTITION_INFO typedef ptr DISK_PARTITION_INFO
        
        if (_MSC_VER ge 1200)
        endif
        if (NTDDI_VERSION lt NTDDI_WS03)
          DiskGeometryGetPartition macro Geometry
            exitm <((PDISK_PARTITION_INFO) ((Geometry) + 1))>
          endm
          DiskGeometryGetDetect macro Geometry
            exitm <((PDISK_DETECTION_INFO) ((DiskGeometryGetPartition(Geometry) + DiskGeometryGetPartition(Geometry) - SizeOfPartitionInfo)))>
          endm
        else
          DiskGeometryGetPartition macro Geometry
            exitm <((PDISK_PARTITION_INFO) ((Geometry) - Data))>
          endm
          DiskGeometryGetDetect macro Geometry
            exitm <((PDISK_DETECTION_INFO) ((DiskGeometryGetPartition(Geometry) + DiskGeometryGetPartition(Geometry) - SizeOfPartitionInfo)))>
          endm
        endif
        DISK_GEOMETRY_EX struct
          Geometry DISK_GEOMETRY <>
          DiskSize LARGE_INTEGER <>
          Data BYTE 1 dup (?)
        DISK_GEOMETRY_EX ends
        _DISK_GEOMETRY_EX typedef DISK_GEOMETRY_EX
        PDISK_GEOMETRY_EX typedef ptr DISK_GEOMETRY_EX
        
      endif
      if (_WIN32_WINNT ge 0400h)
        DISK_CONTROLLER_NUMBER struct
          ControllerNumber DWORD ?
          DiskNumber DWORD ?
        DISK_CONTROLLER_NUMBER ends
        _DISK_CONTROLLER_NUMBER typedef DISK_CONTROLLER_NUMBER
        PDISK_CONTROLLER_NUMBER typedef ptr DISK_CONTROLLER_NUMBER
        
      endif
      if (_WIN32_WINNT ge 0500h)
        DISK_CACHE_RETENTION_PRIORITY typedef SDWORD
        EqualPriority equ 0
        KeepPrefetchedData equ 1
        KeepReadData equ 2
        
        if (OSVER(NTDDI_VERSION) eq NTDDI_WINXP)
          DISK_WRITE_CACHE_STATE typedef SDWORD
          DiskWriteCacheNormal equ 0
          DiskWriteCacheForceDisable equ 1
          DiskWriteCacheDisableNotSupported equ 2
          _DISK_WRITE_CACHE_STATE typedef DISK_WRITE_CACHE_STATE
          PDISK_WRITE_CACHE_STATE typedef ptr DISK_WRITE_CACHE_STATE
          
        endif
        DISK_CACHE_INFORMATION struct
          ParametersSavable BOOLEAN ?
          ReadCacheEnabled BOOLEAN ?
          WriteCacheEnabled BOOLEAN ?
          ReadRetentionPriority DISK_CACHE_RETENTION_PRIORITY ?
          WriteRetentionPriority DISK_CACHE_RETENTION_PRIORITY ?
          DisablePrefetchTransferLength WORD ?
          PrefetchScalar BOOLEAN ?
          union
            struct ScalarPrefetch
              Minimum WORD ?
              Maximum WORD ?
              MaximumBlocks WORD ?
            ends
            struct BlockPrefetch
              Minimum WORD ?
              Maximum WORD ?
            ends
          ends
        DISK_CACHE_INFORMATION ends
        _DISK_CACHE_INFORMATION typedef DISK_CACHE_INFORMATION
        PDISK_CACHE_INFORMATION typedef ptr DISK_CACHE_INFORMATION
        
        DISK_GROW_PARTITION struct
          PartitionNumber DWORD ?
          BytesToGrow LARGE_INTEGER <>
        DISK_GROW_PARTITION ends
        _DISK_GROW_PARTITION typedef DISK_GROW_PARTITION
        PDISK_GROW_PARTITION typedef ptr DISK_GROW_PARTITION
        
      endif
      HIST_NO_OF_BUCKETS equ 24
      HISTOGRAM_BUCKET struct
        Reads DWORD ?
        Writes DWORD ?
      HISTOGRAM_BUCKET ends
      _HISTOGRAM_BUCKET typedef HISTOGRAM_BUCKET
      PHISTOGRAM_BUCKET typedef ptr HISTOGRAM_BUCKET
      
      HISTOGRAM_BUCKET_SIZE equ <sizeof(HISTOGRAM_BUCKET)>
      DISK_HISTOGRAM struct
        DiskSize LARGE_INTEGER <>
        Start LARGE_INTEGER <>
        End_ LARGE_INTEGER <>
        Average LARGE_INTEGER <>
        AverageRead LARGE_INTEGER <>
        AverageWrite LARGE_INTEGER <>
        Granularity DWORD ?
        Size_ DWORD ?
        ReadCount DWORD ?
        WriteCount DWORD ?
        Histogram PHISTOGRAM_BUCKET ?
      DISK_HISTOGRAM ends
      _DISK_HISTOGRAM typedef DISK_HISTOGRAM
      PDISK_HISTOGRAM typedef ptr DISK_HISTOGRAM
      
      DISK_HISTOGRAM_SIZE equ <sizeof(DISK_HISTOGRAM)>
      DISK_PERFORMANCE struct
        BytesRead LARGE_INTEGER <>
        BytesWritten LARGE_INTEGER <>
        ReadTime LARGE_INTEGER <>
        WriteTime LARGE_INTEGER <>
        IdleTime LARGE_INTEGER <>
        ReadCount DWORD ?
        WriteCount DWORD ?
        QueueDepth DWORD ?
        SplitCount DWORD ?
        QueryTime LARGE_INTEGER <>
        StorageDeviceNumber DWORD ?
        StorageManagerName WCHAR 8 dup (?)
      DISK_PERFORMANCE ends
      _DISK_PERFORMANCE typedef DISK_PERFORMANCE
      PDISK_PERFORMANCE typedef ptr DISK_PERFORMANCE
      
      DISK_RECORD struct
        ByteOffset LARGE_INTEGER <>
        StartTime LARGE_INTEGER <>
        EndTime LARGE_INTEGER <>
        VirtualAddress PVOID ?
        NumberOfBytes DWORD ?
        DeviceNumber BYTE ?
        ReadRequest BOOLEAN ?
      DISK_RECORD ends
      _DISK_RECORD typedef DISK_RECORD
      PDISK_RECORD typedef ptr DISK_RECORD
      
      DISK_LOGGING struct
        Function BYTE ?
        BufferAddress PVOID ?
        BufferSize DWORD ?
      DISK_LOGGING ends
      _DISK_LOGGING typedef DISK_LOGGING
      PDISK_LOGGING typedef ptr DISK_LOGGING
      
      DISK_LOGGING_START equ 0
      DISK_LOGGING_STOP equ 1
      DISK_LOGGING_DUMP equ 2
      DISK_BINNING equ 3
      BIN_TYPES typedef SDWORD
      RequestSize equ 0
      RequestLocation equ 1
      _BIN_TYPES typedef BIN_TYPES
      
      BIN_RANGE struct
        StartValue LARGE_INTEGER <>
        Length_ LARGE_INTEGER <>
      BIN_RANGE ends
      _BIN_RANGE typedef BIN_RANGE
      PBIN_RANGE typedef ptr BIN_RANGE
      
      PERF_BIN struct
        NumberOfBins DWORD ?
        TypeOfBin DWORD ?
        BinsRanges BIN_RANGE 1 dup (<>)
      PERF_BIN ends
      _PERF_BIN typedef PERF_BIN
      PPERF_BIN typedef ptr PERF_BIN
      
      BIN_COUNT struct
        BinRange BIN_RANGE <>
        BinCount DWORD ?
      BIN_COUNT ends
      _BIN_COUNT typedef BIN_COUNT
      PBIN_COUNT typedef ptr BIN_COUNT
      
      BIN_RESULTS struct
        NumberOfBins DWORD ?
        BinCounts BIN_COUNT 1 dup (<>)
      BIN_RESULTS ends
      _BIN_RESULTS typedef BIN_RESULTS
      PBIN_RESULTS typedef ptr BIN_RESULTS
      
      if (_WIN32_WINNT ge 0400h)
        include pshpack1.inc
        GETVERSIONINPARAMS struct
          bVersion BYTE ?
          bRevision BYTE ?
          bReserved BYTE ?
          bIDEDeviceMap BYTE ?
          fCapabilities DWORD ?
          dwReserved DWORD 4 dup (?)
        GETVERSIONINPARAMS ends
        _GETVERSIONINPARAMS typedef GETVERSIONINPARAMS
        PGETVERSIONINPARAMS typedef ptr GETVERSIONINPARAMS
        LPGETVERSIONINPARAMS typedef ptr GETVERSIONINPARAMS
        
        include poppack.inc
        CAP_ATA_ID_CMD equ 1
        CAP_ATAPI_ID_CMD equ 2
        CAP_SMART_CMD equ 4
        include pshpack1.inc
        IDEREGS struct
          bFeaturesReg BYTE ?
          bSectorCountReg BYTE ?
          bSectorNumberReg BYTE ?
          bCylLowReg BYTE ?
          bCylHighReg BYTE ?
          bDriveHeadReg BYTE ?
          bCommandReg BYTE ?
          bReserved BYTE ?
        IDEREGS ends
        _IDEREGS typedef IDEREGS
        PIDEREGS typedef ptr IDEREGS
        LPIDEREGS typedef ptr IDEREGS
        
        include poppack.inc
        ATAPI_ID_CMD equ 0A1h
        ID_CMD equ 0ECh
        SMART_CMD equ 0B0h
        SMART_CYL_LOW equ 4Fh
        SMART_CYL_HI equ 0C2h
        include pshpack1.inc
        SENDCMDINPARAMS struct
          cBufferSize DWORD ?
          irDriveRegs IDEREGS <>
          bDriveNumber BYTE ?
          bReserved BYTE 3 dup (?)
          dwReserved DWORD 4 dup (?)
          bBuffer BYTE 1 dup (?)
        SENDCMDINPARAMS ends
        _SENDCMDINPARAMS typedef SENDCMDINPARAMS
        PSENDCMDINPARAMS typedef ptr SENDCMDINPARAMS
        LPSENDCMDINPARAMS typedef ptr SENDCMDINPARAMS
        
        include poppack.inc
        include pshpack1.inc
        DRIVERSTATUS struct
          bDriverError BYTE ?
          bIDEError BYTE ?
          bReserved BYTE 2 dup (?)
          dwReserved DWORD 2 dup (?)
        DRIVERSTATUS ends
        _DRIVERSTATUS typedef DRIVERSTATUS
        PDRIVERSTATUS typedef ptr DRIVERSTATUS
        LPDRIVERSTATUS typedef ptr DRIVERSTATUS
        
        include poppack.inc
        SMART_NO_ERROR equ 0
        SMART_IDE_ERROR equ 1
        SMART_INVALID_FLAG equ 2
        SMART_INVALID_COMMAND equ 3
        SMART_INVALID_BUFFER equ 4
        SMART_INVALID_DRIVE equ 5
        SMART_INVALID_IOCTL equ 6
        SMART_ERROR_NO_MEM equ 7
        SMART_INVALID_REGISTER equ 8
        SMART_NOT_SUPPORTED equ 9
        SMART_NO_IDE_DEVICE equ 10
        SMART_OFFLINE_ROUTINE_OFFLINE equ 0
        SMART_SHORT_SELFTEST_OFFLINE equ 1
        SMART_EXTENDED_SELFTEST_OFFLINE equ 2
        SMART_ABORT_OFFLINE_SELFTEST equ 127
        SMART_SHORT_SELFTEST_CAPTIVE equ 129
        SMART_EXTENDED_SELFTEST_CAPTIVE equ 130
        include pshpack1.inc
        SENDCMDOUTPARAMS struct
          cBufferSize DWORD ?
          DriverStatus DRIVERSTATUS <>
          bBuffer BYTE 1 dup (?)
        SENDCMDOUTPARAMS ends
        _SENDCMDOUTPARAMS typedef SENDCMDOUTPARAMS
        PSENDCMDOUTPARAMS typedef ptr SENDCMDOUTPARAMS
        LPSENDCMDOUTPARAMS typedef ptr SENDCMDOUTPARAMS
        
        include poppack.inc
        READ_ATTRIBUTE_BUFFER_SIZE equ 512
        IDENTIFY_BUFFER_SIZE equ 512
        READ_THRESHOLD_BUFFER_SIZE equ 512
        SMART_LOG_SECTOR_SIZE equ 512
        READ_ATTRIBUTES equ 0D0h
        READ_THRESHOLDS equ 0D1h
        ENABLE_DISABLE_AUTOSAVE equ 0D2h
        SAVE_ATTRIBUTE_VALUES equ 0D3h
        EXECUTE_OFFLINE_DIAGS equ 0D4h
        SMART_READ_LOG equ 0D5h
        SMART_WRITE_LOG equ 0d6h
        ENABLE_SMART equ 0D8h
        DISABLE_SMART equ 0D9h
        RETURN_SMART_STATUS equ 0DAh
        ENABLE_DISABLE_AUTO_OFFLINE equ 0DBh
      endif
      IOCTL_DISK_GET_DISK_ATTRIBUTES equ CTL_CODE(IOCTL_DISK_BASE, 003ch, METHOD_BUFFERED, FILE_ANY_ACCESS)
      IOCTL_DISK_SET_DISK_ATTRIBUTES equ CTL_CODE(IOCTL_DISK_BASE, 003dh, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      DISK_ATTRIBUTE_OFFLINE equ 0000000000000001h
      DISK_ATTRIBUTE_READ_ONLY equ 0000000000000002h
      GET_DISK_ATTRIBUTES struct
        Version DWORD ?
        Reserved1 DWORD ?
        Attributes DWORDLONG ?
      GET_DISK_ATTRIBUTES ends
      _GET_DISK_ATTRIBUTES typedef GET_DISK_ATTRIBUTES
      PGET_DISK_ATTRIBUTES typedef ptr GET_DISK_ATTRIBUTES
      
      SET_DISK_ATTRIBUTES struct
        Version DWORD ?
        Persist BOOLEAN ?
        Reserved1 BYTE 3 dup (?)
        Attributes DWORDLONG ?
        AttributesMask DWORDLONG ?
        Reserved2 DWORD 4 dup (?)
      SET_DISK_ATTRIBUTES ends
      _SET_DISK_ATTRIBUTES typedef SET_DISK_ATTRIBUTES
      PSET_DISK_ATTRIBUTES typedef ptr SET_DISK_ATTRIBUTES
      
      IOCTL_DISK_RESET_SNAPSHOT_INFO equ CTL_CODE(IOCTL_DISK_BASE, 0084h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
      if Defined(_MSC_VER)
        if (_MSC_VER ge 1200)
        endif
      endif
    endif
  endif
  IOCTL_CHANGER_BASE equ <FILE_DEVICE_CHANGER>
  IOCTL_CHANGER_GET_PARAMETERS equ CTL_CODE(IOCTL_CHANGER_BASE, 0000h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_GET_STATUS equ CTL_CODE(IOCTL_CHANGER_BASE, 0001h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_GET_PRODUCT_DATA equ CTL_CODE(IOCTL_CHANGER_BASE, 0002h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_SET_ACCESS equ CTL_CODE(IOCTL_CHANGER_BASE, 0004h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_CHANGER_GET_ELEMENT_STATUS equ CTL_CODE(IOCTL_CHANGER_BASE, 0005h, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS equ CTL_CODE(IOCTL_CHANGER_BASE, 0006h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_SET_POSITION equ CTL_CODE(IOCTL_CHANGER_BASE, 0007h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_EXCHANGE_MEDIUM equ CTL_CODE(IOCTL_CHANGER_BASE, 0008h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_MOVE_MEDIUM equ CTL_CODE(IOCTL_CHANGER_BASE, 0009h, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_REINITIALIZE_TRANSPORT equ CTL_CODE(IOCTL_CHANGER_BASE, 000Ah, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_CHANGER_QUERY_VOLUME_TAGS equ CTL_CODE(IOCTL_CHANGER_BASE, 000Bh, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  MAX_VOLUME_ID_SIZE equ 36
  MAX_VOLUME_TEMPLATE_SIZE equ 40
  VENDOR_ID_LENGTH equ 8
  PRODUCT_ID_LENGTH equ 16
  REVISION_LENGTH equ 4
  SERIAL_NUMBER_LENGTH equ 32
  ELEMENT_TYPE typedef SDWORD
  AllElements equ 0
  ChangerTransport equ 1
  ChangerSlot equ 2
  ChangerIEPort equ 3
  ChangerDrive equ 4
  ChangerDoor equ 5
  ChangerKeypad equ 6
  ChangerMaxElement equ 7
  _ELEMENT_TYPE typedef ELEMENT_TYPE
  PELEMENT_TYPE typedef ptr ELEMENT_TYPE
  
  CHANGER_ELEMENT struct
    ElementType ELEMENT_TYPE ?
    ElementAddress DWORD ?
  CHANGER_ELEMENT ends
  _CHANGER_ELEMENT typedef CHANGER_ELEMENT
  PCHANGER_ELEMENT typedef ptr CHANGER_ELEMENT
  
  CHANGER_ELEMENT_LIST struct
    Element CHANGER_ELEMENT <>
    NumberOfElements DWORD ?
  CHANGER_ELEMENT_LIST ends
  _CHANGER_ELEMENT_LIST typedef CHANGER_ELEMENT_LIST
  PCHANGER_ELEMENT_LIST typedef ptr CHANGER_ELEMENT_LIST
  
  CHANGER_BAR_CODE_SCANNER_INSTALLED equ 00000001h
  CHANGER_INIT_ELEM_STAT_WITH_RANGE equ 00000002h
  CHANGER_CLOSE_IEPORT equ 00000004h
  CHANGER_OPEN_IEPORT equ 00000008h
  CHANGER_STATUS_NON_VOLATILE equ 00000010h
  CHANGER_EXCHANGE_MEDIA equ 00000020h
  CHANGER_CLEANER_SLOT equ 00000040h
  CHANGER_LOCK_UNLOCK equ 00000080h
  CHANGER_CARTRIDGE_MAGAZINE equ 00000100h
  CHANGER_MEDIUM_FLIP equ 00000200h
  CHANGER_POSITION_TO_ELEMENT equ 00000400h
  CHANGER_REPORT_IEPORT_STATE equ 00000800h
  CHANGER_STORAGE_DRIVE equ 00001000h
  CHANGER_STORAGE_IEPORT equ 00002000h
  CHANGER_STORAGE_SLOT equ 00004000h
  CHANGER_STORAGE_TRANSPORT equ 00008000h
  CHANGER_DRIVE_CLEANING_REQUIRED equ 00010000h
  CHANGER_PREDISMOUNT_EJECT_REQUIRED equ 00020000h
  CHANGER_CLEANER_ACCESS_NOT_VALID equ 00040000h
  CHANGER_PREMOUNT_EJECT_REQUIRED equ 00080000h
  CHANGER_VOLUME_IDENTIFICATION equ 00100000h
  CHANGER_VOLUME_SEARCH equ 00200000h
  CHANGER_VOLUME_ASSERT equ 00400000h
  CHANGER_VOLUME_REPLACE equ 00800000h
  CHANGER_VOLUME_UNDEFINE equ 01000000h
  CHANGER_SERIAL_NUMBER_VALID equ 04000000h
  CHANGER_DEVICE_REINITIALIZE_CAPABLE equ 08000000h
  CHANGER_KEYPAD_ENABLE_DISABLE equ 10000000h
  CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS equ 20000000h
  CHANGER_RESERVED_BIT equ 80000000h
  CHANGER_PREDISMOUNT_ALIGN_TO_SLOT equ 80000001h
  CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE equ 80000002h
  CHANGER_CLEANER_AUTODISMOUNT equ 80000004h
  CHANGER_TRUE_EXCHANGE_CAPABLE equ 80000008h
  CHANGER_SLOTS_USE_TRAYS equ 80000010h
  CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR equ 80000020h
  CHANGER_CLEANER_OPS_NOT_SUPPORTED equ 80000040h
  CHANGER_IEPORT_USER_CONTROL_OPEN equ 80000080h
  CHANGER_IEPORT_USER_CONTROL_CLOSE equ 80000100h
  CHANGER_MOVE_EXTENDS_IEPORT equ 80000200h
  CHANGER_MOVE_RETRACTS_IEPORT equ 80000400h
  CHANGER_TO_TRANSPORT equ 01h
  CHANGER_TO_SLOT equ 02h
  CHANGER_TO_IEPORT equ 04h
  CHANGER_TO_DRIVE equ 08h
  LOCK_UNLOCK_IEPORT equ 01h
  LOCK_UNLOCK_DOOR equ 02h
  LOCK_UNLOCK_KEYPAD equ 04h
  GET_CHANGER_PARAMETERS struct
    Size_ DWORD ?
    NumberTransportElements WORD ?
    NumberStorageElements WORD ?
    NumberCleanerSlots WORD ?
    NumberIEElements WORD ?
    NumberDataTransferElements WORD ?
    NumberOfDoors WORD ?
    FirstSlotNumber WORD ?
    FirstDriveNumber WORD ?
    FirstTransportNumber WORD ?
    FirstIEPortNumber WORD ?
    FirstCleanerSlotAddress WORD ?
    MagazineSize WORD ?
    DriveCleanTimeout DWORD ?
    Features0 DWORD ?
    Features1 DWORD ?
    MoveFromTransport BYTE ?
    MoveFromSlot BYTE ?
    MoveFromIePort BYTE ?
    MoveFromDrive BYTE ?
    ExchangeFromTransport BYTE ?
    ExchangeFromSlot BYTE ?
    ExchangeFromIePort BYTE ?
    ExchangeFromDrive BYTE ?
    LockUnlockCapabilities BYTE ?
    PositionCapabilities BYTE ?
    Reserved1 BYTE 2 dup (?)
    Reserved2 DWORD 2 dup (?)
  GET_CHANGER_PARAMETERS ends
  _GET_CHANGER_PARAMETERS typedef GET_CHANGER_PARAMETERS
  PGET_CHANGER_PARAMETERS typedef ptr GET_CHANGER_PARAMETERS
  
  CHANGER_PRODUCT_DATA struct
    VendorId BYTE VENDOR_ID_LENGTH dup (?)
    ProductId BYTE PRODUCT_ID_LENGTH dup (?)
    Revision BYTE REVISION_LENGTH dup (?)
    SerialNumber BYTE SERIAL_NUMBER_LENGTH dup (?)
    DeviceType BYTE ?
  CHANGER_PRODUCT_DATA ends
  _CHANGER_PRODUCT_DATA typedef CHANGER_PRODUCT_DATA
  PCHANGER_PRODUCT_DATA typedef ptr CHANGER_PRODUCT_DATA
  
  LOCK_ELEMENT equ 0
  UNLOCK_ELEMENT equ 1
  EXTEND_IEPORT equ 2
  RETRACT_IEPORT equ 3
  CHANGER_SET_ACCESS struct
    Element CHANGER_ELEMENT <>
    Control DWORD ?
  CHANGER_SET_ACCESS ends
  _CHANGER_SET_ACCESS typedef CHANGER_SET_ACCESS
  PCHANGER_SET_ACCESS typedef ptr CHANGER_SET_ACCESS
  
  CHANGER_READ_ELEMENT_STATUS struct
    ElementList CHANGER_ELEMENT_LIST <>
    VolumeTagInfo BOOLEAN ?
  CHANGER_READ_ELEMENT_STATUS ends
  _CHANGER_READ_ELEMENT_STATUS typedef CHANGER_READ_ELEMENT_STATUS
  PCHANGER_READ_ELEMENT_STATUS typedef ptr CHANGER_READ_ELEMENT_STATUS
  
  CHANGER_ELEMENT_STATUS struct
    Element CHANGER_ELEMENT <>
    SrcElementAddress CHANGER_ELEMENT <>
    Flags DWORD ?
    ExceptionCode DWORD ?
    TargetId BYTE ?
    Lun BYTE ?
    Reserved WORD ?
    PrimaryVolumeID BYTE MAX_VOLUME_ID_SIZE dup (?)
    AlternateVolumeID BYTE MAX_VOLUME_ID_SIZE dup (?)
  CHANGER_ELEMENT_STATUS ends
  _CHANGER_ELEMENT_STATUS typedef CHANGER_ELEMENT_STATUS
  PCHANGER_ELEMENT_STATUS typedef ptr CHANGER_ELEMENT_STATUS
  
  CHANGER_ELEMENT_STATUS_EX struct
    Element CHANGER_ELEMENT <>
    SrcElementAddress CHANGER_ELEMENT <>
    Flags DWORD ?
    ExceptionCode DWORD ?
    TargetId BYTE ?
    Lun BYTE ?
    Reserved WORD ?
    PrimaryVolumeID BYTE MAX_VOLUME_ID_SIZE dup (?)
    AlternateVolumeID BYTE MAX_VOLUME_ID_SIZE dup (?)
    VendorIdentification BYTE VENDOR_ID_LENGTH dup (?)
    ProductIdentification BYTE PRODUCT_ID_LENGTH dup (?)
    SerialNumber BYTE SERIAL_NUMBER_LENGTH dup (?)
  CHANGER_ELEMENT_STATUS_EX ends
  _CHANGER_ELEMENT_STATUS_EX typedef CHANGER_ELEMENT_STATUS_EX
  PCHANGER_ELEMENT_STATUS_EX typedef ptr CHANGER_ELEMENT_STATUS_EX
  
  ELEMENT_STATUS_FULL equ 00000001h
  ELEMENT_STATUS_IMPEXP equ 00000002h
  ELEMENT_STATUS_EXCEPT equ 00000004h
  ELEMENT_STATUS_ACCESS equ 00000008h
  ELEMENT_STATUS_EXENAB equ 00000010h
  ELEMENT_STATUS_INENAB equ 00000020h
  ELEMENT_STATUS_PRODUCT_DATA equ 00000040h
  ELEMENT_STATUS_LUN_VALID equ 00001000h
  ELEMENT_STATUS_ID_VALID equ 00002000h
  ELEMENT_STATUS_NOT_BUS equ 00008000h
  ELEMENT_STATUS_INVERT equ 00400000h
  ELEMENT_STATUS_SVALID equ 00800000h
  ELEMENT_STATUS_PVOLTAG equ 10000000h
  ELEMENT_STATUS_AVOLTAG equ 20000000h
  ERROR_LABEL_UNREADABLE equ 00000001h
  ERROR_LABEL_QUESTIONABLE equ 00000002h
  ERROR_SLOT_NOT_PRESENT equ 00000004h
  ERROR_DRIVE_NOT_INSTALLED equ 00000008h
  ERROR_TRAY_MALFUNCTION equ 00000010h
  ERROR_INIT_STATUS_NEEDED equ 00000011h
  ERROR_UNHANDLED_ERROR equ 0FFFFFFFFh
  CHANGER_INITIALIZE_ELEMENT_STATUS struct
    ElementList CHANGER_ELEMENT_LIST <>
    BarCodeScan BOOLEAN ?
  CHANGER_INITIALIZE_ELEMENT_STATUS ends
  _CHANGER_INITIALIZE_ELEMENT_STATUS typedef CHANGER_INITIALIZE_ELEMENT_STATUS
  PCHANGER_INITIALIZE_ELEMENT_STATUS typedef ptr CHANGER_INITIALIZE_ELEMENT_STATUS
  
  CHANGER_SET_POSITION struct
    Transport CHANGER_ELEMENT <>
    Destination CHANGER_ELEMENT <>
    Flip BOOLEAN ?
  CHANGER_SET_POSITION ends
  _CHANGER_SET_POSITION typedef CHANGER_SET_POSITION
  PCHANGER_SET_POSITION typedef ptr CHANGER_SET_POSITION
  
  CHANGER_EXCHANGE_MEDIUM struct
    Transport CHANGER_ELEMENT <>
    Source CHANGER_ELEMENT <>
    Destination1 CHANGER_ELEMENT <>
    Destination2 CHANGER_ELEMENT <>
    Flip1 BOOLEAN ?
    Flip2 BOOLEAN ?
  CHANGER_EXCHANGE_MEDIUM ends
  _CHANGER_EXCHANGE_MEDIUM typedef CHANGER_EXCHANGE_MEDIUM
  PCHANGER_EXCHANGE_MEDIUM typedef ptr CHANGER_EXCHANGE_MEDIUM
  
  CHANGER_MOVE_MEDIUM struct
    Transport CHANGER_ELEMENT <>
    Source CHANGER_ELEMENT <>
    Destination CHANGER_ELEMENT <>
    Flip BOOLEAN ?
  CHANGER_MOVE_MEDIUM ends
  _CHANGER_MOVE_MEDIUM typedef CHANGER_MOVE_MEDIUM
  PCHANGER_MOVE_MEDIUM typedef ptr CHANGER_MOVE_MEDIUM
  
  CHANGER_SEND_VOLUME_TAG_INFORMATION struct
    StartingElement CHANGER_ELEMENT <>
    ActionCode DWORD ?
    VolumeIDTemplate BYTE MAX_VOLUME_TEMPLATE_SIZE dup (?)
  CHANGER_SEND_VOLUME_TAG_INFORMATION ends
  _CHANGER_SEND_VOLUME_TAG_INFORMATION typedef CHANGER_SEND_VOLUME_TAG_INFORMATION
  PCHANGER_SEND_VOLUME_TAG_INFORMATION typedef ptr CHANGER_SEND_VOLUME_TAG_INFORMATION
  
  READ_ELEMENT_ADDRESS_INFO struct
    NumberOfElements DWORD ?
    ElementStatus CHANGER_ELEMENT_STATUS 1 dup (<>)
  READ_ELEMENT_ADDRESS_INFO ends
  _READ_ELEMENT_ADDRESS_INFO typedef READ_ELEMENT_ADDRESS_INFO
  PREAD_ELEMENT_ADDRESS_INFO typedef ptr READ_ELEMENT_ADDRESS_INFO
  
  SEARCH_ALL equ 0h
  SEARCH_PRIMARY equ 1h
  SEARCH_ALTERNATE equ 2h
  SEARCH_ALL_NO_SEQ equ 4h
  SEARCH_PRI_NO_SEQ equ 5h
  SEARCH_ALT_NO_SEQ equ 6h
  ASSERT_PRIMARY equ 8h
  ASSERT_ALTERNATE equ 9h
  REPLACE_PRIMARY equ 0Ah
  REPLACE_ALTERNATE equ 0Bh
  UNDEFINE_PRIMARY equ 0Ch
  UNDEFINE_ALTERNATE equ 0Dh
  CHANGER_DEVICE_PROBLEM_TYPE typedef SDWORD
  DeviceProblemNone equ 0
  DeviceProblemHardware equ 1
  DeviceProblemCHMError equ 2
  DeviceProblemDoorOpen equ 3
  DeviceProblemCalibrationError equ 4
  DeviceProblemTargetFailure equ 5
  DeviceProblemCHMMoveError equ 6
  DeviceProblemCHMZeroError equ 7
  DeviceProblemCartridgeInsertError equ 8
  DeviceProblemPositionError equ 9
  DeviceProblemSensorError equ 10
  DeviceProblemCartridgeEjectError equ 11
  DeviceProblemGripperError equ 12
  DeviceProblemDriveError equ 13
  _CHANGER_DEVICE_PROBLEM_TYPE typedef CHANGER_DEVICE_PROBLEM_TYPE
  PCHANGER_DEVICE_PROBLEM_TYPE typedef ptr CHANGER_DEVICE_PROBLEM_TYPE
  
  IOCTL_SERIAL_LSRMST_INSERT equ CTL_CODE(FILE_DEVICE_SERIAL_PORT, 31, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_SERENUM_EXPOSE_HARDWARE equ CTL_CODE(FILE_DEVICE_SERENUM, 128, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_SERENUM_REMOVE_HARDWARE equ CTL_CODE(FILE_DEVICE_SERENUM, 129, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_SERENUM_PORT_DESC equ CTL_CODE(FILE_DEVICE_SERENUM, 130, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_SERENUM_GET_PORT_NAME equ CTL_CODE(FILE_DEVICE_SERENUM, 131, METHOD_BUFFERED, FILE_ANY_ACCESS)
  SERIAL_LSRMST_ESCAPE equ (00h)
  SERIAL_LSRMST_LSR_DATA equ (01h)
  SERIAL_LSRMST_LSR_NODATA equ (02h)
  SERIAL_LSRMST_MST equ (03h)
  SERIAL_IOC_FCR_FIFO_ENABLE equ (00000001h)
  SERIAL_IOC_FCR_RCVR_RESET equ (00000002h)
  SERIAL_IOC_FCR_XMIT_RESET equ (00000004h)
  SERIAL_IOC_FCR_DMA_MODE equ (00000008h)
  SERIAL_IOC_FCR_RES1 equ (00000010h)
  SERIAL_IOC_FCR_RES2 equ (00000020h)
  SERIAL_IOC_FCR_RCVR_TRIGGER_LSB equ (00000040h)
  SERIAL_IOC_FCR_RCVR_TRIGGER_MSB equ (00000080h)
  SERIAL_IOC_MCR_DTR equ (00000001h)
  SERIAL_IOC_MCR_RTS equ (00000002h)
  SERIAL_IOC_MCR_OUT1 equ (00000004h)
  SERIAL_IOC_MCR_OUT2 equ (00000008h)
  SERIAL_IOC_MCR_LOOP equ (00000010h)
  ifndef _FILESYSTEMFSCTL_
    _FILESYSTEMFSCTL_ equ <>
    FSCTL_REQUEST_OPLOCK_LEVEL_1 equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_REQUEST_OPLOCK_LEVEL_2 equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 1, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_REQUEST_BATCH_OPLOCK equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_OPLOCK_BREAK_ACKNOWLEDGE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 3, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_OPBATCH_ACK_CLOSE_PENDING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 4, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_OPLOCK_BREAK_NOTIFY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 5, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_LOCK_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 6, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_UNLOCK_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 7, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_DISMOUNT_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_IS_VOLUME_MOUNTED equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 10, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_IS_PATHNAME_VALID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 11, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_MARK_VOLUME_DIRTY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_QUERY_RETRIEVAL_POINTERS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 14, METHOD_NEITHER, FILE_ANY_ACCESS)
    FSCTL_GET_COMPRESSION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_SET_COMPRESSION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 16, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
    FSCTL_SET_BOOTLOADER_ACCESSED equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 19, METHOD_NEITHER, FILE_ANY_ACCESS)
    FSCTL_MARK_AS_SYSTEM_HIVE equ <FSCTL_SET_BOOTLOADER_ACCESSED>
    FSCTL_OPLOCK_BREAK_ACK_NO_2 equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 20, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_INVALIDATE_VOLUMES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 21, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_QUERY_FAT_BPB equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 22, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_REQUEST_FILTER_OPLOCK equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 23, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FSCTL_FILESYSTEM_GET_STATISTICS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 24, METHOD_BUFFERED, FILE_ANY_ACCESS)
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      FSCTL_GET_NTFS_VOLUME_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 25, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_NTFS_FILE_RECORD equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 26, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_VOLUME_BITMAP equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 27, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_GET_RETRIEVAL_POINTERS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 28, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_MOVE_FILE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 29, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_IS_VOLUME_DIRTY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 30, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_ALLOW_EXTENDED_DASD_IO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 32, METHOD_NEITHER, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FSCTL_FIND_FILES_BY_SID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 35, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_SET_OBJECT_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 38, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_GET_OBJECT_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 39, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DELETE_OBJECT_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 40, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_SET_REPARSE_POINT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 41, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_GET_REPARSE_POINT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 42, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DELETE_REPARSE_POINT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 43, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_ENUM_USN_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 44, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_SECURITY_ID_CHECK equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 45, METHOD_NEITHER, FILE_READ_DATA)
      FSCTL_READ_USN_JOURNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 46, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_SET_OBJECT_ID_EXTENDED equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 47, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_CREATE_OR_GET_OBJECT_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 48, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_SPARSE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 49, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_SET_ZERO_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 50, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_QUERY_ALLOCATED_RANGES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 51, METHOD_NEITHER, FILE_READ_DATA)
      FSCTL_ENABLE_UPGRADE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 52, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_SET_ENCRYPTION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 53, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_ENCRYPTION_FSCTL_IO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 54, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_WRITE_RAW_ENCRYPTED equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 55, METHOD_NEITHER, FILE_SPECIAL_ACCESS)
      FSCTL_READ_RAW_ENCRYPTED equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 56, METHOD_NEITHER, FILE_SPECIAL_ACCESS)
      FSCTL_CREATE_USN_JOURNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 57, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_READ_FILE_USN_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 58, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_WRITE_USN_CLOSE_RECORD equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 59, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_EXTEND_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 60, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_USN_JOURNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 61, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DELETE_USN_JOURNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 62, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_MARK_HANDLE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 63, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SIS_COPYFILE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 64, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SIS_LINK_FILES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 65, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
      FSCTL_RECALL_FILE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 69, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_READ_FROM_PLEX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 71, METHOD_OUT_DIRECT, FILE_READ_DATA)
      FSCTL_FILE_PREFETCH equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 72, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_VISTA)
      FSCTL_MAKE_MEDIA_COMPATIBLE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 76, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_SET_DEFECT_MANAGEMENT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 77, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_QUERY_SPARING_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 78, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_ON_DISK_VOLUME_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 79, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_VOLUME_COMPRESSION_STATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 80, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_TXFS_MODIFY_RM equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 81, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_QUERY_RM_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 82, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_TXFS_ROLLFORWARD_REDO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 84, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_ROLLFORWARD_UNDO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 85, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_START_RM equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 86, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_SHUTDOWN_RM equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 87, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_READ_BACKUP_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 88, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_TXFS_WRITE_BACKUP_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 89, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_CREATE_SECONDARY_RM equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 90, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_GET_METADATA_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 91, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_TXFS_GET_TRANSACTED_VERSION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 92, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_TXFS_SAVEPOINT_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 94, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_CREATE_MINIVERSION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 95, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_TXFS_TRANSACTION_ACTIVE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 99, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_SET_ZERO_ON_DEALLOCATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 101, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_SET_REPAIR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 102, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_REPAIR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 103, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_WAIT_FOR_REPAIR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 104, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_INITIATE_REPAIR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 106, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSC_INTERNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 107, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_SHRINK_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 108, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_SET_SHORT_NAME_BEHAVIOR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 109, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DFSR_SET_GHOST_HANDLE_STATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 110, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 120, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_TXFS_LIST_TRANSACTIONS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 121, METHOD_BUFFERED, FILE_READ_DATA)
      FSCTL_QUERY_PAGEFILE_ENCRYPTION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 122, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_VISTA)
      FSCTL_RESET_VOLUME_ALLOCATION_HINTS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 123, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_QUERY_DEPENDENT_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 124, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SD_GLOBAL_CHANGE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 125, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_VISTA)
      FSCTL_TXFS_READ_BACKUP_INFORMATION2 equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 126, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_LOOKUP_STREAM_FROM_CLUSTER equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 127, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_TXFS_WRITE_BACKUP_INFORMATION2 equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 128, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_FILE_TYPE_NOTIFICATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 129, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      FSCTL_FILE_LEVEL_TRIM equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 130, METHOD_BUFFERED, FILE_WRITE_DATA)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_GET_BOOT_AREA_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 140, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_RETRIEVAL_POINTER_BASE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 141, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_PERSISTENT_VOLUME_STATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 142, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_PERSISTENT_VOLUME_STATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 143, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_REQUEST_OPLOCK equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 144, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 145, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_IS_CSV_FILE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 146, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_FILE_SYSTEM_RECOGNITION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 147, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_GET_VOLUME_PATH_NAME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 148, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 149, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 150, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_IS_FILE_ON_CSV_VOLUME equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 151, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      FSCTL_CORRUPTION_HANDLING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 152, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_OFFLOAD_READ equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 153, METHOD_BUFFERED, FILE_READ_ACCESS)
      FSCTL_OFFLOAD_WRITE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 154, METHOD_BUFFERED, FILE_WRITE_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_CSV_INTERNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 155, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      FSCTL_SET_PURGE_FAILURE_MODE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 156, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_FILE_LAYOUT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 157, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_IS_VOLUME_OWNED_BYCSVFS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 158, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_INTEGRITY_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 159, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_INTEGRITY_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 160, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
      FSCTL_QUERY_FILE_REGIONS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 161, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      FSCTL_RKF_INTERNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 171, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_SCRUB_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 172, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_REPAIR_COPIES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 173, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
      FSCTL_DISABLE_LOCAL_BUFFERING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 174, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_MGMT_LOCK equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 175, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 176, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_ADVANCE_FILE_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 177, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_SYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 178, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 179, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_WRITE_USN_REASON equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 180, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_CONTROL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 181, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_REFS_VOLUME_DATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 182, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 185, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FSCTL_QUERY_STORAGE_CLASSES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 187, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_REGION_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 188, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_USN_TRACK_MODIFIED_RANGES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 189, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 192, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SVHDX_SYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 193, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SVHDX_SET_INITIATOR_INFORMATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 194, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_SET_EXTERNAL_BACKING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 195, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_GET_EXTERNAL_BACKING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 196, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DELETE_EXTERNAL_BACKING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 197, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_ENUM_EXTERNAL_BACKING equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 198, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_ENUM_OVERLAY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 199, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_ADD_OVERLAY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 204, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_REMOVE_OVERLAY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 205, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_UPDATE_OVERLAY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 206, METHOD_BUFFERED, FILE_WRITE_DATA)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FSCTL_DUPLICATE_EXTENTS_TO_FILE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 209, METHOD_BUFFERED, FILE_WRITE_DATA)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FSCTL_SPARSE_OVERALLOCATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 211, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_STORAGE_QOS_CONTROL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 212, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 215, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
      FSCTL_QUERY_FILE_METADATA_OPTIMIZATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 216, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 217, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_GET_WOF_VERSION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 218, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      FSCTL_HCS_SYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 219, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_HCS_ASYNC_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 220, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_EXTENT_READ_CACHE_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 221, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 222, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_CLEAN_VOLUME_METADATA equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 223, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_INTEGRITY_INFORMATION_EX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 224, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FSCTL_SUSPEND_OVERLAY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 225, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 226, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_FILESYSTEM_GET_STATISTICS_EX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 227, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_QUERY_VOLUME_CONTAINER_STATE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 228, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_LAYER_ROOT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 229, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_TH2)
      FSCTL_QUERY_DIRECT_ACCESS_EXTENTS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 230, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 231, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SSDI_STORAGE_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 232, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS1)
      FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 233, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_READ_UNPRIVILEGED_USN_JOURNAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 234, METHOD_NEITHER, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_TH2)
      FSCTL_GHOST_FILE_EXTENTS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 235, METHOD_BUFFERED, FILE_WRITE_ACCESS)
      FSCTL_QUERY_GHOSTED_FILE_EXTENTS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 236, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_TH2)
      FSCTL_UNMAP_SPACE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 237, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 238, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS2)
      FSCTL_STREAMS_QUERY_PARAMETERS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 241, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_STREAMS_ASSOCIATE_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 242, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_STREAMS_QUERY_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 243, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 244, METHOD_NEITHER, FILE_ANY_ACCESS)
      FSCTL_QUERY_VOLUME_NUMA_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 245, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS2)
      FSCTL_REFS_DEALLOCATE_RANGES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 246, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_TH2)
      FSCTL_QUERY_REFS_SMR_VOLUME_INFO equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 247, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 248, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 249, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS3)
      FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 250, METHOD_BUFFERED, FILE_WRITE_DATA)
      FSCTL_QUERY_BAD_RANGES equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 251, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 252, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_DELETE_CORRUPTED_REFS_CONTAINER equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 253, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_SCRUB_UNDISCOVERABLE_ID equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 254, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS4)
      FSCTL_NOTIFY_DATA_CHANGE equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 255, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS1)
      FSCTL_START_VIRTUALIZATION_INSTANCE_EX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 256, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS4)
      FSCTL_ENCRYPTION_KEY_CONTROL equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 257, METHOD_BUFFERED, FILE_ANY_ACCESS)
      FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 258, METHOD_BUFFERED, FILE_ANY_ACCESS)
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS1)
      FSCTL_SET_REPARSE_POINT_EX equ CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 259, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    endif
    IOCTL_AVIO_ALLOCATE_STREAM equ CTL_CODE(FILE_DEVICE_AVIO, 1, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    IOCTL_AVIO_FREE_STREAM equ CTL_CODE(FILE_DEVICE_AVIO, 2, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    IOCTL_AVIO_MODIFY_STREAM equ CTL_CODE(FILE_DEVICE_AVIO, 3, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
    PATHNAME_BUFFER struct
      PathNameLength DWORD ?
      Name_ WCHAR 1 dup (?)
    PATHNAME_BUFFER ends
    _PATHNAME_BUFFER typedef PATHNAME_BUFFER
    PPATHNAME_BUFFER typedef ptr PATHNAME_BUFFER
    
    FSCTL_QUERY_FAT_BPB_BUFFER struct
      First0x24BytesOfBootSector BYTE 24h dup (?)
    FSCTL_QUERY_FAT_BPB_BUFFER ends
    _FSCTL_QUERY_FAT_BPB_BUFFER typedef FSCTL_QUERY_FAT_BPB_BUFFER
    PFSCTL_QUERY_FAT_BPB_BUFFER typedef ptr FSCTL_QUERY_FAT_BPB_BUFFER
    
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      NTFS_VOLUME_DATA_BUFFER struct
        VolumeSerialNumber LARGE_INTEGER <>
        NumberSectors LARGE_INTEGER <>
        TotalClusters LARGE_INTEGER <>
        FreeClusters LARGE_INTEGER <>
        TotalReserved LARGE_INTEGER <>
        BytesPerSector DWORD ?
        BytesPerCluster DWORD ?
        BytesPerFileRecordSegment DWORD ?
        ClustersPerFileRecordSegment DWORD ?
        MftValidDataLength LARGE_INTEGER <>
        MftStartLcn LARGE_INTEGER <>
        Mft2StartLcn LARGE_INTEGER <>
        MftZoneStart LARGE_INTEGER <>
        MftZoneEnd LARGE_INTEGER <>
      NTFS_VOLUME_DATA_BUFFER ends
      PNTFS_VOLUME_DATA_BUFFER typedef ptr NTFS_VOLUME_DATA_BUFFER
      
      NTFS_EXTENDED_VOLUME_DATA struct
        ByteCount DWORD ?
        MajorVersion WORD ?
        MinorVersion WORD ?
        BytesPerPhysicalSector DWORD ?
        LfsMajorVersion WORD ?
        LfsMinorVersion WORD ?
        if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
          MaxDeviceTrimExtentCount DWORD ?
          MaxDeviceTrimByteCount DWORD ?
          MaxVolumeTrimExtentCount DWORD ?
          MaxVolumeTrimByteCount DWORD ?
        endif
      NTFS_EXTENDED_VOLUME_DATA ends
      PNTFS_EXTENDED_VOLUME_DATA typedef ptr NTFS_EXTENDED_VOLUME_DATA
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      REFS_VOLUME_DATA_BUFFER struct
        ByteCount DWORD ?
        MajorVersion DWORD ?
        MinorVersion DWORD ?
        BytesPerPhysicalSector DWORD ?
        VolumeSerialNumber LARGE_INTEGER <>
        NumberSectors LARGE_INTEGER <>
        TotalClusters LARGE_INTEGER <>
        FreeClusters LARGE_INTEGER <>
        TotalReserved LARGE_INTEGER <>
        BytesPerSector DWORD ?
        BytesPerCluster DWORD ?
        MaximumSizeOfResidentFile LARGE_INTEGER <>
        Reserved LARGE_INTEGER 10 dup (<>)
      REFS_VOLUME_DATA_BUFFER ends
      PREFS_VOLUME_DATA_BUFFER typedef ptr REFS_VOLUME_DATA_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      STARTING_LCN_INPUT_BUFFER struct
        StartingLcn LARGE_INTEGER <>
      STARTING_LCN_INPUT_BUFFER ends
      PSTARTING_LCN_INPUT_BUFFER typedef ptr STARTING_LCN_INPUT_BUFFER
      
      if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
        GET_VOLUME_BITMAP_FLAG_MASK_METADATA equ 00000001h
        STARTING_LCN_INPUT_BUFFER_EX struct
          StartingLcn LARGE_INTEGER <>
          Flags DWORD ?
        STARTING_LCN_INPUT_BUFFER_EX ends
        PSTARTING_LCN_INPUT_BUFFER_EX typedef ptr STARTING_LCN_INPUT_BUFFER_EX
        
      endif
      VOLUME_BITMAP_BUFFER struct
        StartingLcn LARGE_INTEGER <>
        BitmapSize LARGE_INTEGER <>
        Buffer BYTE 1 dup (?)
      VOLUME_BITMAP_BUFFER ends
      PVOLUME_BITMAP_BUFFER typedef ptr VOLUME_BITMAP_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      STARTING_VCN_INPUT_BUFFER struct
        StartingVcn LARGE_INTEGER <>
      STARTING_VCN_INPUT_BUFFER ends
      PSTARTING_VCN_INPUT_BUFFER typedef ptr STARTING_VCN_INPUT_BUFFER
      
      RETRIEVAL_POINTERS_BUFFER struct
        ExtentCount DWORD ?
        StartingVcn LARGE_INTEGER <>
        struct Extents
          NextVcn LARGE_INTEGER <>
          Lcn LARGE_INTEGER <>
        ends
      RETRIEVAL_POINTERS_BUFFER ends
      PRETRIEVAL_POINTERS_BUFFER typedef ptr RETRIEVAL_POINTERS_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS2)
      RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER struct
        ExtentCount DWORD ?
        StartingVcn LARGE_INTEGER <>
        struct Extents
          NextVcn LARGE_INTEGER <>
          Lcn LARGE_INTEGER <>
          ReferenceCount DWORD ?
        ends
      RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER ends
      PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER typedef ptr RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      NTFS_FILE_RECORD_INPUT_BUFFER struct
        FileReferenceNumber LARGE_INTEGER <>
      NTFS_FILE_RECORD_INPUT_BUFFER ends
      PNTFS_FILE_RECORD_INPUT_BUFFER typedef ptr NTFS_FILE_RECORD_INPUT_BUFFER
      
      NTFS_FILE_RECORD_OUTPUT_BUFFER struct
        FileReferenceNumber LARGE_INTEGER <>
        FileRecordLength DWORD ?
        FileRecordBuffer BYTE 1 dup (?)
      NTFS_FILE_RECORD_OUTPUT_BUFFER ends
      PNTFS_FILE_RECORD_OUTPUT_BUFFER typedef ptr NTFS_FILE_RECORD_OUTPUT_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_NT4)
      MOVE_FILE_DATA struct
        FileHandle HANDLE ?
        StartingVcn LARGE_INTEGER <>
        StartingLcn LARGE_INTEGER <>
        ClusterCount DWORD ?
      MOVE_FILE_DATA ends
      PMOVE_FILE_DATA typedef ptr MOVE_FILE_DATA
      
      MOVE_FILE_RECORD_DATA struct
        FileHandle HANDLE ?
        SourceFileRecord LARGE_INTEGER <>
        TargetFileRecord LARGE_INTEGER <>
      MOVE_FILE_RECORD_DATA ends
      PMOVE_FILE_RECORD_DATA typedef ptr MOVE_FILE_RECORD_DATA
      
      if Defined(_WIN64)
        MOVE_FILE_DATA32 struct
          FileHandle UINT32 ?
          StartingVcn LARGE_INTEGER <>
          StartingLcn LARGE_INTEGER <>
          ClusterCount DWORD ?
        MOVE_FILE_DATA32 ends
        _MOVE_FILE_DATA32 typedef MOVE_FILE_DATA32
        PMOVE_FILE_DATA32 typedef ptr MOVE_FILE_DATA32
        
      endif
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FIND_BY_SID_DATA struct
        Restart DWORD ?
        Sid SID <>
      FIND_BY_SID_DATA ends
      PFIND_BY_SID_DATA typedef ptr FIND_BY_SID_DATA
      
      FIND_BY_SID_OUTPUT struct
        NextEntryOffset DWORD ?
        FileIndex DWORD ?
        FileNameLength DWORD ?
        FileName WCHAR 1 dup (?)
      FIND_BY_SID_OUTPUT ends
      PFIND_BY_SID_OUTPUT typedef ptr FIND_BY_SID_OUTPUT
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      MFT_ENUM_DATA_V0 struct
        StartFileReferenceNumber DWORDLONG ?
        LowUsn USN ?
        HighUsn USN ?
      MFT_ENUM_DATA_V0 ends
      PMFT_ENUM_DATA_V0 typedef ptr MFT_ENUM_DATA_V0
      
      MFT_ENUM_DATA_V1 struct
        StartFileReferenceNumber DWORDLONG ?
        LowUsn USN ?
        HighUsn USN ?
        MinMajorVersion WORD ?
        MaxMajorVersion WORD ?
      MFT_ENUM_DATA_V1 ends
      PMFT_ENUM_DATA_V1 typedef ptr MFT_ENUM_DATA_V1
      
      if (NTDDI_VERSION ge NTDDI_WIN8)
        MFT_ENUM_DATA typedef MFT_ENUM_DATA_V1
        PMFT_ENUM_DATA typedef ptr MFT_ENUM_DATA_V1
      else
        MFT_ENUM_DATA typedef MFT_ENUM_DATA_V0
        PMFT_ENUM_DATA typedef ptr MFT_ENUM_DATA_V0
      endif
      CREATE_USN_JOURNAL_DATA struct
        MaximumSize DWORDLONG ?
        AllocationDelta DWORDLONG ?
      CREATE_USN_JOURNAL_DATA ends
      PCREATE_USN_JOURNAL_DATA typedef ptr CREATE_USN_JOURNAL_DATA
      
      READ_FILE_USN_DATA struct
        MinMajorVersion WORD ?
        MaxMajorVersion WORD ?
      READ_FILE_USN_DATA ends
      PREAD_FILE_USN_DATA typedef ptr READ_FILE_USN_DATA
      
      READ_USN_JOURNAL_DATA_V0 struct
        StartUsn USN ?
        ReasonMask DWORD ?
        ReturnOnlyOnClose DWORD ?
        Timeout DWORDLONG ?
        BytesToWaitFor DWORDLONG ?
        UsnJournalID DWORDLONG ?
      READ_USN_JOURNAL_DATA_V0 ends
      PREAD_USN_JOURNAL_DATA_V0 typedef ptr READ_USN_JOURNAL_DATA_V0
      
      READ_USN_JOURNAL_DATA_V1 struct
        StartUsn USN ?
        ReasonMask DWORD ?
        ReturnOnlyOnClose DWORD ?
        Timeout DWORDLONG ?
        BytesToWaitFor DWORDLONG ?
        UsnJournalID DWORDLONG ?
        MinMajorVersion WORD ?
        MaxMajorVersion WORD ?
      READ_USN_JOURNAL_DATA_V1 ends
      PREAD_USN_JOURNAL_DATA_V1 typedef ptr READ_USN_JOURNAL_DATA_V1
      
      if (NTDDI_VERSION ge NTDDI_WIN8)
        READ_USN_JOURNAL_DATA typedef READ_USN_JOURNAL_DATA_V1
        PREAD_USN_JOURNAL_DATA typedef ptr READ_USN_JOURNAL_DATA_V1
      else
        READ_USN_JOURNAL_DATA typedef READ_USN_JOURNAL_DATA_V0
        PREAD_USN_JOURNAL_DATA typedef ptr READ_USN_JOURNAL_DATA_V0
      endif
      USN_TRACK_MODIFIED_RANGES struct
        Flags DWORD ?
        Unused DWORD ?
        ChunkSize DWORDLONG ?
        FileSizeThreshold LONGLONG ?
      USN_TRACK_MODIFIED_RANGES ends
      PUSN_TRACK_MODIFIED_RANGES typedef ptr USN_TRACK_MODIFIED_RANGES
      
      USN_RANGE_TRACK_OUTPUT struct
        Usn USN ?
      USN_RANGE_TRACK_OUTPUT ends
      PUSN_RANGE_TRACK_OUTPUT typedef ptr USN_RANGE_TRACK_OUTPUT
      
      FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE equ 00000001h
      USN_RECORD_V2 struct
        RecordLength DWORD ?
        MajorVersion WORD ?
        MinorVersion WORD ?
        FileReferenceNumber DWORDLONG ?
        ParentFileReferenceNumber DWORDLONG ?
        Usn USN ?
        TimeStamp LARGE_INTEGER <>
        Reason DWORD ?
        SourceInfo DWORD ?
        SecurityId DWORD ?
        FileAttributes DWORD ?
        FileNameLength WORD ?
        FileNameOffset WORD ?
        FileName WCHAR 1 dup (?)
      USN_RECORD_V2 ends
      PUSN_RECORD_V2 typedef ptr USN_RECORD_V2
      
      USN_RECORD_V3 struct
        RecordLength DWORD ?
        MajorVersion WORD ?
        MinorVersion WORD ?
        FileReferenceNumber FILE_ID_128 <>
        ParentFileReferenceNumber FILE_ID_128 <>
        Usn USN ?
        TimeStamp LARGE_INTEGER <>
        Reason DWORD ?
        SourceInfo DWORD ?
        SecurityId DWORD ?
        FileAttributes DWORD ?
        FileNameLength WORD ?
        FileNameOffset WORD ?
        FileName WCHAR 1 dup (?)
      USN_RECORD_V3 ends
      PUSN_RECORD_V3 typedef ptr USN_RECORD_V3
      
      USN_RECORD typedef USN_RECORD_V2
      PUSN_RECORD typedef ptr USN_RECORD_V2
      USN_RECORD_COMMON_HEADER struct
        RecordLength DWORD ?
        MajorVersion WORD ?
        MinorVersion WORD ?
      USN_RECORD_COMMON_HEADER ends
      PUSN_RECORD_COMMON_HEADER typedef ptr USN_RECORD_COMMON_HEADER
      
      USN_RECORD_EXTENT struct
        Offset_ LONGLONG ?
        Length_ LONGLONG ?
      USN_RECORD_EXTENT ends
      PUSN_RECORD_EXTENT typedef ptr USN_RECORD_EXTENT
      
      USN_RECORD_V4 struct
        Header USN_RECORD_COMMON_HEADER <>
        FileReferenceNumber FILE_ID_128 <>
        ParentFileReferenceNumber FILE_ID_128 <>
        Usn USN ?
        Reason DWORD ?
        SourceInfo DWORD ?
        RemainingExtents DWORD ?
        NumberOfExtents WORD ?
        ExtentSize WORD ?
        Extents USN_RECORD_EXTENT 1 dup (<>)
      USN_RECORD_V4 ends
      PUSN_RECORD_V4 typedef ptr USN_RECORD_V4
      
      USN_RECORD_UNION union
        Header USN_RECORD_COMMON_HEADER <>
        V2 USN_RECORD_V2 <>
        V3 USN_RECORD_V3 <>
        V4 USN_RECORD_V4 <>
      USN_RECORD_UNION ends
      PUSN_RECORD_UNION typedef ptr USN_RECORD_UNION
      
      USN_PAGE_SIZE equ 1000h
      USN_REASON_DATA_OVERWRITE equ 00000001h
      USN_REASON_DATA_EXTEND equ 00000002h
      USN_REASON_DATA_TRUNCATION equ 00000004h
      USN_REASON_NAMED_DATA_OVERWRITE equ 00000010h
      USN_REASON_NAMED_DATA_EXTEND equ 00000020h
      USN_REASON_NAMED_DATA_TRUNCATION equ 00000040h
      USN_REASON_FILE_CREATE equ 00000100h
      USN_REASON_FILE_DELETE equ 00000200h
      USN_REASON_EA_CHANGE equ 00000400h
      USN_REASON_SECURITY_CHANGE equ 00000800h
      USN_REASON_RENAME_OLD_NAME equ 00001000h
      USN_REASON_RENAME_NEW_NAME equ 00002000h
      USN_REASON_INDEXABLE_CHANGE equ 00004000h
      USN_REASON_BASIC_INFO_CHANGE equ 00008000h
      USN_REASON_HARD_LINK_CHANGE equ 00010000h
      USN_REASON_COMPRESSION_CHANGE equ 00020000h
      USN_REASON_ENCRYPTION_CHANGE equ 00040000h
      USN_REASON_OBJECT_ID_CHANGE equ 00080000h
      USN_REASON_REPARSE_POINT_CHANGE equ 00100000h
      USN_REASON_STREAM_CHANGE equ 00200000h
      USN_REASON_TRANSACTED_CHANGE equ 00400000h
      USN_REASON_INTEGRITY_CHANGE equ 00800000h
      USN_REASON_DESIRED_STORAGE_CLASS_CHANGE equ 01000000h
      USN_REASON_CLOSE equ 80000000h
      USN_JOURNAL_DATA_V0 struct
        UsnJournalID DWORDLONG ?
        FirstUsn USN ?
        NextUsn USN ?
        LowestValidUsn USN ?
        MaxUsn USN ?
        MaximumSize DWORDLONG ?
        AllocationDelta DWORDLONG ?
      USN_JOURNAL_DATA_V0 ends
      PUSN_JOURNAL_DATA_V0 typedef ptr USN_JOURNAL_DATA_V0
      
      USN_JOURNAL_DATA_V1 struct
        UsnJournalID DWORDLONG ?
        FirstUsn USN ?
        NextUsn USN ?
        LowestValidUsn USN ?
        MaxUsn USN ?
        MaximumSize DWORDLONG ?
        AllocationDelta DWORDLONG ?
        MinSupportedMajorVersion WORD ?
        MaxSupportedMajorVersion WORD ?
      USN_JOURNAL_DATA_V1 ends
      PUSN_JOURNAL_DATA_V1 typedef ptr USN_JOURNAL_DATA_V1
      
      USN_JOURNAL_DATA_V2 struct
        UsnJournalID DWORDLONG ?
        FirstUsn USN ?
        NextUsn USN ?
        LowestValidUsn USN ?
        MaxUsn USN ?
        MaximumSize DWORDLONG ?
        AllocationDelta DWORDLONG ?
        MinSupportedMajorVersion WORD ?
        MaxSupportedMajorVersion WORD ?
        Flags DWORD ?
        RangeTrackChunkSize DWORDLONG ?
        RangeTrackFileSizeThreshold LONGLONG ?
      USN_JOURNAL_DATA_V2 ends
      PUSN_JOURNAL_DATA_V2 typedef ptr USN_JOURNAL_DATA_V2
      
      if (NTDDI_VERSION ge NTDDI_WIN8)
        USN_JOURNAL_DATA typedef USN_JOURNAL_DATA_V1
        PUSN_JOURNAL_DATA typedef ptr USN_JOURNAL_DATA_V1
      else
        USN_JOURNAL_DATA typedef USN_JOURNAL_DATA_V0
        PUSN_JOURNAL_DATA typedef ptr USN_JOURNAL_DATA_V0
      endif
      DELETE_USN_JOURNAL_DATA struct
        UsnJournalID DWORDLONG ?
        DeleteFlags DWORD ?
      DELETE_USN_JOURNAL_DATA ends
      PDELETE_USN_JOURNAL_DATA typedef ptr DELETE_USN_JOURNAL_DATA
      
      USN_DELETE_FLAG_DELETE equ 00000001h
      USN_DELETE_FLAG_NOTIFY equ 00000002h
      USN_DELETE_VALID_FLAGS equ 00000003h
      if _MSC_VER ge 1200
      endif
      MARK_HANDLE_INFO struct
        if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
          union
            UsnSourceInfo DWORD ?
            CopyNumber DWORD ?
          ends
        else
          UsnSourceInfo DWORD ?
        endif
        VolumeHandle HANDLE ?
        HandleInfo DWORD ?
      MARK_HANDLE_INFO ends
      PMARK_HANDLE_INFO typedef ptr MARK_HANDLE_INFO
      
      if Defined(_WIN64)
        MARK_HANDLE_INFO32 struct
          if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
            union
              UsnSourceInfo DWORD ?
              CopyNumber DWORD ?
            ends
          else
            UsnSourceInfo DWORD ?
          endif
          VolumeHandle UINT32 ?
          HandleInfo DWORD ?
        MARK_HANDLE_INFO32 ends
        PMARK_HANDLE_INFO32 typedef ptr MARK_HANDLE_INFO32
        
      endif
      if _MSC_VER ge 1200
      else
      endif
      USN_SOURCE_DATA_MANAGEMENT equ 00000001h
      USN_SOURCE_AUXILIARY_DATA equ 00000002h
      USN_SOURCE_REPLICATION_MANAGEMENT equ 00000004h
      USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT equ 00000008h
      USN_SOURCE_VALID_FLAGS equ <(USN_SOURCE_DATA_MANAGEMENT or USN_SOURCE_AUXILIARY_DATA or USN_SOURCE_REPLICATION_MANAGEMENT or USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT)>
      MARK_HANDLE_PROTECT_CLUSTERS equ 00000001h
      MARK_HANDLE_TXF_SYSTEM_LOG equ 00000004h
      MARK_HANDLE_NOT_TXF_SYSTEM_LOG equ 00000008h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      MARK_HANDLE_REALTIME equ 00000020h
      MARK_HANDLE_NOT_REALTIME equ 00000040h
      MARK_HANDLE_FILTER_METADATA equ 00000200h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      MARK_HANDLE_READ_COPY equ 00000080h
      MARK_HANDLE_NOT_READ_COPY equ 00000100h
      MARK_HANDLE_RETURN_PURGE_FAILURE equ 00000400h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      MARK_HANDLE_CLOUD_SYNC equ 00000800h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION equ 00001000h
      MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO equ 00002000h
      MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES equ 00004000h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS4)
      MARK_HANDLE_ENABLE_CPU_CACHE equ 10000000h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      NO_8DOT3_NAME_PRESENT equ 00000001h
      REMOVED_8DOT3_NAME equ 00000002h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      BULK_SECURITY_TEST_DATA struct
        DesiredAccess ACCESS_MASK ?
        SecurityIds DWORD 1 dup (?)
      BULK_SECURITY_TEST_DATA ends
      PBULK_SECURITY_TEST_DATA typedef ptr BULK_SECURITY_TEST_DATA
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      VOLUME_IS_DIRTY equ 00000001h
      VOLUME_UPGRADE_SCHEDULED equ 00000002h
      VOLUME_SESSION_OPEN equ 00000004h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FILE_PREFETCH struct
        Type_ DWORD ?
        Count DWORD ?
        Prefetch_ DWORDLONG 1 dup (?)
      FILE_PREFETCH ends
      _FILE_PREFETCH typedef FILE_PREFETCH
      PFILE_PREFETCH typedef ptr FILE_PREFETCH
      
      FILE_PREFETCH_EX struct
        Type_ DWORD ?
        Count DWORD ?
        Context PVOID ?
        Prefetch_ DWORDLONG 1 dup (?)
      FILE_PREFETCH_EX ends
      _FILE_PREFETCH_EX typedef FILE_PREFETCH_EX
      PFILE_PREFETCH_EX typedef ptr FILE_PREFETCH_EX
      
      FILE_PREFETCH_TYPE_FOR_CREATE equ 1h
      FILE_PREFETCH_TYPE_FOR_DIRENUM equ 2h
      FILE_PREFETCH_TYPE_FOR_CREATE_EX equ 3h
      FILE_PREFETCH_TYPE_FOR_DIRENUM_EX equ 4h
      FILE_PREFETCH_TYPE_MAX equ 4h
    endif
    FILESYSTEM_STATISTICS struct
      FileSystemType WORD ?
      Version WORD ?
      SizeOfCompleteStructure DWORD ?
      UserFileReads DWORD ?
      UserFileReadBytes DWORD ?
      UserDiskReads DWORD ?
      UserFileWrites DWORD ?
      UserFileWriteBytes DWORD ?
      UserDiskWrites DWORD ?
      MetaDataReads DWORD ?
      MetaDataReadBytes DWORD ?
      MetaDataDiskReads DWORD ?
      MetaDataWrites DWORD ?
      MetaDataWriteBytes DWORD ?
      MetaDataDiskWrites DWORD ?
    FILESYSTEM_STATISTICS ends
    _FILESYSTEM_STATISTICS typedef FILESYSTEM_STATISTICS
    PFILESYSTEM_STATISTICS typedef ptr FILESYSTEM_STATISTICS
    
    FILESYSTEM_STATISTICS_TYPE_NTFS equ 1
    FILESYSTEM_STATISTICS_TYPE_FAT equ 2
    FILESYSTEM_STATISTICS_TYPE_EXFAT equ 3
    FILESYSTEM_STATISTICS_TYPE_REFS equ 4
    FAT_STATISTICS struct
      CreateHits DWORD ?
      SuccessfulCreates DWORD ?
      FailedCreates DWORD ?
      NonCachedReads DWORD ?
      NonCachedReadBytes DWORD ?
      NonCachedWrites DWORD ?
      NonCachedWriteBytes DWORD ?
      NonCachedDiskReads DWORD ?
      NonCachedDiskWrites DWORD ?
    FAT_STATISTICS ends
    _FAT_STATISTICS typedef FAT_STATISTICS
    PFAT_STATISTICS typedef ptr FAT_STATISTICS
    
    EXFAT_STATISTICS struct
      CreateHits DWORD ?
      SuccessfulCreates DWORD ?
      FailedCreates DWORD ?
      NonCachedReads DWORD ?
      NonCachedReadBytes DWORD ?
      NonCachedWrites DWORD ?
      NonCachedWriteBytes DWORD ?
      NonCachedDiskReads DWORD ?
      NonCachedDiskWrites DWORD ?
    EXFAT_STATISTICS ends
    _EXFAT_STATISTICS typedef EXFAT_STATISTICS
    PEXFAT_STATISTICS typedef ptr EXFAT_STATISTICS
    
    NTFS_STATISTICS struct
      LogFileFullExceptions DWORD ?
      OtherExceptions DWORD ?
      MftReads DWORD ?
      MftReadBytes DWORD ?
      MftWrites DWORD ?
      MftWriteBytes DWORD ?
      struct MftWritesUserLevel
        Write WORD ?
        Create WORD ?
        SetInfo WORD ?
        Flush WORD ?
      ends
      MftWritesFlushForLogFileFull WORD ?
      MftWritesLazyWriter WORD ?
      MftWritesUserRequest WORD ?
      Mft2Writes DWORD ?
      Mft2WriteBytes DWORD ?
      struct Mft2WritesUserLevel
        Write WORD ?
        Create WORD ?
        SetInfo WORD ?
        Flush WORD ?
      ends
      Mft2WritesFlushForLogFileFull WORD ?
      Mft2WritesLazyWriter WORD ?
      Mft2WritesUserRequest WORD ?
      RootIndexReads DWORD ?
      RootIndexReadBytes DWORD ?
      RootIndexWrites DWORD ?
      RootIndexWriteBytes DWORD ?
      BitmapReads DWORD ?
      BitmapReadBytes DWORD ?
      BitmapWrites DWORD ?
      BitmapWriteBytes DWORD ?
      BitmapWritesFlushForLogFileFull WORD ?
      BitmapWritesLazyWriter WORD ?
      BitmapWritesUserRequest WORD ?
      struct BitmapWritesUserLevel
        Write WORD ?
        Create WORD ?
        SetInfo WORD ?
      ends
      MftBitmapReads DWORD ?
      MftBitmapReadBytes DWORD ?
      MftBitmapWrites DWORD ?
      MftBitmapWriteBytes DWORD ?
      MftBitmapWritesFlushForLogFileFull WORD ?
      MftBitmapWritesLazyWriter WORD ?
      MftBitmapWritesUserRequest WORD ?
      struct MftBitmapWritesUserLevel
        Write WORD ?
        Create WORD ?
        SetInfo WORD ?
        Flush WORD ?
      ends
      UserIndexReads DWORD ?
      UserIndexReadBytes DWORD ?
      UserIndexWrites DWORD ?
      UserIndexWriteBytes DWORD ?
      LogFileReads DWORD ?
      LogFileReadBytes DWORD ?
      LogFileWrites DWORD ?
      LogFileWriteBytes DWORD ?
      struct Allocate
        Calls DWORD ?
        Clusters DWORD ?
        Hints DWORD ?
        RunsReturned DWORD ?
        HintsHonored DWORD ?
        HintsClusters DWORD ?
        Cache DWORD ?
        CacheClusters DWORD ?
        CacheMiss DWORD ?
        CacheMissClusters DWORD ?
      ends
      DiskResourcesExhausted DWORD ?
    NTFS_STATISTICS ends
    _NTFS_STATISTICS typedef NTFS_STATISTICS
    PNTFS_STATISTICS typedef ptr NTFS_STATISTICS
    
    FILESYSTEM_STATISTICS_EX struct
      FileSystemType WORD ?
      Version WORD ?
      SizeOfCompleteStructure DWORD ?
      UserFileReads DWORDLONG ?
      UserFileReadBytes DWORDLONG ?
      UserDiskReads DWORDLONG ?
      UserFileWrites DWORDLONG ?
      UserFileWriteBytes DWORDLONG ?
      UserDiskWrites DWORDLONG ?
      MetaDataReads DWORDLONG ?
      MetaDataReadBytes DWORDLONG ?
      MetaDataDiskReads DWORDLONG ?
      MetaDataWrites DWORDLONG ?
      MetaDataWriteBytes DWORDLONG ?
      MetaDataDiskWrites DWORDLONG ?
    FILESYSTEM_STATISTICS_EX ends
    _FILESYSTEM_STATISTICS_EX typedef FILESYSTEM_STATISTICS_EX
    PFILESYSTEM_STATISTICS_EX typedef ptr FILESYSTEM_STATISTICS_EX
    
    NTFS_STATISTICS_EX struct
      LogFileFullExceptions DWORD ?
      OtherExceptions DWORD ?
      MftReads DWORDLONG ?
      MftReadBytes DWORDLONG ?
      MftWrites DWORDLONG ?
      MftWriteBytes DWORDLONG ?
      struct MftWritesUserLevel
        Write DWORD ?
        Create DWORD ?
        SetInfo DWORD ?
        Flush DWORD ?
      ends
      MftWritesFlushForLogFileFull DWORD ?
      MftWritesLazyWriter DWORD ?
      MftWritesUserRequest DWORD ?
      Mft2Writes DWORDLONG ?
      Mft2WriteBytes DWORDLONG ?
      struct Mft2WritesUserLevel
        Write DWORD ?
        Create DWORD ?
        SetInfo DWORD ?
        Flush DWORD ?
      ends
      Mft2WritesFlushForLogFileFull DWORD ?
      Mft2WritesLazyWriter DWORD ?
      Mft2WritesUserRequest DWORD ?
      RootIndexReads DWORDLONG ?
      RootIndexReadBytes DWORDLONG ?
      RootIndexWrites DWORDLONG ?
      RootIndexWriteBytes DWORDLONG ?
      BitmapReads DWORDLONG ?
      BitmapReadBytes DWORDLONG ?
      BitmapWrites DWORDLONG ?
      BitmapWriteBytes DWORDLONG ?
      BitmapWritesFlushForLogFileFull DWORD ?
      BitmapWritesLazyWriter DWORD ?
      BitmapWritesUserRequest DWORD ?
      struct BitmapWritesUserLevel
        Write DWORD ?
        Create DWORD ?
        SetInfo DWORD ?
        Flush DWORD ?
      ends
      MftBitmapReads DWORDLONG ?
      MftBitmapReadBytes DWORDLONG ?
      MftBitmapWrites DWORDLONG ?
      MftBitmapWriteBytes DWORDLONG ?
      MftBitmapWritesFlushForLogFileFull DWORD ?
      MftBitmapWritesLazyWriter DWORD ?
      MftBitmapWritesUserRequest DWORD ?
      struct MftBitmapWritesUserLevel
        Write DWORD ?
        Create DWORD ?
        SetInfo DWORD ?
        Flush DWORD ?
      ends
      UserIndexReads DWORDLONG ?
      UserIndexReadBytes DWORDLONG ?
      UserIndexWrites DWORDLONG ?
      UserIndexWriteBytes DWORDLONG ?
      LogFileReads DWORDLONG ?
      LogFileReadBytes DWORDLONG ?
      LogFileWrites DWORDLONG ?
      LogFileWriteBytes DWORDLONG ?
      struct Allocate
        Calls DWORD ?
        RunsReturned DWORD ?
        Hints DWORD ?
        HintsHonored DWORD ?
        Cache DWORD ?
        CacheMiss DWORD ?
        Clusters DWORDLONG ?
        HintsClusters DWORDLONG ?
        CacheClusters DWORDLONG ?
        CacheMissClusters DWORDLONG ?
      ends
      DiskResourcesExhausted DWORD ?
      VolumeTrimCount DWORDLONG ?
      VolumeTrimTime DWORDLONG ?
      VolumeTrimByteCount DWORDLONG ?
      FileLevelTrimCount DWORDLONG ?
      FileLevelTrimTime DWORDLONG ?
      FileLevelTrimByteCount DWORDLONG ?
      VolumeTrimSkippedCount DWORDLONG ?
      VolumeTrimSkippedByteCount DWORDLONG ?
      NtfsFillStatInfoFromMftRecordCalledCount DWORDLONG ?
      NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount DWORDLONG ?
      NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount DWORDLONG ?
    NTFS_STATISTICS_EX ends
    _NTFS_STATISTICS_EX typedef NTFS_STATISTICS_EX
    PNTFS_STATISTICS_EX typedef ptr NTFS_STATISTICS_EX
    
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      if _MSC_VER ge 1200
      endif
      FILE_OBJECTID_BUFFER struct
        ObjectId BYTE 16 dup (?)
        union
          struct
            BirthVolumeId BYTE 16 dup (?)
            BirthObjectId BYTE 16 dup (?)
            DomainId BYTE 16 dup (?)
          ends
          ExtendedInfo BYTE 48 dup (?)
        ends
      FILE_OBJECTID_BUFFER ends
      _FILE_OBJECTID_BUFFER typedef FILE_OBJECTID_BUFFER
      PFILE_OBJECTID_BUFFER typedef ptr FILE_OBJECTID_BUFFER
      
      if _MSC_VER ge 1200
      else
      endif
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FILE_SET_SPARSE_BUFFER struct
        SetSparse BOOLEAN ?
      FILE_SET_SPARSE_BUFFER ends
      _FILE_SET_SPARSE_BUFFER typedef FILE_SET_SPARSE_BUFFER
      PFILE_SET_SPARSE_BUFFER typedef ptr FILE_SET_SPARSE_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FILE_ZERO_DATA_INFORMATION struct
        FileOffset LARGE_INTEGER <>
        BeyondFinalZero LARGE_INTEGER <>
      FILE_ZERO_DATA_INFORMATION ends
      _FILE_ZERO_DATA_INFORMATION typedef FILE_ZERO_DATA_INFORMATION
      PFILE_ZERO_DATA_INFORMATION typedef ptr FILE_ZERO_DATA_INFORMATION
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA equ 00000001h
      FILE_ZERO_DATA_INFORMATION_EX struct
        FileOffset LARGE_INTEGER <>
        BeyondFinalZero LARGE_INTEGER <>
        Flags DWORD ?
      FILE_ZERO_DATA_INFORMATION_EX ends
      _FILE_ZERO_DATA_INFORMATION_EX typedef FILE_ZERO_DATA_INFORMATION_EX
      PFILE_ZERO_DATA_INFORMATION_EX typedef ptr FILE_ZERO_DATA_INFORMATION_EX
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      FILE_ALLOCATED_RANGE_BUFFER struct
        FileOffset LARGE_INTEGER <>
        Length_ LARGE_INTEGER <>
      FILE_ALLOCATED_RANGE_BUFFER ends
      _FILE_ALLOCATED_RANGE_BUFFER typedef FILE_ALLOCATED_RANGE_BUFFER
      PFILE_ALLOCATED_RANGE_BUFFER typedef ptr FILE_ALLOCATED_RANGE_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      ENCRYPTION_BUFFER struct
        EncryptionOperation DWORD ?
        Private_ BYTE 1 dup (?)
      ENCRYPTION_BUFFER ends
      _ENCRYPTION_BUFFER typedef ENCRYPTION_BUFFER
      PENCRYPTION_BUFFER typedef ptr ENCRYPTION_BUFFER
      
      FILE_SET_ENCRYPTION equ 00000001h
      FILE_CLEAR_ENCRYPTION equ 00000002h
      STREAM_SET_ENCRYPTION equ 00000003h
      STREAM_CLEAR_ENCRYPTION equ 00000004h
      MAXIMUM_ENCRYPTION_VALUE equ 00000004h
      DECRYPTION_STATUS_BUFFER struct
        NoEncryptedStreams BOOLEAN ?
      DECRYPTION_STATUS_BUFFER ends
      _DECRYPTION_STATUS_BUFFER typedef DECRYPTION_STATUS_BUFFER
      PDECRYPTION_STATUS_BUFFER typedef ptr DECRYPTION_STATUS_BUFFER
      
      ENCRYPTION_FORMAT_DEFAULT equ 01h
      REQUEST_RAW_ENCRYPTED_DATA struct
        FileOffset LONGLONG ?
        Length_ DWORD ?
      REQUEST_RAW_ENCRYPTED_DATA ends
      _REQUEST_RAW_ENCRYPTED_DATA typedef REQUEST_RAW_ENCRYPTED_DATA
      PREQUEST_RAW_ENCRYPTED_DATA typedef ptr REQUEST_RAW_ENCRYPTED_DATA
      
      ENCRYPTED_DATA_INFO struct
        StartingFileOffset DWORDLONG ?
        OutputBufferOffset DWORD ?
        BytesWithinFileSize DWORD ?
        BytesWithinValidDataLength DWORD ?
        CompressionFormat WORD ?
        DataUnitShift BYTE ?
        ChunkShift BYTE ?
        ClusterShift BYTE ?
        EncryptionFormat BYTE ?
        NumberOfDataBlocks WORD ?
        DataBlockSize DWORD ANYSIZE_ARRAY dup (?)
      ENCRYPTED_DATA_INFO ends
      _ENCRYPTED_DATA_INFO typedef ENCRYPTED_DATA_INFO
      PENCRYPTED_DATA_INFO typedef ptr ENCRYPTED_DATA_INFO
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      ENCRYPTED_DATA_INFO_SPARSE_FILE equ 1
      EXTENDED_ENCRYPTED_DATA_INFO struct
        ExtendedCode DWORD ?
        Length_ DWORD ?
        Flags DWORD ?
        Reserved DWORD ?
      EXTENDED_ENCRYPTED_DATA_INFO ends
      _EXTENDED_ENCRYPTED_DATA_INFO typedef EXTENDED_ENCRYPTED_DATA_INFO
      PEXTENDED_ENCRYPTED_DATA_INFO typedef ptr EXTENDED_ENCRYPTED_DATA_INFO
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      PLEX_READ_DATA_REQUEST struct
        ByteOffset LARGE_INTEGER <>
        ByteLength DWORD ?
        PlexNumber DWORD ?
      PLEX_READ_DATA_REQUEST ends
      _PLEX_READ_DATA_REQUEST typedef PLEX_READ_DATA_REQUEST
      PPLEX_READ_DATA_REQUEST typedef ptr PLEX_READ_DATA_REQUEST
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN2K)
      SI_COPYFILE struct
        SourceFileNameLength DWORD ?
        DestinationFileNameLength DWORD ?
        Flags DWORD ?
        FileNameBuffer WCHAR 1 dup (?)
      SI_COPYFILE ends
      _SI_COPYFILE typedef SI_COPYFILE
      PSI_COPYFILE typedef ptr SI_COPYFILE
      
      COPYFILE_SIS_LINK equ 0001h
      COPYFILE_SIS_REPLACE equ 0002h
      COPYFILE_SIS_FLAGS equ 0003h
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_VISTA)
      FILE_MAKE_COMPATIBLE_BUFFER struct
        CloseDisc BOOLEAN ?
      FILE_MAKE_COMPATIBLE_BUFFER ends
      _FILE_MAKE_COMPATIBLE_BUFFER typedef FILE_MAKE_COMPATIBLE_BUFFER
      PFILE_MAKE_COMPATIBLE_BUFFER typedef ptr FILE_MAKE_COMPATIBLE_BUFFER
      
      FILE_SET_DEFECT_MGMT_BUFFER struct
        Disable BOOLEAN ?
      FILE_SET_DEFECT_MGMT_BUFFER ends
      _FILE_SET_DEFECT_MGMT_BUFFER typedef FILE_SET_DEFECT_MGMT_BUFFER
      PFILE_SET_DEFECT_MGMT_BUFFER typedef ptr FILE_SET_DEFECT_MGMT_BUFFER
      
      FILE_QUERY_SPARING_BUFFER struct
        SparingUnitBytes DWORD ?
        SoftwareSparing BOOLEAN ?
        TotalSpareBlocks DWORD ?
        FreeSpareBlocks DWORD ?
      FILE_QUERY_SPARING_BUFFER ends
      _FILE_QUERY_SPARING_BUFFER typedef FILE_QUERY_SPARING_BUFFER
      PFILE_QUERY_SPARING_BUFFER typedef ptr FILE_QUERY_SPARING_BUFFER
      
      FILE_QUERY_ON_DISK_VOL_INFO_BUFFER struct
        DirectoryCount LARGE_INTEGER <>
        FileCount LARGE_INTEGER <>
        FsFormatMajVersion WORD ?
        FsFormatMinVersion WORD ?
        FsFormatName WCHAR 12 dup (?)
        FormatTime LARGE_INTEGER <>
        LastUpdateTime LARGE_INTEGER <>
        CopyrightInfo WCHAR 34 dup (?)
        AbstractInfo WCHAR 34 dup (?)
        FormattingImplementationInfo WCHAR 34 dup (?)
        LastModifyingImplementationInfo WCHAR 34 dup (?)
      FILE_QUERY_ON_DISK_VOL_INFO_BUFFER ends
      _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER typedef FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
      PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER typedef ptr FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
      
      SET_REPAIR_ENABLED equ 00000001h
      SET_REPAIR_WARN_ABOUT_DATA_LOSS equ 00000008h
      SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT equ 00000010h
      SET_REPAIR_VALID_MASK equ 00000019h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE equ 0000000000000001h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED equ 0000000000000002h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST equ 0000000000000004h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD equ 0000000000000008h
      FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE equ 0000000000000010h
      FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED equ 0000000000000020h
      FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR equ 0000000000000040h
      FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED equ 0000000000000080h
      FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED equ 0000000000000100h
      FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED equ 0000000000000200h
      FILE_INITIATE_REPAIR_HINT1_REPAIRED equ 0000000000000400h
      FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG equ 0000000000000800h
      FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND equ 0000000000001000h
      FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK equ 0000000000002000h
      FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION equ 0000000000004000h
      FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE equ 0000000000008000h
      FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST equ 0000000000010000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH equ 0000000000020000h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN equ 0000000000040000h
      FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD equ 0000000000080000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT equ 0000000000100000h
      FILE_INITIATE_REPAIR_HINT1_SID_VALID equ 0000000000200000h
      FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH equ 0000000000400000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT equ 0000000000800000h
      FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE equ 0000000001000000h
      FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED equ 0000000002000000h
      FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST equ 0000000004000000h
      FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD equ 0000000008000000h
      FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX equ 0000000010000000h
      FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY equ 0000000020000000h
      FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES equ 0000000040000000h
      FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE equ 0000000080000000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_LCN equ 0000000100000000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_VCN equ 0000000200000000h
      FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT equ 0000000400000000h
      FILE_INITIATE_REPAIR_HINT1_ORPHAN equ 0000000800000000h
      FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL equ 0000001000000000h
      FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT equ 0000002000000000h
      FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG equ 0000004000000000h
      FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID equ 0000008000000000h
      FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH equ 0000010000000000h
      FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME equ 0000020000000000h
      FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES equ 0000040000000000h
      CLSN typedef DWORDLONG
      FILE_INITIATE_REPAIR_OUTPUT_BUFFER struct
        Hint1 DWORDLONG ?
        Hint2 DWORDLONG ?
        Clsn CLSN ?
        Status DWORD ?
      FILE_INITIATE_REPAIR_OUTPUT_BUFFER ends
      _FILE_INITIATE_REPAIR_OUTPUT_BUFFER typedef FILE_INITIATE_REPAIR_OUTPUT_BUFFER
      PFILE_INITIATE_REPAIR_OUTPUT_BUFFER typedef ptr FILE_INITIATE_REPAIR_OUTPUT_BUFFER
      
      SHRINK_VOLUME_REQUEST_TYPES typedef SDWORD
      ShrinkPrepare equ 1
      ShrinkCommit equ 2
      ShrinkAbort equ 3
      _SHRINK_VOLUME_REQUEST_TYPES typedef SHRINK_VOLUME_REQUEST_TYPES
      PSHRINK_VOLUME_REQUEST_TYPES typedef ptr SHRINK_VOLUME_REQUEST_TYPES
      
      SHRINK_VOLUME_INFORMATION struct
        ShrinkRequestType SHRINK_VOLUME_REQUEST_TYPES ?
        Flags DWORDLONG ?
        NewNumberOfSectors LONGLONG ?
      SHRINK_VOLUME_INFORMATION ends
      _SHRINK_VOLUME_INFORMATION typedef SHRINK_VOLUME_INFORMATION
      PSHRINK_VOLUME_INFORMATION typedef ptr SHRINK_VOLUME_INFORMATION
      
      TXFS_RM_FLAG_LOGGING_MODE equ 00000001h
      TXFS_RM_FLAG_RENAME_RM equ 00000002h
      TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX equ 00000004h
      TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN equ 00000008h
      TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS equ 00000010h
      TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT equ 00000020h
      TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE equ 00000040h
      TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX equ 00000080h
      TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN equ 00000100h
      TXFS_RM_FLAG_GROW_LOG equ 00000400h
      TXFS_RM_FLAG_SHRINK_LOG equ 00000800h
      TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE equ 00001000h
      TXFS_RM_FLAG_PRESERVE_CHANGES equ 00002000h
      TXFS_RM_FLAG_RESET_RM_AT_NEXT_START equ 00004000h
      TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START equ 00008000h
      TXFS_RM_FLAG_PREFER_CONSISTENCY equ 00010000h
      TXFS_RM_FLAG_PREFER_AVAILABILITY equ 00020000h
      TXFS_LOGGING_MODE_SIMPLE equ 0001h
      TXFS_LOGGING_MODE_FULL equ 0002h
      TXFS_TRANSACTION_STATE_NONE equ 00h
      TXFS_TRANSACTION_STATE_ACTIVE equ 01h
      TXFS_TRANSACTION_STATE_PREPARED equ 02h
      TXFS_TRANSACTION_STATE_NOTACTIVE equ 03h
      TXFS_MODIFY_RM_VALID_FLAGS equ <>
      ;(TXFS_RM_FLAG_LOGGING_MODE or TXFS_RM_FLAG_RENAME_RM or TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX or TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN or 
      ;TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS or TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT or TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE or 
      ;TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX or TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN or TXFS_RM_FLAG_SHRINK_LOG or TXFS_RM_FLAG_GROW_LOG or 
      ;TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE or TXFS_RM_FLAG_PRESERVE_CHANGES or TXFS_RM_FLAG_RESET_RM_AT_NEXT_START or 
      ;TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START or TXFS_RM_FLAG_PREFER_CONSISTENCY or TXFS_RM_FLAG_PREFER_AVAILABILITY)
      TXFS_MODIFY_RM struct
        Flags DWORD ?
        LogContainerCountMax DWORD ?
        LogContainerCountMin DWORD ?
        LogContainerCount DWORD ?
        LogGrowthIncrement DWORD ?
        LogAutoShrinkPercentage DWORD ?
        Reserved DWORDLONG ?
        LoggingMode WORD ?
      TXFS_MODIFY_RM ends
      _TXFS_MODIFY_RM typedef TXFS_MODIFY_RM
      PTXFS_MODIFY_RM typedef ptr TXFS_MODIFY_RM
      
      TXFS_RM_STATE_NOT_STARTED equ 0
      TXFS_RM_STATE_STARTING equ 1
      TXFS_RM_STATE_ACTIVE equ 2
      TXFS_RM_STATE_SHUTTING_DOWN equ 3
      TXFS_QUERY_RM_INFORMATION_VALID_FLAGS equ <>
      ;(TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS or TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT or TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX or 
      ;TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN or TXFS_RM_FLAG_RESET_RM_AT_NEXT_START or TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START or 
      ;TXFS_RM_FLAG_PREFER_CONSISTENCY or TXFS_RM_FLAG_PREFER_AVAILABILITY)
      TXFS_QUERY_RM_INFORMATION struct
        BytesRequired DWORD ?
        TailLsn DWORDLONG ?
        CurrentLsn DWORDLONG ?
        ArchiveTailLsn DWORDLONG ?
        LogContainerSize DWORDLONG ?
        HighestVirtualClock LARGE_INTEGER <>
        LogContainerCount DWORD ?
        LogContainerCountMax DWORD ?
        LogContainerCountMin DWORD ?
        LogGrowthIncrement DWORD ?
        LogAutoShrinkPercentage DWORD ?
        Flags DWORD ?
        LoggingMode WORD ?
        Reserved WORD ?
        RmState DWORD ?
        LogCapacity DWORDLONG ?
        LogFree DWORDLONG ?
        TopsSize DWORDLONG ?
        TopsUsed DWORDLONG ?
        TransactionCount DWORDLONG ?
        OnePCCount DWORDLONG ?
        TwoPCCount DWORDLONG ?
        NumberLogFileFull DWORDLONG ?
        OldestTransactionAge DWORDLONG ?
        RMName GUID <>
        TmLogPathOffset DWORD ?
      TXFS_QUERY_RM_INFORMATION ends
      _TXFS_QUERY_RM_INFORMATION typedef TXFS_QUERY_RM_INFORMATION
      PTXFS_QUERY_RM_INFORMATION typedef ptr TXFS_QUERY_RM_INFORMATION
      
      TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN equ 01h
      TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK equ 02h
      TXFS_ROLLFORWARD_REDO_VALID_FLAGS equ <(TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN or TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK)>
      TXFS_ROLLFORWARD_REDO_INFORMATION struct
        LastVirtualClock LARGE_INTEGER <>
        LastRedoLsn DWORDLONG ?
        HighestRecoveryLsn DWORDLONG ?
        Flags DWORD ?
      TXFS_ROLLFORWARD_REDO_INFORMATION ends
      _TXFS_ROLLFORWARD_REDO_INFORMATION typedef TXFS_ROLLFORWARD_REDO_INFORMATION
      PTXFS_ROLLFORWARD_REDO_INFORMATION typedef ptr TXFS_ROLLFORWARD_REDO_INFORMATION
      
      ifdef DEPRECATE_SUPPORTED
        ifndef USE_TXF_DEPRECATED_FUNCTIONALITY
        endif
      endif
      TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX equ 00000001h
      TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN equ 00000002h
      TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE equ 00000004h
      TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS equ 00000008h
      TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT equ 00000010h
      TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE equ 00000020h
      TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX equ 00000040h
      TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN equ 00000080h
      TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT equ 00000200h
      TXFS_START_RM_FLAG_LOGGING_MODE equ 00000400h
      TXFS_START_RM_FLAG_PRESERVE_CHANGES equ 00000800h
      TXFS_START_RM_FLAG_PREFER_CONSISTENCY equ 00001000h
      TXFS_START_RM_FLAG_PREFER_AVAILABILITY equ 00002000h
      TXFS_START_RM_VALID_FLAGS equ <>
      ;(TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX or TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN or TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE or 
      ;TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS or TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT or 
      ;TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE or TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT or 
      ;TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX or TXFS_START_RM_FLAG_LOGGING_MODE or TXFS_START_RM_FLAG_PRESERVE_CHANGES or 
      ;TXFS_START_RM_FLAG_PREFER_CONSISTENCY or TXFS_START_RM_FLAG_PREFER_AVAILABILITY)
      TXFS_START_RM_INFORMATION struct
        Flags DWORD ?
        LogContainerSize DWORDLONG ?
        LogContainerCountMin DWORD ?
        LogContainerCountMax DWORD ?
        LogGrowthIncrement DWORD ?
        LogAutoShrinkPercentage DWORD ?
        TmLogPathOffset DWORD ?
        TmLogPathLength WORD ?
        LoggingMode WORD ?
        LogPathLength WORD ?
        Reserved WORD ?
        LogPath WCHAR 1 dup (?)
      TXFS_START_RM_INFORMATION ends
      _TXFS_START_RM_INFORMATION typedef TXFS_START_RM_INFORMATION
      PTXFS_START_RM_INFORMATION typedef ptr TXFS_START_RM_INFORMATION
      
      ifdef DEPRECATE_SUPPORTED
        ifndef USE_TXF_DEPRECATED_FUNCTIONALITY
        endif
      endif
      TXFS_GET_METADATA_INFO_OUT struct
        struct TxfFileId
          LowPart LONGLONG ?
          HighPart LONGLONG ?
        ends
        LockingTransaction GUID <>
        LastLsn DWORDLONG ?
        TransactionState DWORD ?
      TXFS_GET_METADATA_INFO_OUT ends
      _TXFS_GET_METADATA_INFO_OUT typedef TXFS_GET_METADATA_INFO_OUT
      PTXFS_GET_METADATA_INFO_OUT typedef ptr TXFS_GET_METADATA_INFO_OUT
      
      TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED equ 00000001h
      TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED equ 00000002h
      TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY struct
        Offset_ DWORDLONG ?
        NameFlags DWORD ?
        FileId LONGLONG ?
        Reserved1 DWORD ?
        Reserved2 DWORD ?
        Reserved3 LONGLONG ?
        FileName WCHAR 1 dup (?)
      TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY ends
      _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY typedef TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
      PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY typedef ptr TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
      
      TXFS_LIST_TRANSACTION_LOCKED_FILES struct
        KtmTransaction GUID <>
        NumberOfFiles DWORDLONG ?
        BufferSizeRequired DWORDLONG ?
        Offset_ DWORDLONG ?
      TXFS_LIST_TRANSACTION_LOCKED_FILES ends
      _TXFS_LIST_TRANSACTION_LOCKED_FILES typedef TXFS_LIST_TRANSACTION_LOCKED_FILES
      PTXFS_LIST_TRANSACTION_LOCKED_FILES typedef ptr TXFS_LIST_TRANSACTION_LOCKED_FILES
      
      TXFS_LIST_TRANSACTIONS_ENTRY struct
        TransactionId GUID <>
        TransactionState DWORD ?
        Reserved1 DWORD ?
        Reserved2 DWORD ?
        Reserved3 LONGLONG ?
      TXFS_LIST_TRANSACTIONS_ENTRY ends
      _TXFS_LIST_TRANSACTIONS_ENTRY typedef TXFS_LIST_TRANSACTIONS_ENTRY
      PTXFS_LIST_TRANSACTIONS_ENTRY typedef ptr TXFS_LIST_TRANSACTIONS_ENTRY
      
      TXFS_LIST_TRANSACTIONS struct
        NumberOfTransactions DWORDLONG ?
        BufferSizeRequired DWORDLONG ?
      TXFS_LIST_TRANSACTIONS ends
      _TXFS_LIST_TRANSACTIONS typedef TXFS_LIST_TRANSACTIONS
      PTXFS_LIST_TRANSACTIONS typedef ptr TXFS_LIST_TRANSACTIONS
      
      if _MSC_VER ge 1200
      endif
      TXFS_READ_BACKUP_INFORMATION_OUT struct
        union
          BufferLength DWORD ?
          Buffer BYTE 1 dup (?)
        ends
      TXFS_READ_BACKUP_INFORMATION_OUT ends
      _TXFS_READ_BACKUP_INFORMATION_OUT typedef TXFS_READ_BACKUP_INFORMATION_OUT
      PTXFS_READ_BACKUP_INFORMATION_OUT typedef ptr TXFS_READ_BACKUP_INFORMATION_OUT
      
      if _MSC_VER ge 1200
      else
      endif
      TXFS_WRITE_BACKUP_INFORMATION struct
        Buffer BYTE 1 dup (?)
      TXFS_WRITE_BACKUP_INFORMATION ends
      _TXFS_WRITE_BACKUP_INFORMATION typedef TXFS_WRITE_BACKUP_INFORMATION
      PTXFS_WRITE_BACKUP_INFORMATION typedef ptr TXFS_WRITE_BACKUP_INFORMATION
      
      TXFS_TRANSACTED_VERSION_NONTRANSACTED equ 0FFFFFFFEh
      TXFS_TRANSACTED_VERSION_UNCOMMITTED equ 0FFFFFFFFh
      TXFS_GET_TRANSACTED_VERSION struct
        ThisBaseVersion DWORD ?
        LatestVersion DWORD ?
        ThisMiniVersion WORD ?
        FirstMiniVersion WORD ?
        LatestMiniVersion WORD ?
      TXFS_GET_TRANSACTED_VERSION ends
      _TXFS_GET_TRANSACTED_VERSION typedef TXFS_GET_TRANSACTED_VERSION
      PTXFS_GET_TRANSACTED_VERSION typedef ptr TXFS_GET_TRANSACTED_VERSION
      
      TXFS_SAVEPOINT_SET equ 00000001h
      TXFS_SAVEPOINT_ROLLBACK equ 00000002h
      TXFS_SAVEPOINT_CLEAR equ 00000004h
      TXFS_SAVEPOINT_CLEAR_ALL equ 00000010h
      TXFS_SAVEPOINT_INFORMATION struct
        KtmTransaction HANDLE ?
        ActionCode DWORD ?
        SavepointId DWORD ?
      TXFS_SAVEPOINT_INFORMATION ends
      _TXFS_SAVEPOINT_INFORMATION typedef TXFS_SAVEPOINT_INFORMATION
      PTXFS_SAVEPOINT_INFORMATION typedef ptr TXFS_SAVEPOINT_INFORMATION
      
      ifdef DEPRECATE_SUPPORTED
        ifndef USE_TXF_DEPRECATED_FUNCTIONALITY
        endif
      endif
      TXFS_CREATE_MINIVERSION_INFO struct
        StructureVersion WORD ?
        StructureLength WORD ?
        BaseVersion DWORD ?
        MiniVersion WORD ?
      TXFS_CREATE_MINIVERSION_INFO ends
      _TXFS_CREATE_MINIVERSION_INFO typedef TXFS_CREATE_MINIVERSION_INFO
      PTXFS_CREATE_MINIVERSION_INFO typedef ptr TXFS_CREATE_MINIVERSION_INFO
      
      ifdef DEPRECATE_SUPPORTED
        ifndef USE_TXF_DEPRECATED_FUNCTIONALITY
        endif
      endif
      TXFS_TRANSACTION_ACTIVE_INFO struct
        TransactionsActiveAtSnapshot BOOLEAN ?
      TXFS_TRANSACTION_ACTIVE_INFO ends
      _TXFS_TRANSACTION_ACTIVE_INFO typedef TXFS_TRANSACTION_ACTIVE_INFO
      PTXFS_TRANSACTION_ACTIVE_INFO typedef ptr TXFS_TRANSACTION_ACTIVE_INFO
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      BOOT_AREA_INFO struct
        BootSectorCount DWORD ?
        struct BootSectors
          Offset_ LARGE_INTEGER <>
        ends
      BOOT_AREA_INFO ends
      _BOOT_AREA_INFO typedef BOOT_AREA_INFO
      PBOOT_AREA_INFO typedef ptr BOOT_AREA_INFO
      
      RETRIEVAL_POINTER_BASE struct
        FileAreaOffset LARGE_INTEGER <>
      RETRIEVAL_POINTER_BASE ends
      _RETRIEVAL_POINTER_BASE typedef RETRIEVAL_POINTER_BASE
      PRETRIEVAL_POINTER_BASE typedef ptr RETRIEVAL_POINTER_BASE
      
      FILE_FS_PERSISTENT_VOLUME_INFORMATION struct
        VolumeFlags DWORD ?
        FlagMask DWORD ?
        Version DWORD ?
        Reserved DWORD ?
      FILE_FS_PERSISTENT_VOLUME_INFORMATION ends
      _FILE_FS_PERSISTENT_VOLUME_INFORMATION typedef FILE_FS_PERSISTENT_VOLUME_INFORMATION
      PFILE_FS_PERSISTENT_VOLUME_INFORMATION typedef ptr FILE_FS_PERSISTENT_VOLUME_INFORMATION
      
      PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED equ 00000001h
      if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
        PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED equ 00000002h
      endif
      if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
        PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY equ 00000004h
        PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY equ 00000008h
        PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING equ 00000010h
      endif
      if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
        PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM equ 00000020h
        PERSISTENT_VOLUME_STATE_BACKED_BY_WIM equ 00000040h
      endif
      if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
        PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING equ 00000080h
      endif
      if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
        PERSISTENT_VOLUME_STATE_TXF_DISABLED equ 00000100h
      endif
      FILE_SYSTEM_RECOGNITION_INFORMATION struct
        FileSystem CHAR 9 dup (?)
      FILE_SYSTEM_RECOGNITION_INFORMATION ends
      _FILE_SYSTEM_RECOGNITION_INFORMATION typedef FILE_SYSTEM_RECOGNITION_INFORMATION
      PFILE_SYSTEM_RECOGNITION_INFORMATION typedef ptr FILE_SYSTEM_RECOGNITION_INFORMATION
      
      OPLOCK_LEVEL_CACHE_READ equ 00000001h
      OPLOCK_LEVEL_CACHE_HANDLE equ 00000002h
      OPLOCK_LEVEL_CACHE_WRITE equ 00000004h
      REQUEST_OPLOCK_INPUT_FLAG_REQUEST equ 00000001h
      REQUEST_OPLOCK_INPUT_FLAG_ACK equ 00000002h
      REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE equ 00000004h
      REQUEST_OPLOCK_CURRENT_VERSION equ 1
      REQUEST_OPLOCK_INPUT_BUFFER struct
        StructureVersion WORD ?
        StructureLength WORD ?
        RequestedOplockLevel DWORD ?
        Flags DWORD ?
      REQUEST_OPLOCK_INPUT_BUFFER ends
      _REQUEST_OPLOCK_INPUT_BUFFER typedef REQUEST_OPLOCK_INPUT_BUFFER
      PREQUEST_OPLOCK_INPUT_BUFFER typedef ptr REQUEST_OPLOCK_INPUT_BUFFER
      
      REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED equ 00000001h
      REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED equ 00000002h
      REQUEST_OPLOCK_OUTPUT_BUFFER struct
        StructureVersion WORD ?
        StructureLength WORD ?
        OriginalOplockLevel DWORD ?
        NewOplockLevel DWORD ?
        Flags DWORD ?
        AccessMode ACCESS_MASK ?
        ShareMode WORD ?
      REQUEST_OPLOCK_OUTPUT_BUFFER ends
      _REQUEST_OPLOCK_OUTPUT_BUFFER typedef REQUEST_OPLOCK_OUTPUT_BUFFER
      PREQUEST_OPLOCK_OUTPUT_BUFFER typedef ptr REQUEST_OPLOCK_OUTPUT_BUFFER
      
      ifndef _VIRTUAL_STORAGE_TYPE_DEFINED
        _VIRTUAL_STORAGE_TYPE_DEFINED equ <>
        VIRTUAL_STORAGE_TYPE struct
          DeviceId DWORD ?
          VendorId GUID <>
        VIRTUAL_STORAGE_TYPE ends
        _VIRTUAL_STORAGE_TYPE typedef VIRTUAL_STORAGE_TYPE
        PVIRTUAL_STORAGE_TYPE typedef ptr VIRTUAL_STORAGE_TYPE
        
      endif
      STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST struct
        RequestLevel DWORD ?
        RequestFlags DWORD ?
      STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST ends
      _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST typedef STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
      PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST typedef ptr STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
      
      QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES equ 1h
      QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES equ 2h
      STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY struct
        EntryLength DWORD ?
        DependencyTypeFlags DWORD ?
        ProviderSpecificFlags DWORD ?
        VirtualStorageType VIRTUAL_STORAGE_TYPE <>
      STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY ends
      _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY typedef STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
      PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY typedef ptr STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
      
      STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY struct
        EntryLength DWORD ?
        DependencyTypeFlags DWORD ?
        ProviderSpecificFlags DWORD ?
        VirtualStorageType VIRTUAL_STORAGE_TYPE <>
        AncestorLevel DWORD ?
        HostVolumeNameOffset DWORD ?
        HostVolumeNameSize DWORD ?
        DependentVolumeNameOffset DWORD ?
        DependentVolumeNameSize DWORD ?
        RelativePathOffset DWORD ?
        RelativePathSize DWORD ?
        DependentDeviceNameOffset DWORD ?
        DependentDeviceNameSize DWORD ?
      STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY ends
      _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY typedef STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
      PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY typedef ptr STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
      
      ifdef _MSC_EXTENSIONS
        if _MSC_VER ge 1200
        endif
        STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE struct
          ResponseLevel DWORD ?
          NumberEntries DWORD ?
          union
            Lev1Depends STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY 0 dup (<>)
            Lev2Depends STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY 0 dup (<>)
          ends
        STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE ends
        _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE typedef STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
        PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE typedef ptr STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
        
        if _MSC_VER ge 1200
        endif
      endif
      SD_GLOBAL_CHANGE_TYPE_MACHINE_SID equ 1
      SD_GLOBAL_CHANGE_TYPE_QUERY_STATS equ (1 shl 16)
      SD_GLOBAL_CHANGE_TYPE_ENUM_SDS equ (2 shl 16)
      SD_CHANGE_MACHINE_SID_INPUT struct
        CurrentMachineSIDOffset WORD ?
        CurrentMachineSIDLength WORD ?
        NewMachineSIDOffset WORD ?
        NewMachineSIDLength WORD ?
      SD_CHANGE_MACHINE_SID_INPUT ends
      _SD_CHANGE_MACHINE_SID_INPUT typedef SD_CHANGE_MACHINE_SID_INPUT
      PSD_CHANGE_MACHINE_SID_INPUT typedef ptr SD_CHANGE_MACHINE_SID_INPUT
      
      SD_CHANGE_MACHINE_SID_OUTPUT struct
        NumSDChangedSuccess DWORDLONG ?
        NumSDChangedFail DWORDLONG ?
        NumSDUnused DWORDLONG ?
        NumSDTotal DWORDLONG ?
        NumMftSDChangedSuccess DWORDLONG ?
        NumMftSDChangedFail DWORDLONG ?
        NumMftSDTotal DWORDLONG ?
      SD_CHANGE_MACHINE_SID_OUTPUT ends
      _SD_CHANGE_MACHINE_SID_OUTPUT typedef SD_CHANGE_MACHINE_SID_OUTPUT
      PSD_CHANGE_MACHINE_SID_OUTPUT typedef ptr SD_CHANGE_MACHINE_SID_OUTPUT
      
      SD_QUERY_STATS_INPUT struct
        Reserved DWORD ?
      SD_QUERY_STATS_INPUT ends
      _SD_QUERY_STATS_INPUT typedef SD_QUERY_STATS_INPUT
      PSD_QUERY_STATS_INPUT typedef ptr SD_QUERY_STATS_INPUT
      
      SD_QUERY_STATS_OUTPUT struct
        SdsStreamSize DWORDLONG ?
        SdsAllocationSize DWORDLONG ?
        SiiStreamSize DWORDLONG ?
        SiiAllocationSize DWORDLONG ?
        SdhStreamSize DWORDLONG ?
        SdhAllocationSize DWORDLONG ?
        NumSDTotal DWORDLONG ?
        NumSDUnused DWORDLONG ?
      SD_QUERY_STATS_OUTPUT ends
      _SD_QUERY_STATS_OUTPUT typedef SD_QUERY_STATS_OUTPUT
      PSD_QUERY_STATS_OUTPUT typedef ptr SD_QUERY_STATS_OUTPUT
      
      SD_ENUM_SDS_INPUT struct
        StartingOffset DWORDLONG ?
        MaxSDEntriesToReturn DWORDLONG ?
      SD_ENUM_SDS_INPUT ends
      _SD_ENUM_SDS_INPUT typedef SD_ENUM_SDS_INPUT
      PSD_ENUM_SDS_INPUT typedef ptr SD_ENUM_SDS_INPUT
      
      SD_ENUM_SDS_ENTRY struct
        Hash DWORD ?
        SecurityId DWORD ?
        Offset_ DWORDLONG ?
        Length_ DWORD ?
        Descriptor BYTE 1 dup (?)
      SD_ENUM_SDS_ENTRY ends
      _SD_ENUM_SDS_ENTRY typedef SD_ENUM_SDS_ENTRY
      PSD_ENUM_SDS_ENTRY typedef ptr SD_ENUM_SDS_ENTRY
      
      SD_ENUM_SDS_OUTPUT struct
        NextOffset DWORDLONG ?
        NumSDEntriesReturned DWORDLONG ?
        NumSDBytesReturned DWORDLONG ?
        SDEntry SD_ENUM_SDS_ENTRY 1 dup (<>)
      SD_ENUM_SDS_OUTPUT ends
      _SD_ENUM_SDS_OUTPUT typedef SD_ENUM_SDS_OUTPUT
      PSD_ENUM_SDS_OUTPUT typedef ptr SD_ENUM_SDS_OUTPUT
      
      if _MSC_VER ge 1200
      endif
      SD_GLOBAL_CHANGE_INPUT struct
        Flags DWORD ?
        ChangeType DWORD ?
        union
          SdChange SD_CHANGE_MACHINE_SID_INPUT <>
          SdQueryStats SD_QUERY_STATS_INPUT <>
          SdEnumSds SD_ENUM_SDS_INPUT <>
        ends
      SD_GLOBAL_CHANGE_INPUT ends
      _SD_GLOBAL_CHANGE_INPUT typedef SD_GLOBAL_CHANGE_INPUT
      PSD_GLOBAL_CHANGE_INPUT typedef ptr SD_GLOBAL_CHANGE_INPUT
      
      SD_GLOBAL_CHANGE_OUTPUT struct
        Flags DWORD ?
        ChangeType DWORD ?
        union
          SdChange SD_CHANGE_MACHINE_SID_OUTPUT <>
          SdQueryStats SD_QUERY_STATS_OUTPUT <>
          SdEnumSds SD_ENUM_SDS_OUTPUT <>
        ends
      SD_GLOBAL_CHANGE_OUTPUT ends
      _SD_GLOBAL_CHANGE_OUTPUT typedef SD_GLOBAL_CHANGE_OUTPUT
      PSD_GLOBAL_CHANGE_OUTPUT typedef ptr SD_GLOBAL_CHANGE_OUTPUT
      
      if _MSC_VER ge 1200
      else
      endif
      LOOKUP_STREAM_FROM_CLUSTER_INPUT struct
        Flags DWORD ?
        NumberOfClusters DWORD ?
        Cluster LARGE_INTEGER 1 dup (<>)
      LOOKUP_STREAM_FROM_CLUSTER_INPUT ends
      _LOOKUP_STREAM_FROM_CLUSTER_INPUT typedef LOOKUP_STREAM_FROM_CLUSTER_INPUT
      PLOOKUP_STREAM_FROM_CLUSTER_INPUT typedef ptr LOOKUP_STREAM_FROM_CLUSTER_INPUT
      
      LOOKUP_STREAM_FROM_CLUSTER_OUTPUT struct
        Offset_ DWORD ?
        NumberOfMatches DWORD ?
        BufferSizeRequired DWORD ?
      LOOKUP_STREAM_FROM_CLUSTER_OUTPUT ends
      _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT typedef LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
      PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT typedef ptr LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
      
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE equ 00000001h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET equ 00000002h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE equ 00000004h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE equ 00000008h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK equ 0ff000000h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA equ 01000000h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX equ 02000000h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM equ 03000000h
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY struct
        OffsetToNext DWORD ?
        Flags DWORD ?
        Reserved LARGE_INTEGER <>
        Cluster LARGE_INTEGER <>
        FileName WCHAR 1 dup (?)
      LOOKUP_STREAM_FROM_CLUSTER_ENTRY ends
      _LOOKUP_STREAM_FROM_CLUSTER_ENTRY typedef LOOKUP_STREAM_FROM_CLUSTER_ENTRY
      PLOOKUP_STREAM_FROM_CLUSTER_ENTRY typedef ptr LOOKUP_STREAM_FROM_CLUSTER_ENTRY
      
      FILE_TYPE_NOTIFICATION_INPUT struct
        Flags DWORD ?
        NumFileTypeIDs DWORD ?
        FileTypeID GUID 1 dup (<>)
      FILE_TYPE_NOTIFICATION_INPUT ends
      _FILE_TYPE_NOTIFICATION_INPUT typedef FILE_TYPE_NOTIFICATION_INPUT
      PFILE_TYPE_NOTIFICATION_INPUT typedef ptr FILE_TYPE_NOTIFICATION_INPUT
      
      FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN equ 00000001h
      FILE_TYPE_NOTIFICATION_FLAG_USAGE_END equ 00000002h
      DEFINE_GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE, 0d0a64a1h, 38fch, 4db8h, 9fh, 0e7h, 3fh, 43h, 52h, 0cdh, 7ch, 5ch
      DEFINE_GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE, 0b7624d64h, 0b9a3h, 4cf8h, 80h, 11h, 5bh, 86h, 0c9h, 40h, 0e7h, 0b7h
      DEFINE_GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE, 9d453eb7h, 0d2a6h, 4dbdh, 0a2h, 0e3h, 0fbh, 0d0h, 0edh, 91h, 09h, 0a9h
      CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED equ 00000001h
      CSV_MGMT_LOCK struct
        Flags DWORD ?
      CSV_MGMT_LOCK ends
      _CSV_MGMT_LOCK typedef CSV_MGMT_LOCK
      PCSV_MGMT_LOCK typedef ptr CSV_MGMT_LOCK
      
      CSV_NAMESPACE_INFO struct
        Version DWORD ?
        DeviceNumber DWORD ?
        StartingOffset LARGE_INTEGER <>
        SectorSize DWORD ?
      CSV_NAMESPACE_INFO ends
      _CSV_NAMESPACE_INFO typedef CSV_NAMESPACE_INFO
      PCSV_NAMESPACE_INFO typedef ptr CSV_NAMESPACE_INFO
      
      CSV_NAMESPACE_INFO_V1 equ <(sizeof(CSV_NAMESPACE_INFO))>
      CSV_INVALID_DEVICE_NUMBER equ 0FFFFFFFFh
      CSV_CONTROL_OP typedef SDWORD
      CsvControlStartRedirectFile equ 02h
      CsvControlStopRedirectFile equ 03h
      CsvControlQueryRedirectState equ 04h
      CsvControlQueryFileRevision equ 06h
      CsvControlQueryMdsPath equ 08h
      CsvControlQueryFileRevisionFileId128 equ 09h
      CsvControlQueryVolumeRedirectState equ 0ah
      CsvControlEnableUSNRangeModificationTracking equ 0dh
      CsvControlMarkHandleLocalVolumeMount equ 0eh
      CsvControlUnmarkHandleLocalVolumeMount equ 0fh
      CsvControlGetCsvFsMdsPathV2 equ 12h
      CsvControlDisableCaching equ 13h
      CsvControlEnableCaching equ 14h
      _CSV_CONTROL_OP typedef CSV_CONTROL_OP
      PCSV_CONTROL_OP typedef ptr CSV_CONTROL_OP
      
      CSV_CONTROL_PARAM struct
        Operation CSV_CONTROL_OP ?
        Unused LONGLONG ?
      CSV_CONTROL_PARAM ends
      _CSV_CONTROL_PARAM typedef CSV_CONTROL_PARAM
      PCSV_CONTROL_PARAM typedef ptr CSV_CONTROL_PARAM
      
      CSV_QUERY_REDIRECT_STATE struct
        MdsNodeId DWORD ?
        DsNodeId DWORD ?
        FileRedirected BOOLEAN ?
      CSV_QUERY_REDIRECT_STATE ends
      _CSV_QUERY_REDIRECT_STATE typedef CSV_QUERY_REDIRECT_STATE
      PCSV_QUERY_REDIRECT_STATE typedef ptr CSV_QUERY_REDIRECT_STATE
      
      CSV_QUERY_FILE_REVISION struct
        FileId LONGLONG ?
        FileRevision LONGLONG 3 dup (?)
      CSV_QUERY_FILE_REVISION ends
      _CSV_QUERY_FILE_REVISION typedef CSV_QUERY_FILE_REVISION
      PCSV_QUERY_FILE_REVISION typedef ptr CSV_QUERY_FILE_REVISION
      
      CSV_QUERY_FILE_REVISION_FILE_ID_128 struct
        FileId FILE_ID_128 <>
        FileRevision LONGLONG 3 dup (?)
      CSV_QUERY_FILE_REVISION_FILE_ID_128 ends
      _CSV_QUERY_FILE_REVISION_FILE_ID_128 typedef CSV_QUERY_FILE_REVISION_FILE_ID_128
      PCSV_QUERY_FILE_REVISION_FILE_ID_128 typedef ptr CSV_QUERY_FILE_REVISION_FILE_ID_128
      
      CSV_QUERY_MDS_PATH struct
        MdsNodeId DWORD ?
        DsNodeId DWORD ?
        PathLength DWORD ?
        Path WCHAR 1 dup (?)
      CSV_QUERY_MDS_PATH ends
      _CSV_QUERY_MDS_PATH typedef CSV_QUERY_MDS_PATH
      PCSV_QUERY_MDS_PATH typedef ptr CSV_QUERY_MDS_PATH
      
      CSVFS_DISK_CONNECTIVITY typedef SDWORD
      CsvFsDiskConnectivityNone equ 0
      CsvFsDiskConnectivityMdsNodeOnly equ 1
      CsvFsDiskConnectivitySubsetOfNodes equ 2
      CsvFsDiskConnectivityAllNodes equ 3
      _CSVFS_DISK_CONNECTIVITY typedef CSVFS_DISK_CONNECTIVITY
      PCSVFS_DISK_CONNECTIVITY typedef ptr CSVFS_DISK_CONNECTIVITY
      
      CSV_QUERY_VOLUME_REDIRECT_STATE struct
        MdsNodeId DWORD ?
        DsNodeId DWORD ?
        IsDiskConnected BOOLEAN ?
        ClusterEnableDirectIo BOOLEAN ?
        DiskConnectivity CSVFS_DISK_CONNECTIVITY ?
      CSV_QUERY_VOLUME_REDIRECT_STATE ends
      _CSV_QUERY_VOLUME_REDIRECT_STATE typedef CSV_QUERY_VOLUME_REDIRECT_STATE
      PCSV_QUERY_VOLUME_REDIRECT_STATE typedef ptr CSV_QUERY_VOLUME_REDIRECT_STATE
      
      CSV_QUERY_MDS_PATH_V2_VERSION_1 equ 1
      CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED equ 1h
      CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED equ 2h
      CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED equ 4h
      CSV_QUERY_MDS_PATH_V2 struct
        Version LONGLONG ?
        RequiredSize DWORD ?
        MdsNodeId DWORD ?
        DsNodeId DWORD ?
        Flags DWORD ?
        DiskConnectivity CSVFS_DISK_CONNECTIVITY ?
        VolumeId GUID <>
        IpAddressOffset DWORD ?
        IpAddressLength DWORD ?
        PathOffset DWORD ?
        PathLength DWORD ?
      CSV_QUERY_MDS_PATH_V2 ends
      _CSV_QUERY_MDS_PATH_V2 typedef CSV_QUERY_MDS_PATH_V2
      PCSV_QUERY_MDS_PATH_V2 typedef ptr CSV_QUERY_MDS_PATH_V2
      
      CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT struct
        VetoedFromAltitudeIntegral DWORDLONG ?
        VetoedFromAltitudeDecimal DWORDLONG ?
        Reason WCHAR 256 dup (?)
      CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT ends
      _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT typedef CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
      PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT typedef ptr CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      CSV_IS_OWNED_BY_CSVFS struct
        OwnedByCSVFS BOOLEAN ?
      CSV_IS_OWNED_BY_CSVFS ends
      _CSV_IS_OWNED_BY_CSVFS typedef CSV_IS_OWNED_BY_CSVFS
      PCSV_IS_OWNED_BY_CSVFS typedef ptr CSV_IS_OWNED_BY_CSVFS
      
      FILE_LEVEL_TRIM_RANGE struct
        Offset_ DWORDLONG ?
        Length_ DWORDLONG ?
      FILE_LEVEL_TRIM_RANGE ends
      _FILE_LEVEL_TRIM_RANGE typedef FILE_LEVEL_TRIM_RANGE
      PFILE_LEVEL_TRIM_RANGE typedef ptr FILE_LEVEL_TRIM_RANGE
      
      FILE_LEVEL_TRIM struct
        Key DWORD ?
        NumRanges DWORD ?
        Ranges FILE_LEVEL_TRIM_RANGE 1 dup (<>)
      FILE_LEVEL_TRIM ends
      _FILE_LEVEL_TRIM typedef FILE_LEVEL_TRIM
      PFILE_LEVEL_TRIM typedef ptr FILE_LEVEL_TRIM
      
      FILE_LEVEL_TRIM_OUTPUT struct
        NumRangesProcessed DWORD ?
      FILE_LEVEL_TRIM_OUTPUT ends
      _FILE_LEVEL_TRIM_OUTPUT typedef FILE_LEVEL_TRIM_OUTPUT
      PFILE_LEVEL_TRIM_OUTPUT typedef ptr FILE_LEVEL_TRIM_OUTPUT
      
      QUERY_FILE_LAYOUT_RESTART equ 00000001h
      QUERY_FILE_LAYOUT_INCLUDE_NAMES equ 00000002h
      QUERY_FILE_LAYOUT_INCLUDE_STREAMS equ 00000004h
      QUERY_FILE_LAYOUT_INCLUDE_EXTENTS equ 00000008h
      QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO equ 00000010h
      QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED equ 00000020h
      QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES equ 00000040h
      QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION equ 00000080h
      QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE equ 00000100h
      QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE equ 00000200h
      QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE equ 00000400h
      QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES equ 00000800h
      QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE equ 00001000h
      QUERY_FILE_LAYOUT_FILTER_TYPE typedef SDWORD
      QUERY_FILE_LAYOUT_FILTER_TYPE_NONE equ 0
      QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS equ 1
      QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID equ 2
      QUERY_FILE_LAYOUT_NUM_FILTER_TYPES equ 3
      _QUERY_FILE_LAYOUT_FILTER_TYPE typedef QUERY_FILE_LAYOUT_FILTER_TYPE
      
      CLUSTER_RANGE struct
        StartingCluster LARGE_INTEGER <>
        ClusterCount LARGE_INTEGER <>
      CLUSTER_RANGE ends
      _CLUSTER_RANGE typedef CLUSTER_RANGE
      PCLUSTER_RANGE typedef ptr CLUSTER_RANGE
      
      FILE_REFERENCE_RANGE struct
        StartingFileReferenceNumber DWORDLONG ?
        EndingFileReferenceNumber DWORDLONG ?
      FILE_REFERENCE_RANGE ends
      _FILE_REFERENCE_RANGE typedef FILE_REFERENCE_RANGE
      PFILE_REFERENCE_RANGE typedef ptr FILE_REFERENCE_RANGE
      
      QUERY_FILE_LAYOUT_INPUT struct
        NumberOfPairs DWORD ?
        Flags DWORD ?
        FilterType QUERY_FILE_LAYOUT_FILTER_TYPE ?
        Reserved DWORD ?
        union Filter
          ClusterRanges CLUSTER_RANGE 1 dup (<>)
          FileReferenceRanges FILE_REFERENCE_RANGE 1 dup (<>)
        ends
      QUERY_FILE_LAYOUT_INPUT ends
      _QUERY_FILE_LAYOUT_INPUT typedef QUERY_FILE_LAYOUT_INPUT
      PQUERY_FILE_LAYOUT_INPUT typedef ptr QUERY_FILE_LAYOUT_INPUT
      
      QUERY_FILE_LAYOUT_SINGLE_INSTANCED equ 00000001h
      QUERY_FILE_LAYOUT_OUTPUT struct
        FileEntryCount DWORD ?
        FirstFileOffset DWORD ?
        Flags DWORD ?
        Reserved DWORD ?
      QUERY_FILE_LAYOUT_OUTPUT ends
      _QUERY_FILE_LAYOUT_OUTPUT typedef QUERY_FILE_LAYOUT_OUTPUT
      PQUERY_FILE_LAYOUT_OUTPUT typedef ptr QUERY_FILE_LAYOUT_OUTPUT
      
      FILE_LAYOUT_ENTRY struct
        Version DWORD ?
        NextFileOffset DWORD ?
        Flags DWORD ?
        FileAttributes DWORD ?
        FileReferenceNumber DWORDLONG ?
        FirstNameOffset DWORD ?
        FirstStreamOffset DWORD ?
        ExtraInfoOffset DWORD ?
        Reserved DWORD ?
      FILE_LAYOUT_ENTRY ends
      _FILE_LAYOUT_ENTRY typedef FILE_LAYOUT_ENTRY
      PFILE_LAYOUT_ENTRY typedef ptr FILE_LAYOUT_ENTRY
      
      FILE_LAYOUT_NAME_ENTRY_PRIMARY equ 00000001h
      FILE_LAYOUT_NAME_ENTRY_DOS equ 00000002h
      FILE_LAYOUT_NAME_ENTRY struct
        NextNameOffset DWORD ?
        Flags DWORD ?
        ParentFileReferenceNumber DWORDLONG ?
        FileNameLength DWORD ?
        Reserved DWORD ?
        FileName WCHAR 1 dup (?)
      FILE_LAYOUT_NAME_ENTRY ends
      _FILE_LAYOUT_NAME_ENTRY typedef FILE_LAYOUT_NAME_ENTRY
      PFILE_LAYOUT_NAME_ENTRY typedef ptr FILE_LAYOUT_NAME_ENTRY
      
      FILE_LAYOUT_INFO_ENTRY struct
        struct BasicInformation
          CreationTime LARGE_INTEGER <>
          LastAccessTime LARGE_INTEGER <>
          LastWriteTime LARGE_INTEGER <>
          ChangeTime LARGE_INTEGER <>
          FileAttributes DWORD ?
        ends
        OwnerId DWORD ?
        SecurityId DWORD ?
        Usn USN ?
      FILE_LAYOUT_INFO_ENTRY ends
      _FILE_LAYOUT_INFO_ENTRY typedef FILE_LAYOUT_INFO_ENTRY
      PFILE_LAYOUT_INFO_ENTRY typedef ptr FILE_LAYOUT_INFO_ENTRY
      
      STREAM_LAYOUT_ENTRY_IMMOVABLE equ 00000001h
      STREAM_LAYOUT_ENTRY_PINNED equ 00000002h
      STREAM_LAYOUT_ENTRY_RESIDENT equ 00000004h
      STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED equ 00000008h
      STREAM_LAYOUT_ENTRY_HAS_INFORMATION equ 00000010h
      STREAM_LAYOUT_ENTRY struct
        Version DWORD ?
        NextStreamOffset DWORD ?
        Flags DWORD ?
        ExtentInformationOffset DWORD ?
        AllocationSize LARGE_INTEGER <>
        EndOfFile LARGE_INTEGER <>
        StreamInformationOffset DWORD ?
        AttributeTypeCode DWORD ?
        AttributeFlags DWORD ?
        StreamIdentifierLength DWORD ?
        StreamIdentifier WCHAR 1 dup (?)
      STREAM_LAYOUT_ENTRY ends
      _STREAM_LAYOUT_ENTRY typedef STREAM_LAYOUT_ENTRY
      PSTREAM_LAYOUT_ENTRY typedef ptr STREAM_LAYOUT_ENTRY
      
      STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS equ 00000001h
      STREAM_EXTENT_ENTRY_ALL_EXTENTS equ 00000002h
      STREAM_EXTENT_ENTRY struct
        Flags DWORD ?
        union ExtentInformation
          RetrievalPointers RETRIEVAL_POINTERS_BUFFER <>
        ends
      STREAM_EXTENT_ENTRY ends
      _STREAM_EXTENT_ENTRY typedef STREAM_EXTENT_ENTRY
      PSTREAM_EXTENT_ENTRY typedef ptr STREAM_EXTENT_ENTRY
      
      CHECKSUM_TYPE_UNCHANGED equ -1
      CHECKSUM_TYPE_NONE equ 0
      CHECKSUM_TYPE_CRC32 equ 1
      CHECKSUM_TYPE_CRC64 equ 2
      CHECKSUM_TYPE_ECC equ 3
      CHECKSUM_TYPE_FIRST_UNUSED_TYPE equ 4
      FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF equ 1
      FSCTL_GET_INTEGRITY_INFORMATION_BUFFER struct
        ChecksumAlgorithm WORD ?
        Reserved WORD ?
        Flags DWORD ?
        ChecksumChunkSizeInBytes DWORD ?
        ClusterSizeInBytes DWORD ?
      FSCTL_GET_INTEGRITY_INFORMATION_BUFFER ends
      _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER typedef FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
      PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER typedef ptr FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
      
      FSCTL_SET_INTEGRITY_INFORMATION_BUFFER struct
        ChecksumAlgorithm WORD ?
        Reserved WORD ?
        Flags DWORD ?
      FSCTL_SET_INTEGRITY_INFORMATION_BUFFER ends
      _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER typedef FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
      PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER typedef ptr FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
      
      if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
        FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX struct
          EnableIntegrity BYTE ?
          KeepIntegrityStateUnchanged BYTE ?
          Reserved WORD ?
          Flags DWORD ?
          Version BYTE ?
          Reserved2 BYTE 7 dup (?)
        FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX ends
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX typedef FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
        PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX typedef ptr FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
        
      endif
      FSCTL_OFFLOAD_READ_INPUT struct
        Size_ DWORD ?
        Flags DWORD ?
        TokenTimeToLive DWORD ?
        Reserved DWORD ?
        FileOffset DWORDLONG ?
        CopyLength DWORDLONG ?
      FSCTL_OFFLOAD_READ_INPUT ends
      _FSCTL_OFFLOAD_READ_INPUT typedef FSCTL_OFFLOAD_READ_INPUT
      PFSCTL_OFFLOAD_READ_INPUT typedef ptr FSCTL_OFFLOAD_READ_INPUT
      
      FSCTL_OFFLOAD_READ_OUTPUT struct
        Size_ DWORD ?
        Flags DWORD ?
        TransferLength DWORDLONG ?
        Token BYTE 512 dup (?)
      FSCTL_OFFLOAD_READ_OUTPUT ends
      _FSCTL_OFFLOAD_READ_OUTPUT typedef FSCTL_OFFLOAD_READ_OUTPUT
      PFSCTL_OFFLOAD_READ_OUTPUT typedef ptr FSCTL_OFFLOAD_READ_OUTPUT
      
      OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE equ 1
      FSCTL_OFFLOAD_WRITE_INPUT struct
        Size_ DWORD ?
        Flags DWORD ?
        FileOffset DWORDLONG ?
        CopyLength DWORDLONG ?
        TransferOffset DWORDLONG ?
        Token BYTE 512 dup (?)
      FSCTL_OFFLOAD_WRITE_INPUT ends
      _FSCTL_OFFLOAD_WRITE_INPUT typedef FSCTL_OFFLOAD_WRITE_INPUT
      PFSCTL_OFFLOAD_WRITE_INPUT typedef ptr FSCTL_OFFLOAD_WRITE_INPUT
      
      FSCTL_OFFLOAD_WRITE_OUTPUT struct
        Size_ DWORD ?
        Flags DWORD ?
        LengthWritten DWORDLONG ?
      FSCTL_OFFLOAD_WRITE_OUTPUT ends
      _FSCTL_OFFLOAD_WRITE_OUTPUT typedef FSCTL_OFFLOAD_WRITE_OUTPUT
      PFSCTL_OFFLOAD_WRITE_OUTPUT typedef ptr FSCTL_OFFLOAD_WRITE_OUTPUT
      
      SET_PURGE_FAILURE_MODE_INPUT struct
        Flags DWORD ?
      SET_PURGE_FAILURE_MODE_INPUT ends
      _SET_PURGE_FAILURE_MODE_INPUT typedef SET_PURGE_FAILURE_MODE_INPUT
      PSET_PURGE_FAILURE_MODE_INPUT typedef ptr SET_PURGE_FAILURE_MODE_INPUT
      
      SET_PURGE_FAILURE_MODE_ENABLED equ 00000001h
      SET_PURGE_FAILURE_MODE_DISABLED equ 00000002h
      REPAIR_COPIES_INPUT struct
        Size_ DWORD ?
        Flags DWORD ?
        FileOffset LARGE_INTEGER <>
        Length_ DWORD ?
        SourceCopy DWORD ?
        NumberOfRepairCopies DWORD ?
        RepairCopies DWORD ANYSIZE_ARRAY dup (?)
      REPAIR_COPIES_INPUT ends
      _REPAIR_COPIES_INPUT typedef REPAIR_COPIES_INPUT
      PREPAIR_COPIES_INPUT typedef ptr REPAIR_COPIES_INPUT
      
      REPAIR_COPIES_OUTPUT struct
        Size_ DWORD ?
        Status DWORD ?
        ResumeFileOffset LARGE_INTEGER <>
      REPAIR_COPIES_OUTPUT ends
      _REPAIR_COPIES_OUTPUT typedef REPAIR_COPIES_OUTPUT
      PREPAIR_COPIES_OUTPUT typedef ptr REPAIR_COPIES_OUTPUT
      
      FILE_REGION_USAGE_VALID_CACHED_DATA equ 00000001h
      FILE_REGION_USAGE_VALID_NONCACHED_DATA equ 00000002h
      FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT equ 00000004h
      FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT equ 00000008h
      ifdef _WIN64
        FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT equ 00000010h
        FILE_REGION_USAGE_QUERY_ALIGNMENT equ <(FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT or FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT)>
      else
        FILE_REGION_USAGE_QUERY_ALIGNMENT equ <(FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT)>
      endif
      FILE_REGION_INFO struct
        FileOffset LONGLONG ?
        Length_ LONGLONG ?
        Usage DWORD ?
        Reserved DWORD ?
      FILE_REGION_INFO ends
      _FILE_REGION_INFO typedef FILE_REGION_INFO
      PFILE_REGION_INFO typedef ptr FILE_REGION_INFO
      
      FILE_REGION_OUTPUT struct
        Flags DWORD ?
        TotalRegionEntryCount DWORD ?
        RegionEntryCount DWORD ?
        Reserved DWORD ?
        Region FILE_REGION_INFO 1 dup (<>)
      FILE_REGION_OUTPUT ends
      _FILE_REGION_OUTPUT typedef FILE_REGION_OUTPUT
      PFILE_REGION_OUTPUT typedef ptr FILE_REGION_OUTPUT
      
      FILE_REGION_INPUT struct
        FileOffset LONGLONG ?
        Length_ LONGLONG ?
        DesiredUsage DWORD ?
      FILE_REGION_INPUT ends
      _FILE_REGION_INPUT typedef FILE_REGION_INPUT
      PFILE_REGION_INPUT typedef ptr FILE_REGION_INPUT
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN8)
      VALID_WRITE_USN_REASON_MASK equ <(USN_REASON_DATA_OVERWRITE or USN_REASON_CLOSE)>
      WRITE_USN_REASON_INPUT struct
        Flags DWORD ?
        UsnReasonToWrite DWORD ?
      WRITE_USN_REASON_INPUT ends
      _WRITE_USN_REASON_INPUT typedef WRITE_USN_REASON_INPUT
      PWRITE_USN_REASON_INPUT typedef ptr WRITE_USN_REASON_INPUT
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINBLUE)
      FILE_STORAGE_TIER_NAME_LENGTH equ 256
      FILE_STORAGE_TIER_DESCRIPTION_LENGTH equ 512
      FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY equ 00020000h
      FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE equ 00200000h
      FILE_STORAGE_TIER_FLAG_READ_CACHE equ 00400000h
      FILE_STORAGE_TIER_FLAG_PARITY equ 00800000h
      FILE_STORAGE_TIER_FLAG_SMR equ 01000000h
      FILE_STORAGE_TIER_MEDIA_TYPE typedef SDWORD
      FileStorageTierMediaTypeUnspecified equ 0
      FileStorageTierMediaTypeDisk equ 1
      FileStorageTierMediaTypeSsd equ 2
      FileStorageTierMediaTypeScm equ 4
      FileStorageTierMediaTypeMax equ 5
      _FILE_STORAGE_TIER_MEDIA_TYPE typedef FILE_STORAGE_TIER_MEDIA_TYPE
      PFILE_STORAGE_TIER_MEDIA_TYPE typedef ptr FILE_STORAGE_TIER_MEDIA_TYPE
      
      FILE_STORAGE_TIER_CLASS typedef SDWORD
      FileStorageTierClassUnspecified equ 0
      FileStorageTierClassCapacity equ 1
      FileStorageTierClassPerformance equ 2
      FileStorageTierClassMax equ 3
      _FILE_STORAGE_TIER_CLASS typedef FILE_STORAGE_TIER_CLASS
      PFILE_STORAGE_TIER_CLASS typedef ptr FILE_STORAGE_TIER_CLASS
      
      FILE_STORAGE_TIER struct
        Id GUID <>
        Name_ WCHAR FILE_STORAGE_TIER_NAME_LENGTH dup (?)
        Description WCHAR FILE_STORAGE_TIER_NAME_LENGTH dup (?)
        Flags DWORDLONG ?
        ProvisionedCapacity DWORDLONG ?
        MediaType FILE_STORAGE_TIER_MEDIA_TYPE ?
        Class FILE_STORAGE_TIER_CLASS ?
      FILE_STORAGE_TIER ends
      _FILE_STORAGE_TIER typedef FILE_STORAGE_TIER
      PFILE_STORAGE_TIER typedef ptr FILE_STORAGE_TIER
      
      QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE equ 80000000h
      QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ equ 40000000h
      QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME equ 20000000h
      FSCTL_QUERY_STORAGE_CLASSES_OUTPUT struct
        Version DWORD ?
        Size_ DWORD ?
        Flags DWORD ?
        TotalNumberOfTiers DWORD ?
        NumberOfTiersReturned DWORD ?
        Tiers FILE_STORAGE_TIER ANYSIZE_ARRAY dup (<>)
      FSCTL_QUERY_STORAGE_CLASSES_OUTPUT ends
      _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT typedef FSCTL_QUERY_STORAGE_CLASSES_OUTPUT
      PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT typedef ptr FSCTL_QUERY_STORAGE_CLASSES_OUTPUT
      
      FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_VERSION equ <sizeof(FSCTL_QUERY_STORAGE_CLASSES_OUTPUT)>
      STREAM_INFORMATION_ENTRY struct
        Version DWORD ?
        Flags DWORD ?
        union StreamInformation
          struct DesiredStorageClass
            Class FILE_STORAGE_TIER_CLASS ?
            Flags DWORD ?
          ends
        ends
      STREAM_INFORMATION_ENTRY ends
      _STREAM_INFORMATION_ENTRY typedef STREAM_INFORMATION_ENTRY
      PSTREAM_INFORMATION_ENTRY typedef ptr STREAM_INFORMATION_ENTRY
      
      FSCTL_QUERY_REGION_INFO_INPUT struct
        Version DWORD ?
        Size_ DWORD ?
        Flags DWORD ?
        NumberOfTierIds DWORD ?
        TierIds GUID ANYSIZE_ARRAY dup (<>)
      FSCTL_QUERY_REGION_INFO_INPUT ends
      _FSCTL_QUERY_REGION_INFO_INPUT typedef FSCTL_QUERY_REGION_INFO_INPUT
      PFSCTL_QUERY_REGION_INFO_INPUT typedef ptr FSCTL_QUERY_REGION_INFO_INPUT
      
      FSCTL_QUERY_REGION_INFO_INPUT_VERSION equ <sizeof(FSCTL_QUERY_REGION_INFO_INPUT)>
      FILE_STORAGE_TIER_REGION struct
        TierId GUID <>
        Offset_ DWORDLONG ?
        Length_ DWORDLONG ?
      FILE_STORAGE_TIER_REGION ends
      _FILE_STORAGE_TIER_REGION typedef FILE_STORAGE_TIER_REGION
      PFILE_STORAGE_TIER_REGION typedef ptr FILE_STORAGE_TIER_REGION
      
      FSCTL_QUERY_REGION_INFO_OUTPUT struct
        Version DWORD ?
        Size_ DWORD ?
        Flags DWORD ?
        Reserved DWORD ?
        Alignment DWORDLONG ?
        TotalNumberOfRegions DWORD ?
        NumberOfRegionsReturned DWORD ?
        Regions FILE_STORAGE_TIER_REGION ANYSIZE_ARRAY dup (<>)
      FSCTL_QUERY_REGION_INFO_OUTPUT ends
      _FSCTL_QUERY_REGION_INFO_OUTPUT typedef FSCTL_QUERY_REGION_INFO_OUTPUT
      PFSCTL_QUERY_REGION_INFO_OUTPUT typedef ptr FSCTL_QUERY_REGION_INFO_OUTPUT
      
      FSCTL_QUERY_REGION_INFO_OUTPUT_VERSION equ <sizeof(FSCTL_QUERY_REGION_INFO_OUTPUT)>
      FILE_DESIRED_STORAGE_CLASS_INFORMATION struct
        Class FILE_STORAGE_TIER_CLASS ?
        Flags DWORD ?
      FILE_DESIRED_STORAGE_CLASS_INFORMATION ends
      _FILE_DESIRED_STORAGE_CLASS_INFORMATION typedef FILE_DESIRED_STORAGE_CLASS_INFORMATION
      PFILE_DESIRED_STORAGE_CLASS_INFORMATION typedef ptr FILE_DESIRED_STORAGE_CLASS_INFORMATION
      
      QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE equ 80000000h
      QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ equ 40000000h
      DUPLICATE_EXTENTS_DATA struct
        FileHandle HANDLE ?
        SourceFileOffset LARGE_INTEGER <>
        TargetFileOffset LARGE_INTEGER <>
        ByteCount LARGE_INTEGER <>
      DUPLICATE_EXTENTS_DATA ends
      _DUPLICATE_EXTENTS_DATA typedef DUPLICATE_EXTENTS_DATA
      PDUPLICATE_EXTENTS_DATA typedef ptr DUPLICATE_EXTENTS_DATA
      
      if ((_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS2) and Defined(_WIN64))
        DUPLICATE_EXTENTS_DATA32 struct
          FileHandle UINT32 ?
          SourceFileOffset LARGE_INTEGER <>
          TargetFileOffset LARGE_INTEGER <>
          ByteCount LARGE_INTEGER <>
        DUPLICATE_EXTENTS_DATA32 ends
        _DUPLICATE_EXTENTS_DATA32 typedef DUPLICATE_EXTENTS_DATA32
        PDUPLICATE_EXTENTS_DATA32 typedef ptr DUPLICATE_EXTENTS_DATA32
        
      endif
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS3)
      DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC equ 00000001h
      DUPLICATE_EXTENTS_DATA_EX struct
        Size_ SIZE_T ?
        FileHandle HANDLE ?
        SourceFileOffset LARGE_INTEGER <>
        TargetFileOffset LARGE_INTEGER <>
        ByteCount LARGE_INTEGER <>
        Flags DWORD ?
      DUPLICATE_EXTENTS_DATA_EX ends
      _DUPLICATE_EXTENTS_DATA_EX typedef DUPLICATE_EXTENTS_DATA_EX
      PDUPLICATE_EXTENTS_DATA_EX typedef ptr DUPLICATE_EXTENTS_DATA_EX
      
      if ((_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS3) and Defined(_WIN64))
        DUPLICATE_EXTENTS_DATA_EX32 struct
          Size_ DWORD32 ?
          FileHandle DWORD32 ?
          SourceFileOffset LARGE_INTEGER <>
          TargetFileOffset LARGE_INTEGER <>
          ByteCount LARGE_INTEGER <>
          Flags DWORD ?
        DUPLICATE_EXTENTS_DATA_EX32 ends
        _DUPLICATE_EXTENTS_DATA_EX32 typedef DUPLICATE_EXTENTS_DATA_EX32
        PDUPLICATE_EXTENTS_DATA_EX32 typedef ptr DUPLICATE_EXTENTS_DATA_EX32
        
      endif
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS2)
      REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1 equ 1
      REFS_SMR_VOLUME_GC_STATE typedef SDWORD
      SmrGcStateInactive equ 0
      SmrGcStatePaused equ 1
      SmrGcStateActive equ 2
      SmrGcStateActiveFullSpeed equ 3
      _REFS_SMR_VOLUME_GC_STATE typedef REFS_SMR_VOLUME_GC_STATE
      PREFS_SMR_VOLUME_GC_STATE typedef ptr REFS_SMR_VOLUME_GC_STATE
      
      REFS_SMR_VOLUME_INFO_OUTPUT struct
        Version DWORD ?
        Flags DWORD ?
        SizeOfRandomlyWritableTier LARGE_INTEGER <>
        FreeSpaceInRandomlyWritableTier LARGE_INTEGER <>
        SizeofSMRTier LARGE_INTEGER <>
        FreeSpaceInSMRTier LARGE_INTEGER <>
        UsableFreeSpaceInSMRTier LARGE_INTEGER <>
        VolumeGcState REFS_SMR_VOLUME_GC_STATE ?
        VolumeGcLastStatus DWORD ?
        Unused DWORDLONG 7 dup (?)
      REFS_SMR_VOLUME_INFO_OUTPUT ends
      _REFS_SMR_VOLUME_INFO_OUTPUT typedef REFS_SMR_VOLUME_INFO_OUTPUT
      PREFS_SMR_VOLUME_INFO_OUTPUT typedef ptr REFS_SMR_VOLUME_INFO_OUTPUT
      
      REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1 equ 1
      REFS_SMR_VOLUME_GC_ACTION typedef SDWORD
      SmrGcActionStart equ 1
      SmrGcActionStartFullSpeed equ 2
      SmrGcActionPause equ 3
      SmrGcActionStop equ 4
      _REFS_SMR_VOLUME_GC_ACTION typedef REFS_SMR_VOLUME_GC_ACTION
      PREFS_SMR_VOLUME_GC_ACTION typedef ptr REFS_SMR_VOLUME_GC_ACTION
      
      REFS_SMR_VOLUME_GC_METHOD typedef SDWORD
      SmrGcMethodCompaction equ 1
      SmrGcMethodCompression equ 2
      SmrGcMethodRotation equ 3
      _REFS_SMR_VOLUME_GC_METHOD typedef REFS_SMR_VOLUME_GC_METHOD
      PREFS_SMR_VOLUME_GC_METHOD typedef ptr REFS_SMR_VOLUME_GC_METHOD
      
      REFS_SMR_VOLUME_GC_PARAMETERS struct
        Version DWORD ?
        Flags DWORD ?
        Action REFS_SMR_VOLUME_GC_ACTION ?
        Method_ REFS_SMR_VOLUME_GC_METHOD ?
        IoGranularity DWORD ?
        CompressionFormat DWORD ?
        Unused DWORDLONG 8 dup (?)
      REFS_SMR_VOLUME_GC_PARAMETERS ends
      _REFS_SMR_VOLUME_GC_PARAMETERS typedef REFS_SMR_VOLUME_GC_PARAMETERS
      PREFS_SMR_VOLUME_GC_PARAMETERS typedef ptr REFS_SMR_VOLUME_GC_PARAMETERS
      
      STREAMS_INVALID_ID equ 0
      STREAMS_MAX_ID equ <(MAXWORD)>
      STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER struct
        OptimalWriteSize DWORD ?
        StreamGranularitySize DWORD ?
        StreamIdMin DWORD ?
        StreamIdMax DWORD ?
      STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER ends
      _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER typedef STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
      PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER typedef ptr STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
      
      STREAMS_ASSOCIATE_ID_CLEAR equ 1h
      STREAMS_ASSOCIATE_ID_SET equ 2h
      STREAMS_ASSOCIATE_ID_INPUT_BUFFER struct
        Flags DWORD ?
        StreamId DWORD ?
      STREAMS_ASSOCIATE_ID_INPUT_BUFFER ends
      _STREAMS_ASSOCIATE_ID_INPUT_BUFFER typedef STREAMS_ASSOCIATE_ID_INPUT_BUFFER
      PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER typedef ptr STREAMS_ASSOCIATE_ID_INPUT_BUFFER
      
      STREAMS_QUERY_ID_OUTPUT_BUFFER struct
        StreamId DWORD ?
      STREAMS_QUERY_ID_OUTPUT_BUFFER ends
      _STREAMS_QUERY_ID_OUTPUT_BUFFER typedef STREAMS_QUERY_ID_OUTPUT_BUFFER
      PSTREAMS_QUERY_ID_OUTPUT_BUFFER typedef ptr STREAMS_QUERY_ID_OUTPUT_BUFFER
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS3)
      QUERY_BAD_RANGES_INPUT_RANGE struct
        StartOffset DWORDLONG ?
        LengthInBytes DWORDLONG ?
      QUERY_BAD_RANGES_INPUT_RANGE ends
      _QUERY_BAD_RANGES_INPUT_RANGE typedef QUERY_BAD_RANGES_INPUT_RANGE
      PQUERY_BAD_RANGES_INPUT_RANGE typedef ptr QUERY_BAD_RANGES_INPUT_RANGE
      
      QUERY_BAD_RANGES_INPUT struct
        Flags DWORD ?
        NumRanges DWORD ?
        Ranges QUERY_BAD_RANGES_INPUT_RANGE 1 dup (<>)
      QUERY_BAD_RANGES_INPUT ends
      _QUERY_BAD_RANGES_INPUT typedef QUERY_BAD_RANGES_INPUT
      PQUERY_BAD_RANGES_INPUT typedef ptr QUERY_BAD_RANGES_INPUT
      
      QUERY_BAD_RANGES_OUTPUT_RANGE struct
        Flags DWORD ?
        Reserved DWORD ?
        StartOffset DWORDLONG ?
        LengthInBytes DWORDLONG ?
      QUERY_BAD_RANGES_OUTPUT_RANGE ends
      _QUERY_BAD_RANGES_OUTPUT_RANGE typedef QUERY_BAD_RANGES_OUTPUT_RANGE
      PQUERY_BAD_RANGES_OUTPUT_RANGE typedef ptr QUERY_BAD_RANGES_OUTPUT_RANGE
      
      QUERY_BAD_RANGES_OUTPUT struct
        Flags DWORD ?
        NumBadRanges DWORD ?
        NextOffsetToLookUp DWORDLONG ?
        BadRanges QUERY_BAD_RANGES_OUTPUT_RANGE 1 dup (<>)
      QUERY_BAD_RANGES_OUTPUT ends
      _QUERY_BAD_RANGES_OUTPUT typedef QUERY_BAD_RANGES_OUTPUT
      PQUERY_BAD_RANGES_OUTPUT typedef ptr QUERY_BAD_RANGES_OUTPUT
      
      SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT struct
        Flags DWORD ?
        AlignmentShift DWORD ?
        FileOffsetToAlign DWORDLONG ?
        if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS4)
          FallbackAlignmentShift DWORD ?
        endif
      SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT ends
      _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT typedef SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
      PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT typedef ptr SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
      
      if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS4)
        DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY equ 00000001h
        DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED equ 00000002h
      endif
      VIRTUAL_STORAGE_BEHAVIOR_CODE typedef SDWORD
      VirtualStorageBehaviorUndefined equ 0
      VirtualStorageBehaviorCacheWriteThrough equ 1
      VirtualStorageBehaviorCacheWriteBack equ 2
      _VIRTUAL_STORAGE_BEHAVIOR_CODE typedef VIRTUAL_STORAGE_BEHAVIOR_CODE
      PVIRTUAL_STORAGE_BEHAVIOR_CODE typedef ptr VIRTUAL_STORAGE_BEHAVIOR_CODE
      
      VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT struct
        Size_ DWORD ?
        BehaviorCode VIRTUAL_STORAGE_BEHAVIOR_CODE ?
      VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT ends
      _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT typedef VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
      PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT typedef ptr VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
      
      ENCRYPTION_KEY_CTRL_INPUT struct
        IsProtect BOOLEAN ?
      ENCRYPTION_KEY_CTRL_INPUT ends
      _ENCRYPTION_KEY_CTRL_INPUT typedef ENCRYPTION_KEY_CTRL_INPUT
      PENCRYPTION_KEY_CTRL_INPUT typedef ptr ENCRYPTION_KEY_CTRL_INPUT
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      WOF_CURRENT_VERSION equ 00000001h
      WOF_PROVIDER_WIM equ 00000001h
      WOF_PROVIDER_FILE equ 00000002h
      WOF_PROVIDER_CLOUD equ 00000003h
      WOF_EXTERNAL_INFO struct
        Version DWORD ?
        Provider DWORD ?
      WOF_EXTERNAL_INFO ends
      _WOF_EXTERNAL_INFO typedef WOF_EXTERNAL_INFO
      PWOF_EXTERNAL_INFO typedef ptr WOF_EXTERNAL_INFO
      
      WOF_EXTERNAL_FILE_ID struct
        FileId FILE_ID_128 <>
      WOF_EXTERNAL_FILE_ID ends
      _WOF_EXTERNAL_FILE_ID typedef WOF_EXTERNAL_FILE_ID
      PWOF_EXTERNAL_FILE_ID typedef ptr WOF_EXTERNAL_FILE_ID
      
      WOF_VERSION_INFO struct
        WofVersion DWORD ?
      WOF_VERSION_INFO ends
      _WOF_VERSION_INFO typedef WOF_VERSION_INFO
      PWOF_VERSION_INFO typedef ptr WOF_VERSION_INFO
      
      ifndef WIM_PROVIDER_HASH_SIZE
        WIM_PROVIDER_HASH_SIZE equ 20
      endif
      WIM_PROVIDER_CURRENT_VERSION equ 00000001h
      WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE equ 00000001h
      WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED equ 00000002h
      WIM_PROVIDER_EXTERNAL_INFO struct
        Version DWORD ?
        Flags DWORD ?
        DataSourceId LARGE_INTEGER <>
        ResourceHash BYTE WIM_PROVIDER_HASH_SIZE dup (?)
      WIM_PROVIDER_EXTERNAL_INFO ends
      _WIM_PROVIDER_EXTERNAL_INFO typedef WIM_PROVIDER_EXTERNAL_INFO
      PWIM_PROVIDER_EXTERNAL_INFO typedef ptr WIM_PROVIDER_EXTERNAL_INFO
      
      WIM_BOOT_OS_WIM equ 00000001h
      WIM_BOOT_NOT_OS_WIM equ 00000000h
      WIM_PROVIDER_ADD_OVERLAY_INPUT struct
        WimType DWORD ?
        WimIndex DWORD ?
        WimFileNameOffset DWORD ?
        WimFileNameLength DWORD ?
      WIM_PROVIDER_ADD_OVERLAY_INPUT ends
      _WIM_PROVIDER_ADD_OVERLAY_INPUT typedef WIM_PROVIDER_ADD_OVERLAY_INPUT
      PWIM_PROVIDER_ADD_OVERLAY_INPUT typedef ptr WIM_PROVIDER_ADD_OVERLAY_INPUT
      
      WIM_PROVIDER_UPDATE_OVERLAY_INPUT struct
        DataSourceId LARGE_INTEGER <>
        WimFileNameOffset DWORD ?
        WimFileNameLength DWORD ?
      WIM_PROVIDER_UPDATE_OVERLAY_INPUT ends
      _WIM_PROVIDER_UPDATE_OVERLAY_INPUT typedef WIM_PROVIDER_UPDATE_OVERLAY_INPUT
      PWIM_PROVIDER_UPDATE_OVERLAY_INPUT typedef ptr WIM_PROVIDER_UPDATE_OVERLAY_INPUT
      
      WIM_PROVIDER_REMOVE_OVERLAY_INPUT struct
        DataSourceId LARGE_INTEGER <>
      WIM_PROVIDER_REMOVE_OVERLAY_INPUT ends
      _WIM_PROVIDER_REMOVE_OVERLAY_INPUT typedef WIM_PROVIDER_REMOVE_OVERLAY_INPUT
      PWIM_PROVIDER_REMOVE_OVERLAY_INPUT typedef ptr WIM_PROVIDER_REMOVE_OVERLAY_INPUT
      
      WIM_PROVIDER_SUSPEND_OVERLAY_INPUT struct
        DataSourceId LARGE_INTEGER <>
      WIM_PROVIDER_SUSPEND_OVERLAY_INPUT ends
      _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT typedef WIM_PROVIDER_SUSPEND_OVERLAY_INPUT
      PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT typedef ptr WIM_PROVIDER_SUSPEND_OVERLAY_INPUT
      
      WIM_PROVIDER_OVERLAY_ENTRY struct
        NextEntryOffset DWORD ?
        DataSourceId LARGE_INTEGER <>
        WimGuid GUID <>
        WimFileNameOffset DWORD ?
        WimType DWORD ?
        WimIndex DWORD ?
        Flags DWORD ?
      WIM_PROVIDER_OVERLAY_ENTRY ends
      _WIM_PROVIDER_OVERLAY_ENTRY typedef WIM_PROVIDER_OVERLAY_ENTRY
      PWIM_PROVIDER_OVERLAY_ENTRY typedef ptr WIM_PROVIDER_OVERLAY_ENTRY
      
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN7)
      FILE_PROVIDER_CURRENT_VERSION equ 00000001h
      FILE_PROVIDER_SINGLE_FILE equ 00000001h
      FILE_PROVIDER_COMPRESSION_XPRESS4K equ 00000000h
      FILE_PROVIDER_COMPRESSION_LZX equ 00000001h
      FILE_PROVIDER_COMPRESSION_XPRESS8K equ 00000002h
      FILE_PROVIDER_COMPRESSION_XPRESS16K equ 00000003h
      FILE_PROVIDER_COMPRESSION_MAXIMUM equ 00000004h
      FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE equ 00000001h
      FILE_PROVIDER_EXTERNAL_INFO_V0 struct
        Version DWORD ?
        Algorithm DWORD ?
      FILE_PROVIDER_EXTERNAL_INFO_V0 ends
      _FILE_PROVIDER_EXTERNAL_INFO_V0 typedef FILE_PROVIDER_EXTERNAL_INFO_V0
      PFILE_PROVIDER_EXTERNAL_INFO_V0 typedef ptr FILE_PROVIDER_EXTERNAL_INFO_V0
      
      FILE_PROVIDER_EXTERNAL_INFO_V1 struct
        Version DWORD ?
        Algorithm DWORD ?
        Flags DWORD ?
      FILE_PROVIDER_EXTERNAL_INFO_V1 ends
      _FILE_PROVIDER_EXTERNAL_INFO_V1 typedef FILE_PROVIDER_EXTERNAL_INFO_V1
      PFILE_PROVIDER_EXTERNAL_INFO_V1 typedef ptr FILE_PROVIDER_EXTERNAL_INFO_V1
      
      FILE_PROVIDER_EXTERNAL_INFO typedef FILE_PROVIDER_EXTERNAL_INFO_V1
      PFILE_PROVIDER_EXTERNAL_INFO typedef PFILE_PROVIDER_EXTERNAL_INFO_V1
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WINTHRESHOLD)
      CONTAINER_VOLUME_STATE struct
        Flags DWORD ?
      CONTAINER_VOLUME_STATE ends
      _CONTAINER_VOLUME_STATE typedef CONTAINER_VOLUME_STATE
      PCONTAINER_VOLUME_STATE typedef ptr CONTAINER_VOLUME_STATE
      
      CONTAINER_VOLUME_STATE_HOSTING_CONTAINER equ 00000001h
      CONTAINER_ROOT_INFO_INPUT struct
        Flags DWORD ?
      CONTAINER_ROOT_INFO_INPUT ends
      _CONTAINER_ROOT_INFO_INPUT typedef CONTAINER_ROOT_INFO_INPUT
      PCONTAINER_ROOT_INFO_INPUT typedef ptr CONTAINER_ROOT_INFO_INPUT
      
      CONTAINER_ROOT_INFO_OUTPUT struct
        ContainerRootIdLength WORD ?
        ContainerRootId BYTE ANYSIZE_ARRAY dup (?)
      CONTAINER_ROOT_INFO_OUTPUT ends
      _CONTAINER_ROOT_INFO_OUTPUT typedef CONTAINER_ROOT_INFO_OUTPUT
      PCONTAINER_ROOT_INFO_OUTPUT typedef ptr CONTAINER_ROOT_INFO_OUTPUT
      
      CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT equ 00000001h
      CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT equ 00000002h
      CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT equ 00000004h
      CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT equ 00000008h
      CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT equ 00000010h
      CONTAINER_ROOT_INFO_FLAG_BIND_ROOT equ 00000020h
      CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT equ 00000040h
      CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT equ 00000080h
      CONTAINER_ROOT_INFO_VALID_FLAGS equ 000000ffh
    endif
    if (_WIN32_WINNT ge _WIN32_WINNT_WIN10_RS1)
      VIRTUALIZATION_INSTANCE_INFO_INPUT struct
        NumberOfWorkerThreads DWORD ?
        Flags DWORD ?
      VIRTUALIZATION_INSTANCE_INFO_INPUT ends
      _VIRTUALIZATION_INSTANCE_INFO_INPUT typedef VIRTUALIZATION_INSTANCE_INFO_INPUT
      PVIRTUALIZATION_INSTANCE_INFO_INPUT typedef ptr VIRTUALIZATION_INSTANCE_INFO_INPUT
      
      GV_CURRENT_VERSION equ 2
      VIRTUALIZATION_INSTANCE_INFO_INPUT_EX struct
        HeaderSize WORD ?
        Flags DWORD ?
        NotificationInfoSize DWORD ?
        NotificationInfoOffset WORD ?
        ProviderMajorVersion WORD ?
      VIRTUALIZATION_INSTANCE_INFO_INPUT_EX ends
      _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX typedef VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
      PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX typedef ptr VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
      
      VIRTUALIZATION_INSTANCE_INFO_OUTPUT struct
        VirtualizationInstanceID GUID <>
      VIRTUALIZATION_INSTANCE_INFO_OUTPUT ends
      _VIRTUALIZATION_INSTANCE_INFO_OUTPUT typedef VIRTUALIZATION_INSTANCE_INFO_OUTPUT
      PVIRTUALIZATION_INSTANCE_INFO_OUTPUT typedef ptr VIRTUALIZATION_INSTANCE_INFO_OUTPUT
      
      GET_FILTER_FILE_IDENTIFIER_INPUT struct
        AltitudeLength WORD ?
        Altitude WCHAR ANYSIZE_ARRAY dup (?)
      GET_FILTER_FILE_IDENTIFIER_INPUT ends
      _GET_FILTER_FILE_IDENTIFIER_INPUT typedef GET_FILTER_FILE_IDENTIFIER_INPUT
      PGET_FILTER_FILE_IDENTIFIER_INPUT typedef ptr GET_FILTER_FILE_IDENTIFIER_INPUT
      
      GET_FILTER_FILE_IDENTIFIER_OUTPUT struct
        FilterFileIdentifierLength WORD ?
        FilterFileIdentifier BYTE ANYSIZE_ARRAY dup (?)
      GET_FILTER_FILE_IDENTIFIER_OUTPUT ends
      _GET_FILTER_FILE_IDENTIFIER_OUTPUT typedef GET_FILTER_FILE_IDENTIFIER_OUTPUT
      PGET_FILTER_FILE_IDENTIFIER_OUTPUT typedef ptr GET_FILTER_FILE_IDENTIFIER_OUTPUT
      
    endif
  endif
  ifndef SMB_CCF_APP_INSTANCE_EA_NAME
    SMB_CCF_APP_INSTANCE_EA_NAME equ <"ClusteredApplicationInstance">
  endif
  ifndef _NETWORK_APP_INSTANCE_EA_DEFINED
    _NETWORK_APP_INSTANCE_EA_DEFINED equ <>
    if (NTDDI_VERSION ge NTDDI_WIN10)
      ifndef NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR
        NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR equ 00000001h
      endif
      NETWORK_APP_INSTANCE_EA struct
        AppInstanceID GUID <>
        CsvFlags DWORD ?
      NETWORK_APP_INSTANCE_EA ends
      _NETWORK_APP_INSTANCE_EA typedef NETWORK_APP_INSTANCE_EA
      PNETWORK_APP_INSTANCE_EA typedef ptr NETWORK_APP_INSTANCE_EA
      
    endif
  endif
  IOCTL_VOLUME_BASE equ 00000056h
  if (NTDDI_VERSION ge NTDDI_WIN2K)
    IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS equ CTL_CODE(IOCTL_VOLUME_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
    DISK_EXTENT struct 8
      DiskNumber DWORD ?
      StartingOffset LARGE_INTEGER <>
      ExtentLength LARGE_INTEGER <>
    DISK_EXTENT ends
    _DISK_EXTENT typedef DISK_EXTENT
    PDISK_EXTENT typedef ptr DISK_EXTENT
    
    VOLUME_DISK_EXTENTS struct 8
      NumberOfDiskExtents DWORD ?
      Extents DISK_EXTENT ANYSIZE_ARRAY dup (<>)
    VOLUME_DISK_EXTENTS ends
    _VOLUME_DISK_EXTENTS typedef VOLUME_DISK_EXTENTS
    PVOLUME_DISK_EXTENTS typedef ptr VOLUME_DISK_EXTENTS
    
    IOCTL_VOLUME_ONLINE equ CTL_CODE(IOCTL_VOLUME_BASE, 2, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
    IOCTL_VOLUME_OFFLINE equ CTL_CODE(IOCTL_VOLUME_BASE, 3, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  endif
  if (NTDDI_VERSION ge NTDDI_WINXP)
    IOCTL_VOLUME_IS_CLUSTERED equ CTL_CODE(IOCTL_VOLUME_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_VOLUME_GET_GPT_ATTRIBUTES equ CTL_CODE(IOCTL_VOLUME_BASE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS)
    VOLUME_GET_GPT_ATTRIBUTES_INFORMATION struct
      GptAttributes DWORDLONG ?
    VOLUME_GET_GPT_ATTRIBUTES_INFORMATION ends
    _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION typedef VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
    PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION typedef ptr VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
    
  endif
  if (NTDDI_VERSION ge NTDDI_WINTHRESHOLD)
    ifndef _IO_IRP_EXT_TRACK_OFFSET_HEADER_
      _IO_IRP_EXT_TRACK_OFFSET_HEADER_ equ <>
;      TYPE_PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK typedef proto WIN_STD_CALL_CONV :ptr _IO_IRP_EXT_TRACK_OFFSET_HEADER, :ptr _IO_IRP_EXT_TRACK_OFFSET_HEADER, :LONGLONG
      TYPE_PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK typedef proto WIN_STD_CALL_CONV :ptr, :ptr, :LONGLONG
      PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK typedef ptr TYPE_PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK
      IRP_EXT_TRACK_OFFSET_HEADER_VALIDATION_VALUE equ <'TO'>
      IO_IRP_EXT_TRACK_OFFSET_HEADER struct
        Validation WORD ?
        Flags WORD ?
        TrackedOffsetCallback PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK ?
      IO_IRP_EXT_TRACK_OFFSET_HEADER ends
      _IO_IRP_EXT_TRACK_OFFSET_HEADER typedef IO_IRP_EXT_TRACK_OFFSET_HEADER
      PIO_IRP_EXT_TRACK_OFFSET_HEADER typedef ptr IO_IRP_EXT_TRACK_OFFSET_HEADER
      
      EFS_TRACKED_OFFSET_HEADER_FLAG equ 0001h
      SPACES_TRACKED_OFFSET_HEADER_FLAG equ 0002h
    endif
  endif
  if _MSC_VER ge 1200
  endif
endif

