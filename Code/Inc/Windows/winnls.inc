;Include file created by h2incX, Version B.01.01, 19/04/2018 10:43
;(C) 2018-today by Biterider, 2005-2009 by Japheth
;Source file: '\ObjAsm\Projects\h2IncX\header\winnls.h', last modified: 19/04/2018 10:44
;Creation parameters: 

ifndef _WINNLS_
  _WINNLS_ equ <>
  include winapifamily.inc
  ifdef __cplusplus
    ;[...]
  endif
  ifndef NOAPISET
    include datetimeapi.inc
    include libloaderapi.inc
  endif
  if _MSC_VER ge 1200
  endif
  if  not Defined(DISABLE_NLS_DEPRECATION)
    DISABLE_NLS_DEPRECATION equ <>
  endif
  if  not Defined(DISABLE_NLS_DEPRECATION)
    if Defined(__cplusplus)
      ;[...]
  else
    DEPRECATED macro x
      exitm <>
    endm
  endif
else
  DEPRECATED macro x
    exitm <>
  endm
endif
ifndef NONLS
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    ifdef _MAC
      ;[...]
    endif
    if  not Defined(_NORMALIZE_)
      WINNORMALIZEAPI equ <DECLSPEC_IMPORT>
    else
      WINNORMALIZEAPI equ <>
    endif
    MAX_LEADBYTES equ 12
    MAX_DEFAULTCHAR equ 2
    HIGH_SURROGATE_START equ 0d800h
    HIGH_SURROGATE_END equ 0dbffh
    LOW_SURROGATE_START equ 0dc00h
    LOW_SURROGATE_END equ 0dfffh
    MB_PRECOMPOSED equ 00000001h
    MB_COMPOSITE equ 00000002h
    MB_USEGLYPHCHARS equ 00000004h
    MB_ERR_INVALID_CHARS equ 00000008h
    WC_COMPOSITECHECK equ 00000200h
    WC_DISCARDNS equ 00000010h
    WC_SEPCHARS equ 00000020h
    WC_DEFAULTCHAR equ 00000040h
    if (WINVER ge 0600h)
      WC_ERR_INVALID_CHARS equ 00000080h
    endif
    if (WINVER ge 0500h)
      WC_NO_BEST_FIT_CHARS equ 00000400h
    endif
    CT_CTYPE1 equ 00000001h
    CT_CTYPE2 equ 00000002h
    CT_CTYPE3 equ 00000004h
    C1_UPPER equ 0001h
    C1_LOWER equ 0002h
    C1_DIGIT equ 0004h
    C1_SPACE equ 0008h
    C1_PUNCT equ 0010h
    C1_CNTRL equ 0020h
    C1_BLANK equ 0040h
    C1_XDIGIT equ 0080h
    C1_ALPHA equ 0100h
    C1_DEFINED equ 0200h
    C2_LEFTTORIGHT equ 0001h
    C2_RIGHTTOLEFT equ 0002h
    C2_EUROPENUMBER equ 0003h
    C2_EUROPESEPARATOR equ 0004h
    C2_EUROPETERMINATOR equ 0005h
    C2_ARABICNUMBER equ 0006h
    C2_COMMONSEPARATOR equ 0007h
    C2_BLOCKSEPARATOR equ 0008h
    C2_SEGMENTSEPARATOR equ 0009h
    C2_WHITESPACE equ 000Ah
    C2_OTHERNEUTRAL equ 000Bh
    C2_NOTAPPLICABLE equ 0000h
    C3_NONSPACING equ 0001h
    C3_DIACRITIC equ 0002h
    C3_VOWELMARK equ 0004h
    C3_SYMBOL equ 0008h
    C3_KATAKANA equ 0010h
    C3_HIRAGANA equ 0020h
    C3_HALFWIDTH equ 0040h
    C3_FULLWIDTH equ 0080h
    C3_IDEOGRAPH equ 0100h
    C3_KASHIDA equ 0200h
    C3_LEXICAL equ 0400h
    C3_HIGHSURROGATE equ 0800h
    C3_LOWSURROGATE equ 1000h
    C3_ALPHA equ 8000h
    C3_NOTAPPLICABLE equ 0000h
    NORM_IGNORECASE equ 00000001h
    NORM_IGNORENONSPACE equ 00000002h
    NORM_IGNORESYMBOLS equ 00000004h
    LINGUISTIC_IGNORECASE equ 00000010h
    LINGUISTIC_IGNOREDIACRITIC equ 00000020h
    NORM_IGNOREKANATYPE equ 00010000h
    NORM_IGNOREWIDTH equ 00020000h
    NORM_LINGUISTIC_CASING equ 08000000h
    MAP_FOLDCZONE equ 00000010h
    MAP_PRECOMPOSED equ 00000020h
    MAP_COMPOSITE equ 00000040h
    MAP_FOLDDIGITS equ 00000080h
    if (WINVER ge 0500h)
      MAP_EXPAND_LIGATURES equ 00002000h
    endif
    LCMAP_LOWERCASE equ 00000100h
    LCMAP_UPPERCASE equ 00000200h
    if (WINVER ge _WIN32_WINNT_WIN7)
      LCMAP_TITLECASE equ 00000300h
    endif
    LCMAP_SORTKEY equ 00000400h
    LCMAP_BYTEREV equ 00000800h
    LCMAP_HIRAGANA equ 00100000h
    LCMAP_KATAKANA equ 00200000h
    LCMAP_HALFWIDTH equ 00400000h
    LCMAP_FULLWIDTH equ 00800000h
    LCMAP_LINGUISTIC_CASING equ 01000000h
    LCMAP_SIMPLIFIED_CHINESE equ 02000000h
    LCMAP_TRADITIONAL_CHINESE equ 04000000h
    if (WINVER ge _WIN32_WINNT_WIN8)
      LCMAP_SORTHANDLE equ 20000000h
      LCMAP_HASH equ 00040000h
    endif
    FIND_STARTSWITH equ 00100000h
    FIND_ENDSWITH equ 00200000h
    FIND_FROMSTART equ 00400000h
    FIND_FROMEND equ 00800000h
    LGRPID_INSTALLED equ 00000001h
    LGRPID_SUPPORTED equ 00000002h
    LCID_INSTALLED equ 00000001h
    LCID_SUPPORTED equ 00000002h
    LCID_ALTERNATE_SORTS equ 00000004h
    if (WINVER ge _WIN32_WINNT_VISTA)
      LOCALE_ALL equ 0
      LOCALE_WINDOWS equ 00000001h
      LOCALE_SUPPLEMENTAL equ 00000002h
      LOCALE_ALTERNATE_SORTS equ 00000004h
      LOCALE_REPLACEMENT equ 00000008h
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      LOCALE_NEUTRALDATA equ 00000010h
      LOCALE_SPECIFICDATA equ 00000020h
    endif
    CP_INSTALLED equ 00000001h
    CP_SUPPORTED equ 00000002h
    SORT_STRINGSORT equ 00001000h
    if (WINVER ge _WIN32_WINNT_WIN7)
      SORT_DIGITSASNUMBERS equ 00000008h
    endif
    CSTR_LESS_THAN equ 1
    CSTR_EQUAL equ 2
    CSTR_GREATER_THAN equ 3
    CP_ACP equ 0
    CP_OEMCP equ 1
    CP_MACCP equ 2
    CP_THREAD_ACP equ 3
    CP_SYMBOL equ 42
    CP_UTF7 equ 65000
    CP_UTF8 equ 65001
    CTRY_DEFAULT equ 0
    CTRY_ALBANIA equ 355
    CTRY_ALGERIA equ 213
    CTRY_ARGENTINA equ 54
    CTRY_ARMENIA equ 374
    CTRY_AUSTRALIA equ 61
    CTRY_AUSTRIA equ 43
    CTRY_AZERBAIJAN equ 994
    CTRY_BAHRAIN equ 973
    CTRY_BELARUS equ 375
    CTRY_BELGIUM equ 32
    CTRY_BELIZE equ 501
    CTRY_BOLIVIA equ 591
    CTRY_BRAZIL equ 55
    CTRY_BRUNEI_DARUSSALAM equ 673
    CTRY_BULGARIA equ 359
    CTRY_CANADA equ 2
    CTRY_CARIBBEAN equ 1
    CTRY_CHILE equ 56
    CTRY_COLOMBIA equ 57
    CTRY_COSTA_RICA equ 506
    CTRY_CROATIA equ 385
    CTRY_CZECH equ 420
    CTRY_DENMARK equ 45
    CTRY_DOMINICAN_REPUBLIC equ 1
    CTRY_ECUADOR equ 593
    CTRY_EGYPT equ 20
    CTRY_EL_SALVADOR equ 503
    CTRY_ESTONIA equ 372
    CTRY_FAEROE_ISLANDS equ 298
    CTRY_FINLAND equ 358
    CTRY_FRANCE equ 33
    CTRY_GEORGIA equ 995
    CTRY_GERMANY equ 49
    CTRY_GREECE equ 30
    CTRY_GUATEMALA equ 502
    CTRY_HONDURAS equ 504
    CTRY_HONG_KONG equ 852
    CTRY_HUNGARY equ 36
    CTRY_ICELAND equ 354
    CTRY_INDIA equ 91
    CTRY_INDONESIA equ 62
    CTRY_IRAN equ 981
    CTRY_IRAQ equ 964
    CTRY_IRELAND equ 353
    CTRY_ISRAEL equ 972
    CTRY_ITALY equ 39
    CTRY_JAMAICA equ 1
    CTRY_JAPAN equ 81
    CTRY_JORDAN equ 962
    CTRY_KAZAKSTAN equ 7
    CTRY_KENYA equ 254
    CTRY_KUWAIT equ 965
    CTRY_KYRGYZSTAN equ 996
    CTRY_LATVIA equ 371
    CTRY_LEBANON equ 961
    CTRY_LIBYA equ 218
    CTRY_LIECHTENSTEIN equ 41
    CTRY_LITHUANIA equ 370
    CTRY_LUXEMBOURG equ 352
    CTRY_MACAU equ 853
    CTRY_MACEDONIA equ 389
    CTRY_MALAYSIA equ 60
    CTRY_MALDIVES equ 960
    CTRY_MEXICO equ 52
    CTRY_MONACO equ 33
    CTRY_MONGOLIA equ 976
    CTRY_MOROCCO equ 212
    CTRY_NETHERLANDS equ 31
    CTRY_NEW_ZEALAND equ 64
    CTRY_NICARAGUA equ 505
    CTRY_NORWAY equ 47
    CTRY_OMAN equ 968
    CTRY_PAKISTAN equ 92
    CTRY_PANAMA equ 507
    CTRY_PARAGUAY equ 595
    CTRY_PERU equ 51
    CTRY_PHILIPPINES equ 63
    CTRY_POLAND equ 48
    CTRY_PORTUGAL equ 351
    CTRY_PRCHINA equ 86
    CTRY_PUERTO_RICO equ 1
    CTRY_QATAR equ 974
    CTRY_ROMANIA equ 40
    CTRY_RUSSIA equ 7
    CTRY_SAUDI_ARABIA equ 966
    CTRY_SERBIA equ 381
    CTRY_SINGAPORE equ 65
    CTRY_SLOVAK equ 421
    CTRY_SLOVENIA equ 386
    CTRY_SOUTH_AFRICA equ 27
    CTRY_SOUTH_KOREA equ 82
    CTRY_SPAIN equ 34
    CTRY_SWEDEN equ 46
    CTRY_SWITZERLAND equ 41
    CTRY_SYRIA equ 963
    CTRY_TAIWAN equ 886
    CTRY_TATARSTAN equ 7
    CTRY_THAILAND equ 66
    CTRY_TRINIDAD_Y_TOBAGO equ 1
    CTRY_TUNISIA equ 216
    CTRY_TURKEY equ 90
    CTRY_UAE equ 971
    CTRY_UKRAINE equ 380
    CTRY_UNITED_KINGDOM equ 44
    CTRY_UNITED_STATES equ 1
    CTRY_URUGUAY equ 598
    CTRY_UZBEKISTAN equ 7
    CTRY_VENEZUELA equ 58
    CTRY_VIET_NAM equ 84
    CTRY_YEMEN equ 967
    CTRY_ZIMBABWE equ 263
    LOCALE_NOUSEROVERRIDE equ 80000000h
    LOCALE_USE_CP_ACP equ 40000000h
    if (WINVER ge 0400h)
      LOCALE_RETURN_NUMBER equ 20000000h
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      LOCALE_RETURN_GENITIVE_NAMES equ 10000000h
      LOCALE_ALLOW_NEUTRAL_NAMES equ 08000000h
    endif
    LOCALE_SLOCALIZEDDISPLAYNAME equ 00000002h
    if (WINVER ge _WIN32_WINNT_WIN7)
      LOCALE_SENGLISHDISPLAYNAME equ 00000072h
      LOCALE_SNATIVEDISPLAYNAME equ 00000073h
    endif
    if (WINVER ge _WIN32_WINNT_VISTA)
      LOCALE_SLOCALIZEDLANGUAGENAME equ 0000006fh
    endif
    LOCALE_SENGLISHLANGUAGENAME equ 00001001h
    LOCALE_SNATIVELANGUAGENAME equ 00000004h
    LOCALE_SLOCALIZEDCOUNTRYNAME equ 00000006h
    LOCALE_SENGLISHCOUNTRYNAME equ 00001002h
    LOCALE_SNATIVECOUNTRYNAME equ 00000008h
    LOCALE_IDIALINGCODE equ 00000005h
    LOCALE_SLIST equ 0000000Ch
    LOCALE_IMEASURE equ 0000000Dh
    LOCALE_SDECIMAL equ 0000000Eh
    LOCALE_STHOUSAND equ 0000000Fh
    LOCALE_SGROUPING equ 00000010h
    LOCALE_IDIGITS equ 00000011h
    LOCALE_ILZERO equ 00000012h
    LOCALE_INEGNUMBER equ 00001010h
    LOCALE_SNATIVEDIGITS equ 00000013h
    LOCALE_SCURRENCY equ 00000014h
    LOCALE_SINTLSYMBOL equ 00000015h
    LOCALE_SMONDECIMALSEP equ 00000016h
    LOCALE_SMONTHOUSANDSEP equ 00000017h
    LOCALE_SMONGROUPING equ 00000018h
    LOCALE_ICURRDIGITS equ 00000019h
    LOCALE_ICURRENCY equ 0000001Bh
    LOCALE_INEGCURR equ 0000001Ch
    LOCALE_SSHORTDATE equ 0000001Fh
    LOCALE_SLONGDATE equ 00000020h
    LOCALE_STIMEFORMAT equ 00001003h
    LOCALE_SAM equ 00000028h
    LOCALE_SPM equ 00000029h
    LOCALE_ICALENDARTYPE equ 00001009h
    LOCALE_IOPTIONALCALENDAR equ 0000100Bh
    LOCALE_IFIRSTDAYOFWEEK equ 0000100Ch
    LOCALE_IFIRSTWEEKOFYEAR equ 0000100Dh
    LOCALE_SDAYNAME1 equ 0000002Ah
    LOCALE_SDAYNAME2 equ 0000002Bh
    LOCALE_SDAYNAME3 equ 0000002Ch
    LOCALE_SDAYNAME4 equ 0000002Dh
    LOCALE_SDAYNAME5 equ 0000002Eh
    LOCALE_SDAYNAME6 equ 0000002Fh
    LOCALE_SDAYNAME7 equ 00000030h
    LOCALE_SABBREVDAYNAME1 equ 00000031h
    LOCALE_SABBREVDAYNAME2 equ 00000032h
    LOCALE_SABBREVDAYNAME3 equ 00000033h
    LOCALE_SABBREVDAYNAME4 equ 00000034h
    LOCALE_SABBREVDAYNAME5 equ 00000035h
    LOCALE_SABBREVDAYNAME6 equ 00000036h
    LOCALE_SABBREVDAYNAME7 equ 00000037h
    LOCALE_SMONTHNAME1 equ 00000038h
    LOCALE_SMONTHNAME2 equ 00000039h
    LOCALE_SMONTHNAME3 equ 0000003Ah
    LOCALE_SMONTHNAME4 equ 0000003Bh
    LOCALE_SMONTHNAME5 equ 0000003Ch
    LOCALE_SMONTHNAME6 equ 0000003Dh
    LOCALE_SMONTHNAME7 equ 0000003Eh
    LOCALE_SMONTHNAME8 equ 0000003Fh
    LOCALE_SMONTHNAME9 equ 00000040h
    LOCALE_SMONTHNAME10 equ 00000041h
    LOCALE_SMONTHNAME11 equ 00000042h
    LOCALE_SMONTHNAME12 equ 00000043h
    LOCALE_SMONTHNAME13 equ 0000100Eh
    LOCALE_SABBREVMONTHNAME1 equ 00000044h
    LOCALE_SABBREVMONTHNAME2 equ 00000045h
    LOCALE_SABBREVMONTHNAME3 equ 00000046h
    LOCALE_SABBREVMONTHNAME4 equ 00000047h
    LOCALE_SABBREVMONTHNAME5 equ 00000048h
    LOCALE_SABBREVMONTHNAME6 equ 00000049h
    LOCALE_SABBREVMONTHNAME7 equ 0000004Ah
    LOCALE_SABBREVMONTHNAME8 equ 0000004Bh
    LOCALE_SABBREVMONTHNAME9 equ 0000004Ch
    LOCALE_SABBREVMONTHNAME10 equ 0000004Dh
    LOCALE_SABBREVMONTHNAME11 equ 0000004Eh
    LOCALE_SABBREVMONTHNAME12 equ 0000004Fh
    LOCALE_SABBREVMONTHNAME13 equ 0000100Fh
    LOCALE_SPOSITIVESIGN equ 00000050h
    LOCALE_SNEGATIVESIGN equ 00000051h
    LOCALE_IPOSSIGNPOSN equ 00000052h
    LOCALE_INEGSIGNPOSN equ 00000053h
    LOCALE_IPOSSYMPRECEDES equ 00000054h
    LOCALE_IPOSSEPBYSPACE equ 00000055h
    LOCALE_INEGSYMPRECEDES equ 00000056h
    LOCALE_INEGSEPBYSPACE equ 00000057h
    if (WINVER ge 0400h)
      LOCALE_FONTSIGNATURE equ 00000058h
      LOCALE_SISO639LANGNAME equ 00000059h
      LOCALE_SISO3166CTRYNAME equ 0000005Ah
    endif
    if (WINVER ge 0500h)
      LOCALE_IPAPERSIZE equ 0000100Ah
      LOCALE_SENGCURRNAME equ 00001007h
      LOCALE_SNATIVECURRNAME equ 00001008h
      LOCALE_SYEARMONTH equ 00001006h
      LOCALE_SSORTNAME equ 00001013h
      LOCALE_IDIGITSUBSTITUTION equ 00001014h
    endif
    if (WINVER ge 0600h)
      LOCALE_SNAME equ 0000005ch
      LOCALE_SDURATION equ 0000005dh
      LOCALE_SSHORTESTDAYNAME1 equ 00000060h
      LOCALE_SSHORTESTDAYNAME2 equ 00000061h
      LOCALE_SSHORTESTDAYNAME3 equ 00000062h
      LOCALE_SSHORTESTDAYNAME4 equ 00000063h
      LOCALE_SSHORTESTDAYNAME5 equ 00000064h
      LOCALE_SSHORTESTDAYNAME6 equ 00000065h
      LOCALE_SSHORTESTDAYNAME7 equ 00000066h
      LOCALE_SISO639LANGNAME2 equ 00000067h
      LOCALE_SISO3166CTRYNAME2 equ 00000068h
      LOCALE_SNAN equ 00000069h
      LOCALE_SPOSINFINITY equ 0000006ah
      LOCALE_SNEGINFINITY equ 0000006bh
      LOCALE_SSCRIPTS equ 0000006ch
      LOCALE_SPARENT equ 0000006dh
      LOCALE_SCONSOLEFALLBACKNAME equ 0000006eh
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      LOCALE_IREADINGLAYOUT equ 00000070h
      LOCALE_INEUTRAL equ 00000071h
      LOCALE_INEGATIVEPERCENT equ 00000074h
      LOCALE_IPOSITIVEPERCENT equ 00000075h
      LOCALE_SPERCENT equ 00000076h
      LOCALE_SPERMILLE equ 00000077h
      LOCALE_SMONTHDAY equ 00000078h
      LOCALE_SSHORTTIME equ 00000079h
      LOCALE_SOPENTYPELANGUAGETAG equ 0000007ah
      LOCALE_SSORTLOCALE equ 0000007bh
    endif
    if (WINVER ge _WIN32_WINNT_WIN8)
      LOCALE_SRELATIVELONGDATE equ 0000007ch
    endif
    if (WINVER ge _WIN32_WINNT_WIN10)
      LOCALE_SSHORTESTAM equ 0000007eh
      LOCALE_SSHORTESTPM equ 0000007fh
    endif
    LOCALE_IDEFAULTCODEPAGE equ 0000000Bh
    LOCALE_IDEFAULTANSICODEPAGE equ 00001004h
    LOCALE_IDEFAULTMACCODEPAGE equ 00001011h
    if (WINVER ge 0500h)
      LOCALE_IDEFAULTEBCDICCODEPAGE equ 00001012h
    endif
    LOCALE_ILANGUAGE equ 00000001h
    LOCALE_SABBREVLANGNAME equ 00000003h
    LOCALE_SABBREVCTRYNAME equ 00000007h
    LOCALE_IGEOID equ 0000005Bh
    LOCALE_IDEFAULTLANGUAGE equ 00000009h
    LOCALE_IDEFAULTCOUNTRY equ 0000000Ah
    LOCALE_IINTLCURRDIGITS equ 0000001Ah
    LOCALE_SDATE equ 0000001Dh
    LOCALE_STIME equ 0000001Eh
    LOCALE_IDATE equ 00000021h
    LOCALE_ILDATE equ 00000022h
    LOCALE_ITIME equ 00000023h
    LOCALE_ITIMEMARKPOSN equ 00001005h
    LOCALE_ICENTURY equ 00000024h
    LOCALE_ITLZERO equ 00000025h
    LOCALE_IDAYLZERO equ 00000026h
    LOCALE_IMONLZERO equ 00000027h
    if (WINVER ge 0600h)
      LOCALE_SKEYBOARDSTOINSTALL equ 0000005eh
    endif
    LOCALE_SLANGUAGE equ <LOCALE_SLOCALIZEDDISPLAYNAME>
    if (WINVER ge _WIN32_WINNT_VISTA)
      LOCALE_SLANGDISPLAYNAME equ <LOCALE_SLOCALIZEDLANGUAGENAME>
    endif
    LOCALE_SENGLANGUAGE equ <LOCALE_SENGLISHLANGUAGENAME>
    LOCALE_SNATIVELANGNAME equ <LOCALE_SNATIVELANGUAGENAME>
    LOCALE_SCOUNTRY equ <LOCALE_SLOCALIZEDCOUNTRYNAME>
    LOCALE_SENGCOUNTRY equ <LOCALE_SENGLISHCOUNTRYNAME>
    LOCALE_SNATIVECTRYNAME equ <LOCALE_SNATIVECOUNTRYNAME>
    LOCALE_ICOUNTRY equ <LOCALE_IDIALINGCODE>
    LOCALE_S1159 equ <LOCALE_SAM>
    LOCALE_S2359 equ <LOCALE_SPM>
    TIME_NOMINUTESORSECONDS equ 00000001h
    TIME_NOSECONDS equ 00000002h
    TIME_NOTIMEMARKER equ 00000004h
    TIME_FORCE24HOURFORMAT equ 00000008h
    DATE_SHORTDATE equ 00000001h
    DATE_LONGDATE equ 00000002h
    DATE_USE_ALT_CALENDAR equ 00000004h
    if (WINVER ge 0500h)
      DATE_YEARMONTH equ 00000008h
      DATE_LTRREADING equ 00000010h
      DATE_RTLREADING equ 00000020h
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      DATE_AUTOLAYOUT equ 00000040h
    endif
    if (WINVER ge _WIN32_WINNT_WINTHRESHOLD)
      DATE_MONTHDAY equ 00000080h
    endif
    if (WINVER ge 0500h)
      CAL_NOUSEROVERRIDE equ <LOCALE_NOUSEROVERRIDE>
      CAL_USE_CP_ACP equ <LOCALE_USE_CP_ACP>
      CAL_RETURN_NUMBER equ <LOCALE_RETURN_NUMBER>
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      CAL_RETURN_GENITIVE_NAMES equ <LOCALE_RETURN_GENITIVE_NAMES>
    endif
    CAL_ICALINTVALUE equ 00000001h
    CAL_SCALNAME equ 00000002h
    CAL_IYEAROFFSETRANGE equ 00000003h
    CAL_SERASTRING equ 00000004h
    CAL_SSHORTDATE equ 00000005h
    CAL_SLONGDATE equ 00000006h
    CAL_SDAYNAME1 equ 00000007h
    CAL_SDAYNAME2 equ 00000008h
    CAL_SDAYNAME3 equ 00000009h
    CAL_SDAYNAME4 equ 0000000ah
    CAL_SDAYNAME5 equ 0000000bh
    CAL_SDAYNAME6 equ 0000000ch
    CAL_SDAYNAME7 equ 0000000dh
    CAL_SABBREVDAYNAME1 equ 0000000eh
    CAL_SABBREVDAYNAME2 equ 0000000fh
    CAL_SABBREVDAYNAME3 equ 00000010h
    CAL_SABBREVDAYNAME4 equ 00000011h
    CAL_SABBREVDAYNAME5 equ 00000012h
    CAL_SABBREVDAYNAME6 equ 00000013h
    CAL_SABBREVDAYNAME7 equ 00000014h
    CAL_SMONTHNAME1 equ 00000015h
    CAL_SMONTHNAME2 equ 00000016h
    CAL_SMONTHNAME3 equ 00000017h
    CAL_SMONTHNAME4 equ 00000018h
    CAL_SMONTHNAME5 equ 00000019h
    CAL_SMONTHNAME6 equ 0000001ah
    CAL_SMONTHNAME7 equ 0000001bh
    CAL_SMONTHNAME8 equ 0000001ch
    CAL_SMONTHNAME9 equ 0000001dh
    CAL_SMONTHNAME10 equ 0000001eh
    CAL_SMONTHNAME11 equ 0000001fh
    CAL_SMONTHNAME12 equ 00000020h
    CAL_SMONTHNAME13 equ 00000021h
    CAL_SABBREVMONTHNAME1 equ 00000022h
    CAL_SABBREVMONTHNAME2 equ 00000023h
    CAL_SABBREVMONTHNAME3 equ 00000024h
    CAL_SABBREVMONTHNAME4 equ 00000025h
    CAL_SABBREVMONTHNAME5 equ 00000026h
    CAL_SABBREVMONTHNAME6 equ 00000027h
    CAL_SABBREVMONTHNAME7 equ 00000028h
    CAL_SABBREVMONTHNAME8 equ 00000029h
    CAL_SABBREVMONTHNAME9 equ 0000002ah
    CAL_SABBREVMONTHNAME10 equ 0000002bh
    CAL_SABBREVMONTHNAME11 equ 0000002ch
    CAL_SABBREVMONTHNAME12 equ 0000002dh
    CAL_SABBREVMONTHNAME13 equ 0000002eh
    if (WINVER ge 0500h)
      CAL_SYEARMONTH equ 0000002fh
      CAL_ITWODIGITYEARMAX equ 00000030h
    endif
    if (WINVER ge 0600h)
      CAL_SSHORTESTDAYNAME1 equ 00000031h
      CAL_SSHORTESTDAYNAME2 equ 00000032h
      CAL_SSHORTESTDAYNAME3 equ 00000033h
      CAL_SSHORTESTDAYNAME4 equ 00000034h
      CAL_SSHORTESTDAYNAME5 equ 00000035h
      CAL_SSHORTESTDAYNAME6 equ 00000036h
      CAL_SSHORTESTDAYNAME7 equ 00000037h
    endif
    if (WINVER ge _WIN32_WINNT_WIN7)
      CAL_SMONTHDAY equ 00000038h
      CAL_SABBREVERASTRING equ 00000039h
    endif
    if (WINVER ge _WIN32_WINNT_WIN8)
      CAL_SRELATIVELONGDATE equ 0000003ah
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS2)
      CAL_SENGLISHERANAME equ 0000003bh
      CAL_SENGLISHABBREVERANAME equ 0000003ch
    endif
    ENUM_ALL_CALENDARS equ 0ffffffffh
    CAL_GREGORIAN equ 1
    CAL_GREGORIAN_US equ 2
    CAL_JAPAN equ 3
    CAL_TAIWAN equ 4
    CAL_KOREA equ 5
    CAL_HIJRI equ 6
    CAL_THAI equ 7
    CAL_HEBREW equ 8
    CAL_GREGORIAN_ME_FRENCH equ 9
    CAL_GREGORIAN_ARABIC equ 10
    CAL_GREGORIAN_XLIT_ENGLISH equ 11
    CAL_GREGORIAN_XLIT_FRENCH equ 12
    CAL_PERSIAN equ 22
    CAL_UMALQURA equ 23
    LGRPID_WESTERN_EUROPE equ 0001h
    LGRPID_CENTRAL_EUROPE equ 0002h
    LGRPID_BALTIC equ 0003h
    LGRPID_GREEK equ 0004h
    LGRPID_CYRILLIC equ 0005h
    LGRPID_TURKIC equ 0006h
    LGRPID_TURKISH equ 0006h
    LGRPID_JAPANESE equ 0007h
    LGRPID_KOREAN equ 0008h
    LGRPID_TRADITIONAL_CHINESE equ 0009h
    LGRPID_SIMPLIFIED_CHINESE equ 000ah
    LGRPID_THAI equ 000bh
    LGRPID_HEBREW equ 000ch
    LGRPID_ARABIC equ 000dh
    LGRPID_VIETNAMESE equ 000eh
    LGRPID_INDIC equ 000fh
    LGRPID_GEORGIAN equ 0010h
    LGRPID_ARMENIAN equ 0011h
    if (WINVER ge 0600h)
      MUI_LANGUAGE_ID equ 4h
      MUI_LANGUAGE_NAME equ 8h
      MUI_MERGE_SYSTEM_FALLBACK equ 10h
      MUI_MERGE_USER_FALLBACK equ 20h
      MUI_UI_FALLBACK equ <MUI_MERGE_SYSTEM_FALLBACK or MUI_MERGE_USER_FALLBACK>
      MUI_THREAD_LANGUAGES equ 40h
      MUI_CONSOLE_FILTER equ 100h
      MUI_COMPLEX_SCRIPT_FILTER equ 200h
      MUI_RESET_FILTERS equ 001h
      MUI_USER_PREFERRED_UI_LANGUAGES equ 10h
      MUI_USE_INSTALLED_LANGUAGES equ 20h
      MUI_USE_SEARCH_ALL_LANGUAGES equ 40h
      MUI_LANG_NEUTRAL_PE_FILE equ 100h
      MUI_NON_LANG_NEUTRAL_FILE equ 200h
      MUI_MACHINE_LANGUAGE_SETTINGS equ 400h
      MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL equ 001h
      MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN equ 002h
      MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI equ 004h
      MUI_QUERY_TYPE equ 001h
      MUI_QUERY_CHECKSUM equ 002h
      MUI_QUERY_LANGUAGE_NAME equ 004h
      MUI_QUERY_RESOURCE_TYPES equ 008h
      MUI_FILEINFO_VERSION equ 001h
      MUI_FULL_LANGUAGE equ 01h
      MUI_PARTIAL_LANGUAGE equ 02h
      MUI_LIP_LANGUAGE equ 04h
      MUI_LANGUAGE_INSTALLED equ 20h
      MUI_LANGUAGE_LICENSED equ 40h
      MUI_CALLBACK_ALL_FLAGS equ <MUI_CALLBACK_FLAG_UPGRADED_INSTALLATION>
    endif
    LGRPID typedef DWORD
    LCTYPE typedef DWORD
    CALTYPE typedef DWORD
    CALID typedef DWORD
    CPINFO struct
      MaxCharSize UINT ?
      DefaultChar BYTE MAX_DEFAULTCHAR dup (?)
      LeadByte BYTE MAX_LEADBYTES dup (?)
    CPINFO ends
    _cpinfo typedef CPINFO
    LPCPINFO typedef ptr CPINFO
    
    CPINFOEXA struct
      MaxCharSize UINT ?
      DefaultChar BYTE MAX_DEFAULTCHAR dup (?)
      LeadByte BYTE MAX_LEADBYTES dup (?)
      UnicodeDefaultChar WCHAR ?
      CodePage UINT ?
      CodePageName CHAR MAX_PATH dup (?)
    CPINFOEXA ends
    _cpinfoexA typedef CPINFOEXA
    LPCPINFOEXA typedef ptr CPINFOEXA
    
    CPINFOEXW struct
      MaxCharSize UINT ?
      DefaultChar BYTE MAX_DEFAULTCHAR dup (?)
      LeadByte BYTE MAX_LEADBYTES dup (?)
      UnicodeDefaultChar WCHAR ?
      CodePage UINT ?
      CodePageName WCHAR MAX_PATH dup (?)
    CPINFOEXW ends
    _cpinfoexW typedef CPINFOEXW
    LPCPINFOEXW typedef ptr CPINFOEXW
    
    ifdef UNICODE
      CPINFOEX typedef CPINFOEXW
      LPCPINFOEX typedef LPCPINFOEXW
    else
      CPINFOEX typedef CPINFOEXA
      LPCPINFOEX typedef LPCPINFOEXA
    endif
    NUMBERFMTA struct
      NumDigits UINT ?
      LeadingZero UINT ?
      Grouping UINT ?
      lpDecimalSep LPSTR ?
      lpThousandSep LPSTR ?
      NegativeOrder UINT ?
    NUMBERFMTA ends
    _numberfmtA typedef NUMBERFMTA
    LPNUMBERFMTA typedef ptr NUMBERFMTA
    
    NUMBERFMTW struct
      NumDigits UINT ?
      LeadingZero UINT ?
      Grouping UINT ?
      lpDecimalSep LPWSTR ?
      lpThousandSep LPWSTR ?
      NegativeOrder UINT ?
    NUMBERFMTW ends
    _numberfmtW typedef NUMBERFMTW
    LPNUMBERFMTW typedef ptr NUMBERFMTW
    
    ifdef UNICODE
      NUMBERFMT typedef NUMBERFMTW
      LPNUMBERFMT typedef LPNUMBERFMTW
    else
      NUMBERFMT typedef NUMBERFMTA
      LPNUMBERFMT typedef LPNUMBERFMTA
    endif
    CURRENCYFMTA struct
      NumDigits UINT ?
      LeadingZero UINT ?
      Grouping UINT ?
      lpDecimalSep LPSTR ?
      lpThousandSep LPSTR ?
      NegativeOrder UINT ?
      PositiveOrder UINT ?
      lpCurrencySymbol LPSTR ?
    CURRENCYFMTA ends
    _currencyfmtA typedef CURRENCYFMTA
    LPCURRENCYFMTA typedef ptr CURRENCYFMTA
    
    CURRENCYFMTW struct
      NumDigits UINT ?
      LeadingZero UINT ?
      Grouping UINT ?
      lpDecimalSep LPWSTR ?
      lpThousandSep LPWSTR ?
      NegativeOrder UINT ?
      PositiveOrder UINT ?
      lpCurrencySymbol LPWSTR ?
    CURRENCYFMTW ends
    _currencyfmtW typedef CURRENCYFMTW
    LPCURRENCYFMTW typedef ptr CURRENCYFMTW
    
    ifdef UNICODE
      CURRENCYFMT typedef CURRENCYFMTW
      LPCURRENCYFMT typedef LPCURRENCYFMTW
    else
      CURRENCYFMT typedef CURRENCYFMTA
      LPCURRENCYFMT typedef LPCURRENCYFMTA
    endif
    SYSNLS_FUNCTION typedef SDWORD
    COMPARE_STRING equ 0001h
    
    NLS_FUNCTION typedef DWORD
    if (WINVER ge _WIN32_WINNT_WIN8)
      NLSVERSIONINFO struct
        dwNLSVersionInfoSize DWORD ?
        dwNLSVersion DWORD ?
        dwDefinedVersion DWORD ?
        dwEffectiveId DWORD ?
        guidCustomVersion GUID <>
      NLSVERSIONINFO ends
      _nlsversioninfo typedef NLSVERSIONINFO
      LPNLSVERSIONINFO typedef ptr NLSVERSIONINFO
      
    else
      NLSVERSIONINFO struct
        dwNLSVersionInfoSize DWORD ?
        dwNLSVersion DWORD ?
        dwDefinedVersion DWORD ?
      NLSVERSIONINFO ends
      _nlsversioninfo typedef NLSVERSIONINFO
      LPNLSVERSIONINFO typedef ptr NLSVERSIONINFO
      
    endif
    NLSVERSIONINFOEX struct
      dwNLSVersionInfoSize DWORD ?
      dwNLSVersion DWORD ?
      dwDefinedVersion DWORD ?
      dwEffectiveId DWORD ?
      guidCustomVersion GUID <>
    NLSVERSIONINFOEX ends
    _nlsversioninfoex typedef NLSVERSIONINFOEX
    LPNLSVERSIONINFOEX typedef ptr NLSVERSIONINFOEX
    
    GEOTYPE typedef DWORD
    GEOCLASS typedef DWORD
    GEOID typedef LONG
    GEOID_NOT_AVAILABLE equ -1
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      GEO_NAME_USER_DEFAULT equ <NULL>
    endif
    SYSGEOTYPE typedef SDWORD
    GEO_NATION equ 0001h
    GEO_LATITUDE equ 0002h
    GEO_LONGITUDE equ 0003h
    GEO_ISO2 equ 0004h
    GEO_ISO3 equ 0005h
    GEO_RFC1766 equ 0006h
    GEO_LCID equ 0007h
    GEO_FRIENDLYNAME equ 0008h
    GEO_OFFICIALNAME equ 0009h
    GEO_TIMEZONES equ 000Ah
    GEO_OFFICIALLANGUAGES equ 000Bh
    GEO_ISO_UN_NUMBER equ 000Ch
    GEO_PARENT equ 000Dh
    GEO_DIALINGCODE equ 000Eh
    GEO_CURRENCYCODE equ 000Fh
    GEO_CURRENCYSYMBOL equ 0010h
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      GEO_NAME equ 0011h
      GEO_ID equ 0012h 
    endif
    
    
    SYSGEOCLASS typedef SDWORD
    GEOCLASS_NATION equ 16
    GEOCLASS_REGION equ 14
    GEOCLASS_ALL equ 0
    
    if (WINVER ge 0600h)
      NORM_FORM typedef SDWORD
      NormalizationOther equ 0
      NormalizationC equ 1h
      NormalizationD equ 2h
      NormalizationKC equ 5h
      NormalizationKD equ 6h
      _NORM_FORM typedef NORM_FORM
      
      IDN_ALLOW_UNASSIGNED equ 01h
      IDN_USE_STD3_ASCII_RULES equ 02h
      IDN_EMAIL_ADDRESS equ 04h
      IDN_RAW_PUNYCODE equ 08h
      VS_ALLOW_LATIN equ 0001h
      GSS_ALLOW_INHERITED_COMMON equ 0001h
    endif
    ifdef STRICT
      LANGUAGEGROUP_ENUMPROCA proto WIN_STD_CALL_CONV :LGRPID, :LPSTR, :LPSTR, :DWORD, :LONG_PTR
      LANGGROUPLOCALE_ENUMPROCA proto WIN_STD_CALL_CONV :LGRPID, :LCID, :LPSTR, :LONG_PTR
      TYPE_UILANGUAGE_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR, :LONG_PTR
      UILANGUAGE_ENUMPROCA typedef ptr TYPE_UILANGUAGE_ENUMPROCA
      TYPE_CODEPAGE_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR
      CODEPAGE_ENUMPROCA typedef ptr TYPE_CODEPAGE_ENUMPROCA
      TYPE_DATEFMT_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR
      DATEFMT_ENUMPROCA typedef ptr TYPE_DATEFMT_ENUMPROCA
      TYPE_DATEFMT_ENUMPROCEXA typedef proto WIN_STD_CALL_CONV :LPSTR, :CALID
      DATEFMT_ENUMPROCEXA typedef ptr TYPE_DATEFMT_ENUMPROCEXA
      TYPE_TIMEFMT_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR
      TIMEFMT_ENUMPROCA typedef ptr TYPE_TIMEFMT_ENUMPROCA
      TYPE_CALINFO_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR
      CALINFO_ENUMPROCA typedef ptr TYPE_CALINFO_ENUMPROCA
      TYPE_CALINFO_ENUMPROCEXA typedef proto WIN_STD_CALL_CONV :LPSTR, :CALID
      CALINFO_ENUMPROCEXA typedef ptr TYPE_CALINFO_ENUMPROCEXA
      TYPE_LOCALE_ENUMPROCA typedef proto WIN_STD_CALL_CONV :LPSTR
      LOCALE_ENUMPROCA typedef ptr TYPE_LOCALE_ENUMPROCA
      TYPE_LOCALE_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR
      LOCALE_ENUMPROCW typedef ptr TYPE_LOCALE_ENUMPROCW
      LANGUAGEGROUP_ENUMPROCW proto WIN_STD_CALL_CONV :LGRPID, :LPWSTR, :LPWSTR, :DWORD, :LONG_PTR
      LANGGROUPLOCALE_ENUMPROCW proto WIN_STD_CALL_CONV :LGRPID, :LCID, :LPWSTR, :LONG_PTR
      TYPE_UILANGUAGE_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR, :LONG_PTR
      UILANGUAGE_ENUMPROCW typedef ptr TYPE_UILANGUAGE_ENUMPROCW
      TYPE_CODEPAGE_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR
      CODEPAGE_ENUMPROCW typedef ptr TYPE_CODEPAGE_ENUMPROCW
      TYPE_DATEFMT_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR
      DATEFMT_ENUMPROCW typedef ptr TYPE_DATEFMT_ENUMPROCW
      TYPE_DATEFMT_ENUMPROCEXW typedef proto WIN_STD_CALL_CONV :LPWSTR, :CALID
      DATEFMT_ENUMPROCEXW typedef ptr TYPE_DATEFMT_ENUMPROCEXW
      TYPE_TIMEFMT_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR
      TIMEFMT_ENUMPROCW typedef ptr TYPE_TIMEFMT_ENUMPROCW
      TYPE_CALINFO_ENUMPROCW typedef proto WIN_STD_CALL_CONV :LPWSTR
      CALINFO_ENUMPROCW typedef ptr TYPE_CALINFO_ENUMPROCW
      TYPE_CALINFO_ENUMPROCEXW typedef proto WIN_STD_CALL_CONV :LPWSTR, :CALID
      CALINFO_ENUMPROCEXW typedef ptr TYPE_CALINFO_ENUMPROCEXW
      TYPE_GEO_ENUMPROC typedef proto WIN_STD_CALL_CONV :GEOID
      GEO_ENUMPROC typedef ptr TYPE_GEO_ENUMPROC
      if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
        TYPE_GEO_ENUMNAMEPROC typedef proto WIN_STD_CALL_CONV :PWSTR, :LPARAM
        GEO_ENUMNAMEPROC typedef ptr TYPE_GEO_ENUMNAMEPROC
      endif
    else
      UILANGUAGE_ENUMPROCA typedef FARPROC
      CODEPAGE_ENUMPROCA typedef FARPROC
      DATEFMT_ENUMPROCA typedef FARPROC
      DATEFMT_ENUMPROCEXA typedef FARPROC
      TIMEFMT_ENUMPROCA typedef FARPROC
      CALINFO_ENUMPROCA typedef FARPROC
      CALINFO_ENUMPROCEXA typedef FARPROC
      GEO_ENUMPROC typedef FARPROC
      LOCALE_ENUMPROCA typedef FARPROC
      LOCALE_ENUMPROCW typedef FARPROC
      UILANGUAGE_ENUMPROCW typedef FARPROC
      CODEPAGE_ENUMPROCW typedef FARPROC
      DATEFMT_ENUMPROCW typedef FARPROC
      DATEFMT_ENUMPROCEXW typedef FARPROC
      TIMEFMT_ENUMPROCW typedef FARPROC
      CALINFO_ENUMPROCW typedef FARPROC
      CALINFO_ENUMPROCEXW typedef FARPROC
      if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
        GEO_ENUMNAMEPROC typedef FARPROC
      endif
    endif
    ifdef UNICODE
      LANGUAGEGROUP_ENUMPROC equ <LANGUAGEGROUP_ENUMPROCW>
      LANGGROUPLOCALE_ENUMPROC equ <LANGGROUPLOCALE_ENUMPROCW>
      UILANGUAGE_ENUMPROC equ <UILANGUAGE_ENUMPROCW>
      CODEPAGE_ENUMPROC equ <CODEPAGE_ENUMPROCW>
      DATEFMT_ENUMPROC equ <DATEFMT_ENUMPROCW>
      DATEFMT_ENUMPROCEX equ <DATEFMT_ENUMPROCEXW>
      TIMEFMT_ENUMPROC equ <TIMEFMT_ENUMPROCW>
      CALINFO_ENUMPROC equ <CALINFO_ENUMPROCW>
      CALINFO_ENUMPROCEX equ <CALINFO_ENUMPROCEXW>
      LOCALE_ENUMPROC equ <LOCALE_ENUMPROCW>
    else
      LANGUAGEGROUP_ENUMPROC equ <LANGUAGEGROUP_ENUMPROCA>
      LANGGROUPLOCALE_ENUMPROC equ <LANGGROUPLOCALE_ENUMPROCA>
      UILANGUAGE_ENUMPROC equ <UILANGUAGE_ENUMPROCA>
      CODEPAGE_ENUMPROC equ <CODEPAGE_ENUMPROCA>
      DATEFMT_ENUMPROC equ <DATEFMT_ENUMPROCA>
      DATEFMT_ENUMPROCEX equ <DATEFMT_ENUMPROCEXA>
      TIMEFMT_ENUMPROC equ <TIMEFMT_ENUMPROCA>
      CALINFO_ENUMPROC equ <CALINFO_ENUMPROCA>
      CALINFO_ENUMPROCEX equ <CALINFO_ENUMPROCEXA>
      LOCALE_ENUMPROC equ <LOCALE_ENUMPROCA>
    endif
    FILEMUIINFO struct
      dwSize DWORD ?
      dwVersion DWORD ?
      dwFileType DWORD ?
      pChecksum BYTE 16 dup (?)
      pServiceChecksum BYTE 16 dup (?)
      dwLanguageNameOffset DWORD ?
      dwTypeIDMainSize DWORD ?
      dwTypeIDMainOffset DWORD ?
      dwTypeNameMainOffset DWORD ?
      dwTypeIDMUISize DWORD ?
      dwTypeIDMUIOffset DWORD ?
      dwTypeNameMUIOffset DWORD ?
      abBuffer BYTE 8 dup (?)
    FILEMUIINFO ends
    _FILEMUIINFO typedef FILEMUIINFO
    PFILEMUIINFO typedef ptr FILEMUIINFO
    
    ifndef NOAPISET
      include stringapiset.inc
    endif
    IS_HIGH_SURROGATE macro wch
      exitm <(((wch) >= HIGH_SURROGATE_START) and ((wch) <= HIGH_SURROGATE_END))>
    endm
    IS_LOW_SURROGATE macro wch
      exitm <(((wch) >= LOW_SURROGATE_START) and ((wch) <= LOW_SURROGATE_END))>
    endm
    IS_SURROGATE_PAIR macro hs, ls
      exitm <(IS_HIGH_SURROGATE(hs) and IS_LOW_SURROGATE(ls))>
    endm
    FILEMUIINFO_GET_CULTURE macro pInfo
      exitm <(((pInfo - dwLanguageNameOffset > 0) ? (ULONG_PTR) pInfo + pInfo - dwLanguageNameOffset : NULL))>
    endm
    FILEMUIINFO_GET_MAIN_TYPEIDS macro pInfo
      exitm <(((pInfo - dwTypeIDMainOffset > 0) ? (ULONG_PTR) pInfo + pInfo - dwTypeIDMainOffset : NULL))>
    endm
    FILEMUIINFO_GET_MAIN_TYPEID macro pInfo, iType
      exitm <(((iType < pInfo - dwTypeIDMainSize) and (pInfo - dwTypeIDMainOffset > 0)) ? * ((pInfo + pInfo - dwTypeIDMainOffset) + iType) : 0)>
    endm
    FILEMUIINFO_GET_MAIN_TYPENAMES macro pInfo
      exitm <(((pInfo - dwTypeNameMainOffset > 0) ? (ULONG_PTR) pInfo + pInfo - dwTypeNameMainOffset : NULL))>
    endm
    FILEMUIINFO_GET_MUI_TYPEIDS macro pInfo
      exitm <(((pInfo - dwTypeIDMUIOffset > 0) ? (ULONG_PTR) pInfo + pInfo - dwTypeIDMUIOffset : NULL))>
    endm
    FILEMUIINFO_GET_MUI_TYPEID macro pInfo, iType
      exitm <(((iType < pInfo - dwTypeIDMUISize) and (pInfo - dwTypeIDMUIOffset > 0)) ? * ((pInfo + pInfo - dwTypeIDMUIOffset) + iType) : 0)>
    endm
    FILEMUIINFO_GET_MUI_TYPENAMES macro pInfo
      exitm <(((pInfo - dwTypeNameMUIOffset > 0) ? (ULONG_PTR) pInfo + pInfo - dwTypeNameMUIOffset : NULL))>
    endm
    @DefProto DllImport, IsValidCodePage, WIN_STD_CALL_CONV,, <:UINT>, 4
    @DefProto DllImport, GetACP, WIN_STD_CALL_CONV,, <>, 0
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetOEMCP, WIN_STD_CALL_CONV,, <>, 0
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
    GetCPInfo proto WIN_STD_CALL_CONV :UINT, :LPCPINFO
    GetCPInfoExA proto WIN_STD_CALL_CONV :UINT, :DWORD, :LPCPINFOEXA
    GetCPInfoExW proto WIN_STD_CALL_CONV :UINT, :DWORD, :LPCPINFOEXW
    ifdef UNICODE
      GetCPInfoEx equ <GetCPInfoExW>
    else
      GetCPInfoEx equ <GetCPInfoExA>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, CompareStringA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :PCNZCH, :SDWORD, :PCNZCH, :SDWORD>, 24
    ifndef UNICODE
      CompareString equ <CompareStringA>
    endif
    if Defined(_M_CEE)
      ;[...]
    endif
    if (WINVER ge 0600h)
      @DefProto DllImport, FindNLSString, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCWSTR, :SDWORD, :LPCWSTR, :SDWORD, :LPINT>, 28
    endif
    @DefProto DllImport, LCMapStringW, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 24
    ifdef UNICODE
      LCMapString equ <LCMapStringW>
    endif
    @DefProto DllImport, LCMapStringA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCSTR, :SDWORD, :LPSTR, :SDWORD>, 24
    ifndef UNICODE
      LCMapString equ <LCMapStringA>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetLocaleInfoW, WIN_STD_CALL_CONV,, <:LCID, :LCTYPE, :LPWSTR, :SDWORD>, 16
    ifdef UNICODE
      GetLocaleInfo equ <GetLocaleInfoW>
    endif
    @DefProto DllImport, GetLocaleInfoA, WIN_STD_CALL_CONV,, <:LCID, :LCTYPE, :LPSTR, :SDWORD>, 16
    ifndef UNICODE
      GetLocaleInfo equ <GetLocaleInfoA>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, SetLocaleInfoA, WIN_STD_CALL_CONV,, <:LCID, :LCTYPE, :LPCSTR>, 12
    @DefProto DllImport, SetLocaleInfoW, WIN_STD_CALL_CONV,, <:LCID, :LCTYPE, :LPCWSTR>, 12
    ifdef UNICODE
      SetLocaleInfo equ <SetLocaleInfoW>
    else
      SetLocaleInfo equ <SetLocaleInfoA>
    endif
    if (WINVER ge 040Ah)
      @DefProto DllImport, GetCalendarInfoA, WIN_STD_CALL_CONV,, <:LCID, :CALID, :CALTYPE, :LPSTR, :SDWORD, :LPDWORD>, 24
      @DefProto DllImport, GetCalendarInfoW, WIN_STD_CALL_CONV,, <:LCID, :CALID, :CALTYPE, :LPWSTR, :SDWORD, :LPDWORD>, 24
      ifdef UNICODE
        GetCalendarInfo equ <GetCalendarInfoW>
      else
        GetCalendarInfo equ <GetCalendarInfoA>
      endif
      @DefProto DllImport, SetCalendarInfoA, WIN_STD_CALL_CONV,, <:LCID, :CALID, :CALTYPE, :LPCSTR>, 16
      @DefProto DllImport, SetCalendarInfoW, WIN_STD_CALL_CONV,, <:LCID, :CALID, :CALTYPE, :LPCWSTR>, 16
      ifdef UNICODE
        SetCalendarInfo equ <SetCalendarInfoW>
      else
        SetCalendarInfo equ <SetCalendarInfoA>
      endif
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if (WINVER ge _WIN32_WINNT_WIN7)
      MUI_FORMAT_REG_COMPAT equ 0001h
      MUI_FORMAT_INF_COMPAT equ 0002h
      MUI_VERIFY_FILE_EXISTS equ 0004h
      MUI_SKIP_STRING_CACHE equ 0008h
      MUI_IMMUTABLE_LOOKUP equ 0010h
      @DefProto DllImport, LoadStringByReference, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR, :PCWSTR, :PWSTR, :ULONG, :PCWSTR, :PULONG>, 28
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    IsDBCSLeadByte proto WIN_STD_CALL_CONV :BYTE
    IsDBCSLeadByteEx proto WIN_STD_CALL_CONV :UINT, :BYTE
    if (WINVER ge 0600h)
      @DefProto DllImport, LCIDToLocaleName, WIN_STD_CALL_CONV,, <:LCID, :LPWSTR, :SDWORD, :DWORD>, 16
      @DefProto DllImport, LocaleNameToLCID, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD>, 8
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if (WINVER ge 0600h)
      @DefProto DllImport, GetDurationFormat, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :ptr SYSTEMTIME, :ULONGLONG, :LPCWSTR, :LPWSTR, :SDWORD>, 32
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetNumberFormatA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCSTR, :ptr NUMBERFMTA, :LPSTR, :SDWORD>, 24
    @DefProto DllImport, GetNumberFormatW, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCWSTR, :ptr NUMBERFMTW, :LPWSTR, :SDWORD>, 24
    ifdef UNICODE
      GetNumberFormat equ <GetNumberFormatW>
    else
      GetNumberFormat equ <GetNumberFormatA>
    endif
    @DefProto DllImport, GetCurrencyFormatA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCSTR, :ptr CURRENCYFMTA, :LPSTR, :SDWORD>, 24
    @DefProto DllImport, GetCurrencyFormatW, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCWSTR, :ptr CURRENCYFMTW, :LPWSTR, :SDWORD>, 24
    ifdef UNICODE
      GetCurrencyFormat equ <GetCurrencyFormatW>
    else
      GetCurrencyFormat equ <GetCurrencyFormatA>
    endif
    @DefProto DllImport, EnumCalendarInfoA, WIN_STD_CALL_CONV,, <:CALINFO_ENUMPROCA, :LCID, :CALID, :CALTYPE>, 16
    @DefProto DllImport, EnumCalendarInfoW, WIN_STD_CALL_CONV,, <:CALINFO_ENUMPROCW, :LCID, :CALID, :CALTYPE>, 16
    ifdef UNICODE
      EnumCalendarInfo equ <EnumCalendarInfoW>
    else
      EnumCalendarInfo equ <EnumCalendarInfoA>
    endif
    if (WINVER ge 0500h)
      @DefProto DllImport, EnumCalendarInfoExA, WIN_STD_CALL_CONV,, <:CALINFO_ENUMPROCEXA, :LCID, :CALID, :CALTYPE>, 16
      @DefProto DllImport, EnumCalendarInfoExW, WIN_STD_CALL_CONV,, <:CALINFO_ENUMPROCEXW, :LCID, :CALID, :CALTYPE>, 16
      ifdef UNICODE
        EnumCalendarInfoEx equ <EnumCalendarInfoExW>
      else
        EnumCalendarInfoEx equ <EnumCalendarInfoExA>
      endif
    endif
    @DefProto DllImport, EnumTimeFormatsA, WIN_STD_CALL_CONV,, <:TIMEFMT_ENUMPROCA, :LCID, :DWORD>, 12
    @DefProto DllImport, EnumTimeFormatsW, WIN_STD_CALL_CONV,, <:TIMEFMT_ENUMPROCW, :LCID, :DWORD>, 12
    ifdef UNICODE
      EnumTimeFormats equ <EnumTimeFormatsW>
    else
      EnumTimeFormats equ <EnumTimeFormatsA>
    endif
    @DefProto DllImport, EnumDateFormatsA, WIN_STD_CALL_CONV,, <:DATEFMT_ENUMPROCA, :LCID, :DWORD>, 12
    @DefProto DllImport, EnumDateFormatsW, WIN_STD_CALL_CONV,, <:DATEFMT_ENUMPROCW, :LCID, :DWORD>, 12
    ifdef UNICODE
      EnumDateFormats equ <EnumDateFormatsW>
    else
      EnumDateFormats equ <EnumDateFormatsA>
    endif
    if (WINVER ge 0500h)
      @DefProto DllImport, EnumDateFormatsExA, WIN_STD_CALL_CONV,, <:DATEFMT_ENUMPROCEXA, :LCID, :DWORD>, 12
      @DefProto DllImport, EnumDateFormatsExW, WIN_STD_CALL_CONV,, <:DATEFMT_ENUMPROCEXW, :LCID, :DWORD>, 12
      ifdef UNICODE
        EnumDateFormatsEx equ <EnumDateFormatsExW>
      else
        EnumDateFormatsEx equ <EnumDateFormatsExA>
      endif
    endif
    if (WINVER ge 0500h)
      IsValidLanguageGroup proto WIN_STD_CALL_CONV :LGRPID, :DWORD
    endif
    @DefProto DllImport, GetNLSVersion, WIN_STD_CALL_CONV,, <:NLS_FUNCTION, :LCID, :LPNLSVERSIONINFO>, 12
    @DefProto DllImport, IsValidLocale, WIN_STD_CALL_CONV,, <:LCID, :DWORD>, 8
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetGeoInfoA, WIN_STD_CALL_CONV,, <:GEOID, :GEOTYPE, :LPSTR, :SDWORD, :LANGID>, 20
    @DefProto DllImport, GetGeoInfoW, WIN_STD_CALL_CONV,, <:GEOID, :GEOTYPE, :LPWSTR, :SDWORD, :LANGID>, 20
    ifdef UNICODE
      GetGeoInfo equ <GetGeoInfoW>
    else
      GetGeoInfo equ <GetGeoInfoA>
    endif
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      @DefProto DllImport, GetGeoInfoEx, WIN_STD_CALL_CONV,, <:PWSTR, :GEOTYPE, :PWSTR, :SDWORD>, 16
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, EnumSystemGeoID, WIN_STD_CALL_CONV,, <:GEOCLASS, :GEOID, :GEO_ENUMPROC>, 12
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      @DefProto DllImport, EnumSystemGeoNames, WIN_STD_CALL_CONV,, <:GEOCLASS, :GEO_ENUMNAMEPROC, :LPARAM>, 12
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetUserGeoID, WIN_STD_CALL_CONV,, <:GEOCLASS>, 4
    @DefProto DllImport, GetUserDefaultGeoName, WIN_STD_CALL_CONV,, <:LPWSTR, :SDWORD>, 8
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, SetUserGeoID, WIN_STD_CALL_CONV,, <:GEOID>, 4
    if (NTDDI_VERSION ge NTDDI_WIN10_RS3)
      @DefProto DllImport, SetUserGeoName, WIN_STD_CALL_CONV,, <:PWSTR>, 4
    endif
    @DefProto DllImport, ConvertDefaultLocale, WIN_STD_CALL_CONV,, <:LCID>, 4
    @DefProto DllImport, GetThreadLocale, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, SetThreadLocale, WIN_STD_CALL_CONV,, <:LCID>, 4
    if (WINVER ge 0500h)
      @DefProto DllImport, GetSystemDefaultUILanguage, WIN_STD_CALL_CONV,, <>, 0
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, GetUserDefaultUILanguage, WIN_STD_CALL_CONV,, <>, 0
    endif
    @DefProto DllImport, GetUserDefaultLangID, WIN_STD_CALL_CONV,, <>, 0
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetSystemDefaultLangID, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, GetSystemDefaultLCID, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, GetUserDefaultLCID, WIN_STD_CALL_CONV,, <>, 0
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, SetThreadUILanguage, WIN_STD_CALL_CONV,, <:LANGID>, 4
    if (WINVER ge 0600h)
      @DefProto DllImport, GetThreadUILanguage, WIN_STD_CALL_CONV,, <>, 0
      @DefProto DllImport, GetProcessPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PULONG, :PZZWSTR, :PULONG>, 16
      @DefProto DllImport, SetProcessPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PCZZWSTR, :PULONG>, 12
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PHONE_APP or WINAPI_PARTITION_SYSTEM)
    if (WINVER ge 0600h)
      @DefProto DllImport, GetUserPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PULONG, :PZZWSTR, :PULONG>, 16
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    if (WINVER ge 0600h)
      @DefProto DllImport, GetSystemPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PULONG, :PZZWSTR, :PULONG>, 16
      @DefProto DllImport, GetThreadPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PULONG, :PZZWSTR, :PULONG>, 16
      @DefProto DllImport, SetThreadPreferredUILanguages, WIN_STD_CALL_CONV,, <:DWORD, :PCZZWSTR, :PULONG>, 12
      @DefProto DllImport, GetFileMUIInfo, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR, :PFILEMUIINFO, :ptr DWORD>, 16
      @DefProto DllImport, GetFileMUIPath, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR, :PWSTR, :PULONG, :PWSTR, :PULONG, :PULONGLONG>, 28
      @DefProto DllImport, GetUILanguageInfo, WIN_STD_CALL_CONV,, <:DWORD, :PCZZWSTR, :PZZWSTR, :PDWORD, :PDWORD>, 20
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if (WINVER ge 0600h)
      @DefProto DllImport, NotifyUILanguageChange, WIN_STD_CALL_CONV,, <:DWORD, :PCWSTR, :PCWSTR, :DWORD, :PDWORD>, 20
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetStringTypeExA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCSTR, :SDWORD, :LPWORD>, 20
    ifndef UNICODE
      GetStringTypeEx equ <GetStringTypeExA>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, GetStringTypeA, WIN_STD_CALL_CONV,, <:LCID, :DWORD, :LPCSTR, :SDWORD, :LPWORD>, 20
    @DefProto DllImport, FoldStringA, WIN_STD_CALL_CONV,, <:DWORD, :LPCSTR, :SDWORD, :LPSTR, :SDWORD>, 20
    ifndef UNICODE
      FoldString equ <FoldStringA>
    endif
    if (WINVER ge 0500h)
      @DefProto DllImport, EnumSystemLocalesA, WIN_STD_CALL_CONV,, <:LOCALE_ENUMPROCA, :DWORD>, 8
      @DefProto DllImport, EnumSystemLocalesW, WIN_STD_CALL_CONV,, <:LOCALE_ENUMPROCW, :DWORD>, 8
      ifdef UNICODE
        EnumSystemLocales equ <EnumSystemLocalesW>
      else
        EnumSystemLocales equ <EnumSystemLocalesA>
      endif
    endif
    if (WINVER ge 0500h)
      EnumSystemLanguageGroupsA proto WIN_STD_CALL_CONV :POINTER, :DWORD, :LONG_PTR
      EnumSystemLanguageGroupsW proto WIN_STD_CALL_CONV :POINTER, :DWORD, :LONG_PTR
      ifdef UNICODE
        EnumSystemLanguageGroups equ <EnumSystemLanguageGroupsW>
      else
        EnumSystemLanguageGroups equ <EnumSystemLanguageGroupsA>
      endif
      EnumLanguageGroupLocalesA proto WIN_STD_CALL_CONV :POINTER, :LGRPID, :DWORD, :LONG_PTR
      EnumLanguageGroupLocalesW proto WIN_STD_CALL_CONV :POINTER, :LGRPID, :DWORD, :LONG_PTR
      ifdef UNICODE
        EnumLanguageGroupLocales equ <EnumLanguageGroupLocalesW>
      else
        EnumLanguageGroupLocales equ <EnumLanguageGroupLocalesA>
      endif
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, EnumUILanguagesA, WIN_STD_CALL_CONV,, <:UILANGUAGE_ENUMPROCA, :DWORD, :LONG_PTR>, 16
      @DefProto DllImport, EnumUILanguagesW, WIN_STD_CALL_CONV,, <:UILANGUAGE_ENUMPROCW, :DWORD, :LONG_PTR>, 16
      ifdef UNICODE
        EnumUILanguages equ <EnumUILanguagesW>
      else
        EnumUILanguages equ <EnumUILanguagesA>
      endif
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, EnumSystemCodePagesA, WIN_STD_CALL_CONV,, <:CODEPAGE_ENUMPROCA, :DWORD>, 8
    @DefProto DllImport, EnumSystemCodePagesW, WIN_STD_CALL_CONV,, <:CODEPAGE_ENUMPROCW, :DWORD>, 8
    ifdef UNICODE
      EnumSystemCodePages equ <EnumSystemCodePagesW>
    else
      EnumSystemCodePages equ <EnumSystemCodePagesA>
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    if (WINVER ge 0600h)
      @DefProto DllImport, NormalizeString, WIN_STD_CALL_CONV,, <:NORM_FORM, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 20
      @DefProto DllImport, IsNormalizedString, WIN_STD_CALL_CONV,, <:NORM_FORM, :LPCWSTR, :SDWORD>, 12
    endif
    if (WINVER ge 0600h)
      @DefProto DllImport, IdnToAscii, WIN_STD_CALL_CONV,, <:DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 20
    endif
    if (WINVER ge 0600h)
      @DefProto DllImport, IdnToNameprepUnicode, WIN_STD_CALL_CONV,, <:DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 20
    endif
    if (WINVER ge 0600h)
      @DefProto DllImport, IdnToUnicode, WIN_STD_CALL_CONV,, <:DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 20
    endif
    if (WINVER ge 0600h)
      @DefProto DllImport, VerifyScripts, WIN_STD_CALL_CONV,, <:DWORD, :LPCWSTR, :SDWORD, :LPCWSTR, :SDWORD>, 20
      @DefProto DllImport, GetStringScripts, WIN_STD_CALL_CONV,, <:DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD>, 20
    endif
  endif
  if (WINVER ge 0600h)
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      LOCALE_NAME_USER_DEFAULT equ <NULL>
      LOCALE_NAME_INVARIANT equ <L()>
      LOCALE_NAME_SYSTEM_DEFAULT equ <L("!x-sys-default-locale")>
      @DefProto DllImport, GetLocaleInfoEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :LCTYPE, :LPWSTR, :SDWORD>, 16
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, GetCalendarInfoEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :CALID, :LPCWSTR, :CALTYPE, :LPWSTR, :SDWORD, :LPDWORD>, 28
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      ifndef GetDurationFormatEx_DEFINED
        @DefProto DllImport, GetDurationFormatEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :ptr SYSTEMTIME, :ULONGLONG, :LPCWSTR, :LPWSTR, :SDWORD>, 32
      endif
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, GetNumberFormatEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :LPCWSTR, :ptr NUMBERFMTW, :LPWSTR, :SDWORD>, 24
      @DefProto DllImport, GetCurrencyFormatEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :LPCWSTR, :ptr CURRENCYFMTW, :LPWSTR, :SDWORD>, 24
      @DefProto DllImport, GetUserDefaultLocaleName, WIN_STD_CALL_CONV,, <:LPWSTR, :SDWORD>, 8
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, GetSystemDefaultLocaleName, WIN_STD_CALL_CONV,, <:LPWSTR, :SDWORD>, 8
      @DefProto DllImport, IsNLSDefinedString, WIN_STD_CALL_CONV,, <:NLS_FUNCTION, :DWORD, :LPNLSVERSIONINFO, :LPCWSTR, :INT_>, 20
      @DefProto DllImport, GetNLSVersionEx, WIN_STD_CALL_CONV,, <:NLS_FUNCTION, :LPCWSTR, :LPNLSVERSIONINFOEX>, 12
      if (WINVER ge _WIN32_WINNT_WIN8)
        @DefProto DllImport, IsValidNLSVersion, WIN_STD_CALL_CONV,, <:NLS_FUNCTION, :LPCWSTR, :LPNLSVERSIONINFOEX>, 12
      endif
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, FindNLSStringEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :LPCWSTR, :SDWORD, :LPCWSTR, :SDWORD, :LPINT, :LPNLSVERSIONINFO, :LPVOID, :LPARAM>, 40
      if (WINVER ge _WIN32_WINNT_WIN8)
      else
      endif
      @DefProto DllImport, LCMapStringEx, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :LPCWSTR, :SDWORD, :LPWSTR, :SDWORD, :LPNLSVERSIONINFO, :LPVOID, :LPARAM>, 36
      @DefProto DllImport, IsValidLocaleName, WIN_STD_CALL_CONV,, <:LPCWSTR>, 4
    endif
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_PC_APP or WINAPI_PARTITION_SYSTEM)
      TYPE_CALINFO_ENUMPROCEXEX typedef proto WIN_STD_CALL_CONV :LPWSTR, :CALID, :LPWSTR, :LPARAM
      CALINFO_ENUMPROCEXEX typedef ptr TYPE_CALINFO_ENUMPROCEXEX
      @DefProto DllImport, EnumCalendarInfoExEx, WIN_STD_CALL_CONV,, <:CALINFO_ENUMPROCEXEX, :LPCWSTR, :CALID, :LPCWSTR, :CALTYPE, :LPARAM>, 24
      TYPE_DATEFMT_ENUMPROCEXEX typedef proto WIN_STD_CALL_CONV :LPWSTR, :CALID, :LPARAM
      DATEFMT_ENUMPROCEXEX typedef ptr TYPE_DATEFMT_ENUMPROCEXEX
      @DefProto DllImport, EnumDateFormatsExEx, WIN_STD_CALL_CONV,, <:DATEFMT_ENUMPROCEXEX, :LPCWSTR, :DWORD, :LPARAM>, 16
      TYPE_TIMEFMT_ENUMPROCEX typedef proto WIN_STD_CALL_CONV :LPWSTR, :LPARAM
      TIMEFMT_ENUMPROCEX typedef ptr TYPE_TIMEFMT_ENUMPROCEX
      @DefProto DllImport, EnumTimeFormatsEx, WIN_STD_CALL_CONV,, <:TIMEFMT_ENUMPROCEX, :LPCWSTR, :DWORD, :LPARAM>, 16
      TYPE_LOCALE_ENUMPROCEX typedef proto WIN_STD_CALL_CONV :LPWSTR, :DWORD, :LPARAM
      LOCALE_ENUMPROCEX typedef ptr TYPE_LOCALE_ENUMPROCEX
      @DefProto DllImport, EnumSystemLocalesEx, WIN_STD_CALL_CONV,, <:LOCALE_ENUMPROCEX, :DWORD, :LPARAM, :LPVOID>, 16
    endif
  endif
  if (WINVER ge _WIN32_WINNT_WIN7)
    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
      @DefProto DllImport, ResolveLocaleName, WIN_STD_CALL_CONV,, <:LPCWSTR, :LPWSTR, :SDWORD>, 12
    endif
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
  endif
endif
if _MSC_VER ge 1200
endif
ifdef __cplusplus
  ;[...]
endif
endif

