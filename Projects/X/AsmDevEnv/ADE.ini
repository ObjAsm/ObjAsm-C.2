[Identification]
Description=Assembler Development Environment - MASM configuration file
Version=1.0

[GUI]
;Language options: EN, DE, IT, RU, ES
Language=EN
;Options: ASM, RES, TXT
NewFileTypeDefault=ASM
;Format: Foreground color, background color, line color
PrjMgrColors=000:000:000,240:240:240,000:000:000
PrjMgrWidth=250


[Groups]
;0: Project name, 1..n: Groups
0=Solution
1=Tools
2=Make
3=Added
4=Assembly
5=Macros
6=Include
7=Objects
8=Miscellaneous
9=Resources

[File Types]
;Format: File extension, Content type, File encoding
;Content: ASM, RES, TXT
;Encoding: ANSI, UTF8, UTF8BOM, UTF16BOM.
FT1=rc,RES,UTF16BOM
FT2=asm,ASM,ANSI
FT3=inc,ASM,ANSI
FT4=txt,TXT,ANSI
FT5=ps1,TXT,UTF8
FT6=cmd,TXT,ANSI
FT7=bat,TXT,ANSI
FT8=ini,TXT,ANSI
FT9=log,TXT,ANSI
FT10=xml,TXT,UTF8
FT11=xms,TXT,UTF8
FT12=json,TXT,UTF8
FT13=md,TXT,ANSI
FT14=c,TXT,ANSI
FT15=cpp,TXT,UTF8
FT16=h,TXT,UTF8
FT17=script,TXT,UTF8
FT18=html,TXT,UTF8
FT19=htm,TXT,UTF8
FT20=css,TXT,UTF8
FT21=adp,TXT,UTF8
Percieved=Text,TXT,ANSI

[Print]
Font=Lucida Console,10
Margins=20,20,10,10

; ==============================================================

;Font format: Monospaced Font family name, Size in points (e.g. Lucida Console,16 / Liberation Mono,11 / Consolas,13 / etc.)
;Text format: Foreground Color, Background Color, Font Emphasis
;  Foreground color format: RRR:GGG:BBB  each component must be less than 256
;  Background color format: RRR:GGG:BBB  if ommited, the default background is used
;  Font Emphasis: BOLD, ITALIC or UNDERLINE. A combination can be specified using the "|" operator (e.g. BOLD|ITALIC)

[ASM Editor]
Font=Lucida Console,13
Background= 000:000:048
Regular=    255:255:255,,
Select=     192:255:192,000:128:000,
Highlight=  255:255:192,160:160:128,
Quote=      191:191:255,000:000:255,
Comment=    192:192:255,064:064:064
Number=     255:000:000,,
Operator=   000:255:000,,
LineSpace=  2
TabWidth=   2
Tab2Spaces= ON
AlignTabs=  5,10,57,100
AlignLines= ON
ReverseHorzMouseWheelRotation = OFF
ReverseVertMouseWheelRotation = OFF
LineTermination = CRLF

[ASM Selection Bar]
Font=Lucida Console,10
Regular=    200:200:200,096:096:112,
Select=     000:000:000,064:160:064,

[ASM Status Panel]
Font=Lucida Console,8
Regular=    192:192:192,064:064:064,

[ASM Keywords]
;Formats:
;  ATTR: Foreground Color, Background Color, Font Format, Description
;    Foreground color format: RRR:GGG:BBB  each component must be less than 256
;    Background color format: RRR:GGG:BBB  if ommited, the editor background is used
;    Font emphasis: BOLD, ITALIC or UNDERLINE. A combination can be specified using the "|" operator (e.g. BOLD|ITALIC)
;    Description: Group identifier string
;  CONT: comma separated list
;    Keyword prefix: ^ for case sensitive, ~ for case convert
KWG0_ATTR=255:000:255,,,CPU x86 general purpose registers
KWG0_CONT=AH,AL,AX,BH,BL,BP,BX,CH,CL,CS,CX,DH,DI,DL,DS,DX,EAX,EBP,EBX,ECX,EDI,EDX,EIP,ES,ESI,ESP,FS,GS,SI,SP,SS,EFLAGS
KWG1_ATTR=255:000:169,,,CPU x64 general purpose registers
KWG1_CONT=RAX,RBX,RBP,RCX,RDX,RDI,RSI,RSP,RIP,R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,RFLAGS,R0B,R1B,R2B,R3B,R4B,R5B,R6B,R7B,R8B,R9B,R10B,R11B,R12B,R13B,R14B,R15B,R0D,R1D,R2D,R3D,R4D,R5D,R6D,R7D,R8D,R9D,R10D,R11D,R12D,R13D,R14D,R15D,R0W,R1W,R2W,R3W,R4W,R5W,R6W,R7W,R8W,R9W,R10W,R11W,R12W,R13W,R14W,R15W,SIL,DIL,BPL,SPL
KWG2_ATTR=255:169:084,,,CPU macro general purpose registers
KWG2_CONT=XAX,XBX,XBP,XCX,XDX,XDI,XSI,XSP,XIP
KWG3_ATTR=169:000:255,,,CPU Extended registers
KWG3_CONT=XMM0,XMM1,XMM2,XMM3,XMM4,XMM5,XMM6,XMM7,XMM8,XMM9,XMM10,XMM11,XMM12,XMM13,XMM14,XMM15,YMM0,YMM1,YMM2,YMM3,YMM4,YMM5,YMM6,YMM7,YMM8,YMM9,YMM10,YMM11,YMM12,YMM13,YMM14,YMM15
KWG4_ATTR=255:000:000,,,CPU special registers
KWG4_CONT=CR0,CR2,CR3,CR4,DR0,DR1,DR2,DR3,DR6,DR7,TR3,TR4,TR5,TR6,TR7,GDTR,LDTR,IDTR,EFER
KWG5_ATTR=000:127:255,,,FPU registers
KWG5_CONT=ST,MM0,MM1,MM2,MM3,MM4,MM5,MM6,MM7
KWG6_ATTR=081:145:145,,,CPU instructions
KWG6_CONT=AAA,AAD,AAM,AAS,ADC,ADD,AND,ARPL,BOUND,BSF,BSR,BSWAP,BT,BTC,BTR,BTS,CALL,CBW,CDQ,CLC,CLD,CLI,CLTS,CMC,CMOVA,CMOVAE,CMOVB,CMOVBE,CMOVC,CMOVE,CMOVG,CMOVGE,CMOVL,CMOVLE,CMOVNA,CMOVNAE,CMOVNB,CMOVNBE,CMOVNC,CMOVNE,CMOVNG,CMOVNGE,CMOVNL,CMOVNLE,CMOVNO,CMOVNP,CMOVNS,CMOVNZ,CMOVO,CMOVP,CMOVPE,CMOVPO,CMOVS,CMOVZ,CMP,CMPS,CMPSB,CMPSD,CMPSW,CMPXCHG,CMPXCHG8B,CPUID,CWD,CWDE,DAS,DEC,DIV,DAA,ENTER,HLT,IDIV,IMUL,IN,INC,INS,INSB,INSD,INSW,INT,INTO,INVD,INVLPG,IRET,IRETD,IRETDF,IRETF,JA,JAE,JB,JBE,JC,JCXZ,JE,JECXZ,JG,JGE,JL,JLE,JMP,JNA,JNAE,JNB,JNBE,JNC,JNE,JNG,JNGE,JNL,JNLE,JNO,JNP,JNS,JNZ,JO,JP,JPE,JPO,JS,JZ,LAHF,LAR,LDS,LEA,LEAVE,LES,LFS,LGDT,LGS,LIDT,LLDT,LMSW,LOCK,LODS,LODSB,LODSD,LODSW,LOOP,LOOPD,LOOPE,LOOPED,LOOPEW,LOOPNE,LOOPNED,LOOPNEW,LOOPNZ,LOOPNZD,LOOPNZW,LOOPW,LOOPZ,LOOPZD,LOOPZW,LSL,LSS,LTR,MOV,MOVS,MOVSB,MOVSD,MOVSW,MOVSX,MOVZX,MUL,NEG,NOP,NOT,OR,OUT,OUTS,OUTSB,OUTSD,OUTSW,POP,POPA,POPAD,POPF,POPFD,PUSH,PUSHA,PUSHAD,PUSHAW,PUSHD,PUSHF,PUSHFD,PUSHW,RCL,RCR,RDMSR,RDTSC,REP,REPE,REPNE,REPNZ,REPZ,RET,RETF,RETN,ROL,ROR,RSM,SAHF,SAL,SAR,SBB,SCAS,SCASB,SCASD,SCASW,SETA,SETAE,SETB,SETBE,SETC,SETE,SETG,SETGE,SETL,SETLE,SETNA,SETNAE,SETNB,SETNBE,SETNC,SETNE,SETNG,SETNGE,SETNL,SETNLE,SETNO,SETNP,SETNS,SETNZ,SETO,SETP,SETPE,SETPO,SETS,SETZ,SGDT,SHL,SHLD,SHR,SHRD,SIDT,SLDT,SMSW,STC,STD,STI,STOS,STOSB,STOSD,STOSW,STR,SUB,TEST,VERR,VERW,WAIT,WBINVD,WRMSR,XADD,XCHG,XLAT,XLATB,XOR
KWG7_ATTR=127:127:255,,,FPU instructions
KWG7_CONT=F2XM1,FABS,FADD,FADDP,FBLD,FBSTP,FCHS,FCLEX,FCMOVA,FCMOVAE,FCMOVB,FCMOVBE,FCMOVE,FCMOVNA,FCMOVNAE,FCMOVNB,FCMOVNBE,FCMOVNE,FCMOVNU,FCMOVU,FCOM,FCOMI,FCOMIP,FCOMP,FCOMPP,FCOS,FDECSTP,FDISI,FDIV,FDIVP,FDIVR,FDIVRP,FENI,FFREE,FIADD,FICOM,FICOMP,FIDIV,FIDIVR,FILD,FIMUL,FINCSTP,FINIT,FIST,FISTP,FISUB,FISUBR,FLD,FLD1,FLDCW,FLDENV,FLDENVD,FLDENVW,FLDL2E,FLDL2T,FLDLG2,FLDLN2,FLDPI,FLDZ,FMUL,FMULP,FNCLEX,FNDISI,FNENI,FNINIT,FNOP,FNSAVE,FNSAVED,FNSAVEW,FNSTCW,FNSTENV,FNSTENVD,FNSTENVW,FNSTSW,FPATAN,FPREM,FPREM1,FPTAN,FRNDINT,FRSTOR,FRSTORD,FRSTORW,FSAVE,FSAVED,FSAVEW,FSCALE,FSETPM,FSIN,FSINCOS,FSQRT,FST,FSTCW,FSTENV,FSTENVD,FSTENVW,FSTP,FSTSW,FSUB,FSUBP,FSUBR,FSUBRP,FTST,FUCOM,FUCOMI,FUCOMIP,FUCOMP,FUCOMPP,FWAIT,FXAM,FXCH,FXTRACT,FYL2X,FYL2XP1
KWG8_ATTR=000:192:192,,,MMX instructions
KWG8_CONT=EMMS,FEMMS,FXRSTOR,FXSAVE,MOVD,MOVQ,PACKSSDW,PACKSSWB,PACKUSWB,PADDB,PADDD,PADDSB,PADDSW,PADDUSB,PADDUSW,PADDW,PAND,PANDN,PCMPEQB,PCMPEQD,PCMPEQW,PCMPGTB,PCMPGTD,PCMPGTW,PMADDWD,PMULHW,PMULLW,POR,PSLLD,PSLLQ,PSLLW,PSRAD,PSRAW,PSRLD,PSRLQ,PSRLW,PSUBB,PSUBD,PSUBSB,PSUBSW,PSUBUSB,PSUBUSW,PSUBW,PUNPCKHBW,PUNPCKHDQ,PUNPCKHWD,PUNPCKLBW,PUNPCKLDQ,PUNPCKLWD,PXOR
KWG9_ATTR=255:127:255,,,SSE instructions
KWG9_CONT=ADDPS,ADDSS,ANDNPS,ANDPS,CMPPS,CMPSS,COMISS,CVTPI2PS,CVTPS2PI,CVTSI2SS,CVTSS2SI,CVTTPS2PI,CVTTSS2SI,DIVPS,DIVSS,LDMXCSR,MASKMOVQ,MAXPS,MAXSS,MINPS,MINSS,MOVAPS,MOVHLPS,MOVHPS,MOVLHPS,MOVLPS,MOVMSKPS,MOVNTPS,MOVNTQ,MOVSS,MOVUPS,MULPS,MULSS,ORPS,PAVGB,PAVGUSB,PAVGW,PEXTRW,PF2ID,PFACC,PFADD,PFCMPEQ,PFCMPGE,PFCMPGT,PFMAX,PFMIN,PFMUL,PFRCP,PFRCPIT1,PFRCPIT2,PFRSQRT,PFSUB,PFSUBR,PI2FD,PINSRW,PMAXSW,PMAXUB,PMINSW,PMINUB,PMOVMSKB,PMULHRW,PMULHUW,PREFETCH,PREFETCHNTA,PREFETCHT0,PREFETCHT1,PREFETCHT2,PSADBW,PSHUFW,RCPPS,RCPSS,RDPMC,RSQRTPS,RSQRTSS,SFENCE,SHUFPS,SQRTPS,SQRTSS,STMXCSR,SUBPS,SUBSS,SYSCALL,SYSENTER,SYSEXIT,SYSRET,UCOMISS,UNPCKHPS,UNPCKLPS,XORPS
KWG10_ATTR=255:000:255,,,SSE2 instructions
KWG10_CONT=ADDPD,ADDSD,ANDNPD,ANDPD,CLFLUSH,CMPPD,COMISD,CVTDQ2PD,CVTDQ2PS,CVTPD2DQ,CVTPD2PI,CVTPD2PS,CVTPDPS,CVTPI2PD,CVTPS2DQ,CVTPS2PD,CVTSD2SI,CVTSD2SS,CVTSI2SD,CVTSS2SD,CVTTPD2DQ,CVTTPD2PI,CVTTPS2DQ,CVTTSD2SI,CVTTSI2SD,CVTTSI2SS,DIVPD,DIVSD,LFENCE,MASKMOVDQU,MAXPD,MAXSD,MFENCE,MINPD,MINSD,MOVAPD,MOVDQ2Q,MOVDQA,MOVDQU,MOVHPD,MOVLPD,MOVMSKPD,MOVNIG,MOVNTDQ,MOVNTI,MOVNTPD,MOVQ2DQ,MOVQA,MOVSQ,MOVSXD,MOVUPD,MULPD,MULSD,ORPD,PACKUSDW,PADDQ,PF2IW,PFNACC,PFPNACC,PFRSQIT1,PI2FW,PMULUDQ,POPFQ,PSHUFD,PSHUFHW,PSHUFLW,PSLLDQ,PSRAQ,PSRLDQ,PSUBQ,PSWAPD,PUNPCKHQDQ,PUNPCKLQDQ,PUSHFQ,RDIVISR,SHUFPD,SQRTPD,SQRTSD,SUBPD,SUBSD,SWAPGS,UCOMISD,UNPCKHPD,UNPCKLPD,XORPD,EXPORTS,LIBRARY
KWG11_ATTR=255:127:063,,,MASM high level keywords
KWG11_CONT=$,@@,~@B,~@F,~HWND,~LPARAM,~UINT,~WPARAM,^ADDR,~BASIC,~BYTE,~C,~CARRY?,~DWORD,~FAR,~FAR16,~FORTRAN,~FWORD,~HANDLE,~NEAR,~NEAR16,~OVERFLOW?,~OWORD,~PARITY?,~PASCAL,~POINTER,~QWORD,~REAL10,~REAL4,~REAL8,~SBYTE,~SDWORD,~SIGN?,~STDCALL,~SWORD,~TBYTE,~VARARG,~WORD,~ZERO?,~PSTRING,~PSTRINGA,~PSTRINGW,~CHR,~CHRA,~CHRW,~TRUE,~FALSE,~NULL
KWG12_ATTR=200:100:000,,,MASM Keywords (no-code producing, directives)
KWG12_CONT=.186,.286,.286C,.286P,.287,.386,.386C,.386P,.387,.486,.486P,.586,.686,.686p,.8086,.8087,.ALPHA,.CODE,.CONST,.CREF,.DATA,.DATA?,.DOSSEG,.ERR,.ERR1,.ERR2,.ERRB,.ERRDEF,.ERRDIF,.ERRDIFI,.ERRE,.ERRIDN,.ERRIDNI,.ERRNB,.ERRNDEF,.ERRNZ,.EXIT,.FARDATA,.FARDATA?,.K3D,.LALL,.LFCOND,.LIST,.LISTALL,.LISTIF,.LISTMACRO,.LISTMACROALL,.MMX,.MODEL,.MSFLOAT,.NO87,.NOCREF,.NOLIST,.NOLISTIF,.NOLISTMACRO,.RADIX,.SALL,.SEQ,.SFCOND,.STACK,.STARTUP,.TFCOND,.TYPE,.XALL,.XCREF,.XLIST,.XMM,ALIAS,ALIGN,ASSUME,CATSTR,COMM,COMMENT,DB,DD,DF,DOSSEG,DQ,DT,DUP,DW,ECHO,ELSE,ELSEIF,ELSEIF1,ELSEIF2,ELSEIFB,ELSEIFDEF,ELSEIFDIF,ELSEIFDIFI,ELSEIFE,ELSEIFIDN,ELSEIFIDNI,ELSEIFNB,ELSEIFNDEF,END,ENDIF,ENDM,ENDP,ENDS,endw,EQ,EQU,EVEN,EXITM,EXTERN,EXTERNDEF,EXTRN,FOR,FORC,GE,GOTO,GROUP,GT,HIGH,HIGHWORD,IF,IF1,IF2,IFB,IFDEF,IFDIF,IFDIFI,IFE,IFIDN,IFIDNI,IFNB,IFNDEF,INCLUDE,INCLUDELIB,INSTR,IRP,IRPC,LABEL,LE,LENGTH,LENGTHOF,LOCAL,LOW,LOWWORD,LROFFSET,LT,MACRO,MASK,MOD,NAME,NE,OFFSET,OPATTR,OPTION,ORG,PAGE,POPCONTEXT,PROC,PROTO,PTR,PUBLIC,PURGE,PUSHCONTEXT,RECORD,REPEAT,REPT,SEG,SEGMENT,SHORT,SIZE,SIZEOF,SIZESTR,STRUC,STRUCT,SUBSTR,SUBTITLE,SUBTTL,TEXTEQU,THIS,TITLE,TYPE,TYPEDEF,UNION,WHILE,WIDTH
KWG13_ATTR=050:191:050,,,Highlevel keywords (code producing)
KWG13_CONT=&&,||,.BREAK,.CONTINUE,.ELSE,.ELSEIF,~.elseIfBitClr,~.elseIfBitSet,.ENDIF,.ENDW,.IF,~.ifBitClr,~.ifBitSet,.REPEAT,.UNTIL,.UNTILCXZ,.WHILE,INVOKE,~BitClr,~BitSet,~BitTog,~BitToggle
KWG14_ATTR=000:255:255,,,MASM directives
KWG14_CONT=@CatStr,@code,@CodeSize,@Cpu,@CurSeg,@data,@DataSize,@Date,@Environ,@fardata,@fardata?,@FileCur,@FileName,@InStr,@Interface,@Line,@Model,@SizeStr,@stack,@SubStr,@Time,@Version,@WordSize
KWG15_ATTR=200:100:100,,,ObjAsm OOP macros
KWG15_CONT=~$MethodAddr,~$ACall,~$OCall,~$DCall,~$OfsCStr,~$OfsDStr,~$OfsJStr,~$ICall,~BEGIN_INTERFACE,~DCall,~END_INTERFACE,~ExitMethod,~ICall,~Implementation,~ImplementationEnd,~Method,~MethodEnd,~Object,~ObjectEnd,~ReleaseObject,~pSelf,~SetObject,~SetOwner,~@@EOM,~ACall,~ASSERT,~BoundMethod,~COM_AutoDispatch,~COM_Dispatch,~DefineVariable,~Destroy,~DirectCall,~DISPMETHOD,~DynamicAbstract,~DynamicEvent,~DynamicMethod,~Embed,~EnableAsyncAccess,~Event,~Exposed,~ExternMethod,~Fix,~IDispEvent,~InlineAbstract,~InlineMethod,~InterfaceAbstract,~InterfaceEvent,~InterfaceMethod,~Kill,~LinkedMethod,~LoadObjects,~MakeObjects,~MethodAddr,~New,~ObsoleteMethod,~OCall,~CStr,~DStr~Override,~OverrideMethod,~Private,~PrivateEnd,~PrivateMethod,~RedefineMethod,~RedefineVariable,~SetupSys,~StaticAbstract,~StaticEvent,~StaticMethod,~STDMETHOD,~SysDone,~SysInit,~SysSetup,~TCall,~TrapException,~UserMethod,~VirtualAbstract,~VirtualEvent,~VirtualMethod,~VirtualObjects,~xACall,~xOCall
KWG16_ATTR=255:190:160,,,ObjAsm Debug macros
KWG16_CONT=~DbgApiError,~DbgARGB,~DbgBin,~DbgBmp,~DbgClear,~DbgComError,~DbgCpu,~DbgDec,~DbgFloat,~DbgFpu,~DbgGlobalMemUsage,~DbgGUID,~DbgHex,~DbgLine,~DbgMaterial,~DbgMatrix4,~DbgMem,~DbgMessage,~DbgObject,~DbgPlane,~DbgQuaternion,~DbgStr,~DbgText,~DbgTraceObject,~DbgTraceShow,~DbgUStr,~DbgVec2,~DbgVec3,~DbgVec4,~DbgWarning,~DumpFpu,~DumpMem,~LogEnd,~LogStart,~ResGuard_Show,~ResGuard_Start,~ResGuard_Stop,~Spy,~SpyObject,~StopSpy

[ASM Folding Rules]
Attr=255:255:255,000:000:100

;Format: trigger sequence, ending sequence, inbetween sequence, flags
;  Sequence format: { }Keyword{ }
;    {C} = Copy word
;    {X} = Ignore word
;    {?} = Compare word
;     |  = or
;  Flags: S=show last line

CFR0={C} proc,{?} endp,,6
CFR1=.if,.endif,.elseif|.else,0
CFR2=.while,.endw,.break|.continue,0
CFR3=.repeat,.until|.untilcxz,.break|continue,0
CFR4=.switch,.endsw,.case|.default,0"
CFR5=repeat|rept,endm,,0
CFR6=while,endm,,0
CFR7={C} struct|{C} struc|{C} union,{?} ends,,,2
CFR8={X} macro,endm,,14
CFR9=.code,,,16
CFR10=.data,,,16
CFR11=.data?,,,16
CFR12=.const,,,16
CFR13=BEGIN,END,,0,1
CFR14=Method,MethodEnd,,6
CFR15=Object,ObjectEnd,,4
CFR16=;##\,;##/,,0
CFR17=comment,,,32
CFR18=.ifBitSet,.endif,.elseif|.else,0
CFR19=.ifBitClr,.endif,.elseif|.else,0

[ASM Autocomplete Rules]
;Format: trigger sequence, before sequence, after sequence
;  Sequence format: { }Keyword{ }
;    {I} = Apply indent from trigger sequence line
;    {N} = Linebreak
;    {T} = Tab
;    {C} = Copy word
;    {X} = Ignore word
;    {P} = Paste word

ACR1=.if,{I},{NITNI}.endif
ACR2=.while,{I},{NITNI}.endw
ACR3=.repeat,{I},{NITNI}.until
ACR4=.for,{I},{NITNI}.next
ACR5=if,{I},{NITNI}endif
ACR6=ifb,{I},{NITNI}endif
ACR7=ifnb,{I},{NITNI}endif
ACR8=ife,{I},{NITNI}endif
ACR9=ifne,{I},{NITNI}endif
ACR10=ifidn,{I},{NITNI}endif
ACR11=ifidni,{I},{NITNI}endif
ACR12=ifdif,{I},{NITNI}endif
ACR13=ifdifi,{I},{NITNI}endif
ACR14=while,{I},{NITNI}endm
ACR15=repeat,{I},{NITNI}endm
ACR16=rept,{I},{NITNI}endm
ACR17=forc,{I},{NITNI}endm
ACR18=irpc,{I},{NITNI}endm
ACR19=for,{I},{NITNI}endm
ACR20=irp,{I},{NITNI}endm
ACR21={X} macro,{I},{NITNI}endm
ACR22={C} proc,{I},{NITNIT}ret{NIP} endp
ACR23={C} struct,{I},{NITNIP} ends
ACR24={C} struc,{I},{NITNIP} ends
ACR25=Method,{I},{NIT}SetObject esi{NITNI}MethodEnd
ACR26=Object,{I},{NITNI}ObjectEnd

; ==============================================================

[RES Editor]
Font=Lucida Console,13
Background= 000:048:000
Regular=    255:255:255,,
Select=     255:255:160,096:128:064,
Highlight=  255:255:160,128:160:128,
Quote=      191:255:191,000:064:000,
Comment=    128:255:128,064:064:064
Number=     255:000:000,,
Operator=   000:255:000,,
LineSpace=  2
TabWidth=   2
Tab2Spaces= ON
AlignTabs=  5,10,57,100
AlignLines= ON
ReverseHorzMouseWheelRotation = OFF
ReverseVertMouseWheelRotation = OFF
LineTermination = CRLF

[RES Selection Bar]
Font=Lucida Console,10
Regular=    200:200:200,096:112:096,
Select=     000:000:000,064:160:064,

[ASM Status Panel]
Font=Lucida Console,8
Regular=    192:192:192,064:064:064,

[RES Keywords]
;Formats:
;  ATTR: Foreground Color, Background Color, Font Format, Description
;    Foreground color format: RRR:GGG:BBB  each component must be less than 256
;    Background color format: RRR:GGG:BBB  if ommited, the editor background is used
;    Font emphasis: BOLD, ITALIC or UNDERLINE. A combination can be specified using the "|" operator (e.g. BOLD|ITALIC)
;    Description: Group identifier string
;  CONT: comma separated list
;    Keyword prefix: ^ for case sensitive, ~ for case convert
KWG0_ATTR=128:192:128,,,Resources
KWG0_CONT=ICON,CURSOR,BITMAP,IMAGE,MENU,MENUEX,STRINGTABLE,ACCELERATORS,DIALOG,DIALOGEX,FONT,HTML,MESSAGETABLE,POPUP,PLUGPLAY,RCDATA,TEXTINCLUDE,TYPELIB,VERSIONINFO,VXD
KWG1_ATTR=255:000:255,,,Preprocessor Directives
KWG1_CONT=#define,#elif,#else,#endif,#if,#ifdef,#ifndef,#include,#undef
KWG2_ATTR=255:000:255,,,Macros
KWG2_CONT=__DATE__,__FILE__,__LINE__,__STDC__,__TIME__,__TIMESTAMP__
KWG3_ATTR=255:000:255,,,Preprocessor Operators
KWG3_CONT=#,#@,##
KWG4_ATTR=255:000:255,,,Controls
KWG4_CONT=AUTO3STATE,AUTOCHECKBOX,AUTORADIOBUTTON,CHECKBOX,COMBOBOX,CONTROL,CTEXT,DEFPUSHBUTTON,EDITTEXT,GROUPBOX,LISTBOX,LTEXT,PUSHBOX,PUSHBUTTON,RADIOBUTTON,RTEXT,SCROLLBAR,STATE3
KWG5_ATTR=144:144:000,,,Statements
KWG5_CONT=CAPTION,CHARACTERISTICS,CLASS,EXSTYLE,LANGUAGE,MENUITEM,STYLE,VERSION
KWG6_ATTR=190:190:128,,,Attributes
KWG6_CONT=MOVABLE,PURE,LOADONCALL,DISCARDABLE
KWG7_ATTR=224:224:000,,,Structure
KWG7_CONT=BEGIN,END

[RES Folding Rules]
Attr=255:255:255,000:000:100

;Format: trigger sequence, ending sequence, inbetween sequence, flags
;  Sequence format: { }Keyword{ }
;    {C} = Copy word
;    {X} = Ignore word
;    {?} = Compare word
;     |  = or
;  Flags: S=show last line


[RES Autocomplete Rules]
;Format: trigger sequence, before sequence, after sequence
;  Sequence format: { }Keyword{ }
;    {I} = Apply indent from trigger sequence line
;    {N} = Linebreak
;    {T} = Tab
;    {C} = Copy word
;    {X} = Ignore word
;    {P} = Paste word

; ==============================================================

[TXT Editor]
Font=Lucida Console,13
Background= 000:000:000
Regular=    255:255:255,,
Select=     192:255:192,000:128:000,
Highlight=  255:255:192,160:160:128,
Quote=      191:191:191,000:000:128,
Comment=    192:192:192,064:064:064
Number=     255:000:000,,
Operator=   000:255:000,,
LineSpace=  2
TabWidth=   2
Tab2Spaces= ON
AlignTabs=  5,10,57,100
AlignLines= ON
ReverseHorzMouseWheelRotation = OFF
ReverseVertMouseWheelRotation = OFF
LineTermination = CRLF

[TXT Selection Bar]
Font=Lucida Console,10
Regular=    200:200:200,096:096:096,
Select=     000:000:000,064:160:064,

[TXT Status Panel]
Font=Lucida Console,8
Regular=    192:192:192,064:064:064,

[TXT Keywords]
;Formats:
;  ATTR: Foreground Color, Background Color, Font Format, Description
;    Foreground color format: RRR:GGG:BBB  each component must be less than 256
;    Background color format: RRR:GGG:BBB  if ommited, the editor background is used
;    Font emphasis: BOLD, ITALIC or UNDERLINE. A combination can be specified using the "|" operator (e.g. BOLD|ITALIC)
;    Description: Group identifier string
;  CONT: comma separated list
;    Keyword prefix: ^ for case sensitive, ~ for case convert
KWG0_ATTR=255:000:255,,,General Purpose
KWG0_CONT=

[TXT Folding Rules]
Attr=255:255:255,000:000:100

;Format: trigger sequence, ending sequence, inbetween sequence, flags
;  Sequence format: { }Keyword{ }
;    {C} = Copy word
;    {X} = Ignore word
;    {?} = Compare word
;     |  = or
;  Flags: S=show last line


[TXT Autocomplete Rules]
;Format: trigger sequence, before sequence, after sequence
;  Sequence format: { }Keyword{ }
;    {I} = Apply indent from trigger sequence line
;    {N} = Linebreak
;    {T} = Tab
;    {C} = Copy word
;    {X} = Ignore word
;    {P} = Paste word

