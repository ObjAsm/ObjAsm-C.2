

;--- these are the MASM reserved words. h2incx will add an underscore
;--- if these names occur as names in structures/typedefs/externs
;--- by setting warning level > 0 h2incx will display these conversions

[Reserved Words]
add
addr
ax
bp
bx
byte
ch
comment
cx
di
div
dr0
dr1
dr2
dr3
dr4
dr5
dr6
dr7
dword
dx
eax
ebp
ebx
ecx
edi
edx
eip
end
enter
esi
esp
fabs
far
fs
group
highword
if
in
int
invoke
length
lock
mask
mm
mul
Name
near
offset
out
pascal
proc
push
rcl
segment
si
size
sp
st
str
tbyte
type
wait
width
word

;--- the following string pairs define how type conversions will be done.
;--- generally strings on the left side of '=' will be converted to the
;--- value on the right. IN and OUT are types defined in windef.h, but
;--- are MASM reserved words, so they have to be converted to DWORDs

;--- [Type Conversion 1]: will be used in any case

[Type Conversion 1]
DWORDLONG=QWORD
ULONGLONG=QWORD
LONGLONG=QWORD
double=REAL8
enum=DWORD
void=
VOID=
__int32=SDWORD
unsigned __int32=DWORD
__int64=QWORD
unsigned __int64=QWORD
__int3264=SDWORD
unsigned __int3264=DWORD
INT=DWORD
int=DWORD
long double=REAL8
;IN=DWORD
;OUT=DWORD

;--- [Type Conversion 2]: will be used for converting parameter types
;--- if command line switch -u has *not* been set.
;--- will be used in any case for converting types of struct members.

[Type Conversion 2]
char=SBYTE
unsigned char=BYTE
short=SWORD
unsigned short=WORD
long=SDWORD
unsigned long=DWORD
int=SDWORD
unsigned int=DWORD
wchar_t=WORD
float=REAL4
LPCSTR=LPSTR
LPCWSTR=LPWSTR
SHORT=SWORD
USHORT=WORD
LONG=SDWORD
ULONG=DWORD
UINT=DWORD
SIZE_T=DWORD
UCHAR=BYTE
FLOAT=REAL4
ULONG_PTR=DWORD
LONG_PTR=SDWORD
DWORD_PTR=DWORD
PULONG_PTR=ptr DWORD
PDWORD_PTR=ptr DWORD

;--- [Type Conversion 3]: will be used for converting parameter types
;--- if command line switch -u *has* been set. Only required if size of
;--- type is > 4

[Type Conversion 3]
POINT=QWORD
VARIANT=VARIANT

;--- the following strings will be converted if they occur as type qualifiers
;--- lines beginning with "*" will make the comparison case-insensitive

[Type Qualifier Conversion]
*far=
*near=
*const=
*unaligned=
__RPC_FAR=
PASCAL=
IN=
OUT=
OPTIONAL=

;--- strings in this section will be recognized as prototype qualifiers
;--- values on the right mean:
;--- 1=cdecl, 2=stdcall, 4=inline, 8=__declspec(dllimport)
;--- 256=static

[Prototype Qualifiers]
APIENTRY=2
CALLBACK=2
DECLSPEC_IMPORT=8
IMAGEAPI=10
ISOLATION_AWARE_INLINE=4
LWSTDAPI=10
LWSTDAPIV_=9
LWSTDAPI_=10
NTAPI=2
NTSYSAPI=8
PASCAL=2
RPCRTAPI=10
RPC_ENTRY=2
SHDOCAPI=10
SHDOCAPI_=10
SHSTDAPI=10
SHSTDAPI_=10
STDAPI=2
STDMETHODCALLTYPE=2
WINADVAPI=8
WINAPI=2
WINAPIV=1
WINBASEAPI=8
WINCOMMCTRLAPI=8
WINCOMMDLGAPI=8
WINGDIAPI=8
WINMMAPI=8
WINOLEAPI=10
WINOLEAPI_=10
WINOLEAUTAPI=10
WINOLEAUTAPI_=10
WINSHELLAPI=8
WINSOCK_API_LINKAGE=10
WINUSERAPI=8
__RPC_STUB=2
__RPC_USER=2
__cdecl=1
__export=
__inline=4
__stdcall=2
_cdecl=1
_stdcall=2
inline=4
static=256

;--- the following string pairs define how token conversion will be done.
;--- Be careful with modifications!

[Token Conversion]
interface=struct
EXTERN_C=extern

;--- h2incx scans the input stream looking for function prototypes.
;--- but what looks like a prototype may be a macro invocation instead.
;--- this could only be determined if a symbol table is maintained and
;--- *all* sources (including header files) would be scanned. h2incx
;--- doesn't do this and so this table may be needed. Any entries here
;--- will be known by h2incx as being macros, so it will not try to
;--- generate prototypes for them
;--- new since V0.91: now h2incx maintains a macro symbol table. in
;--- conjunction with option -i most macros will be recognized without
;--- being included here.
;--- meaning of values on the right side of "=":
;--- 14: STDMETHOD handling: skip braces, copy rest of line and
;---     assume rest of line are function parameters.
;--- 32: terminate block with a <macroname>_END macro invocation
;--- support for MIDL generated header files:
;--- 64: assume MIDL_INTERFACE: start a struct declaration
;--- 128: assume BEGIN_INTERFACE: add "??Interface equ <xxx>" line
;--- 256: assume END_INTERFACE: add "??Interface equ <>" line

[Macro Names]
DECLARE_HANDLE=
DEFINE_GUID=
STDMETHOD=14
STDMETHOD_=14
DECLARE_INTERFACE=32
DECLARE_INTERFACE_=32
MIDL_INTERFACE=64
BEGIN_INTERFACE=128
END_INTERFACE=256
SHSTDAPI_=
WINOLEAPI_=
DECLSPEC_UUID=

;--- [Simple Type Names] includes all types known to be unstructured
;--- currently only used to skip cast expressions, i.e. "(DWORD)"

[Simple Type Names]
ATOM
BOOL
BOOLEAN
BYTE
CHAR
COLORREF
DWORD
HANDLE
HBITMAP
HFILE
HIMAGELIST
HRESULT
HTREEITEM
HWND
LONG
LPARAM
LPSTR
LPWSTR
LRESULT
REAL4
REAL8
SBYTE
SDWORD
SHORT
SIZE_T
SWORD
PBYTE
PDWORD
PVOID
QWORD
ULONG
USHORT
WORD
WCHAR
WPARAM

;--- [Structure Names] includes all types known as being a structure.
;--- items with such names in structure declarations will get a "<>"
;--- instead of "?". if anyone knows how to avoid this mess without
;--- having to create a full C frontend I would be very thankful.
;--- Fortunately only structures included in other structures
;--- have to be added here.
;--- *new since V0.89: h2inc now saves all structure names found in the
;--- source in a symbol table. Thus only structures NOT defined in the
;---- current file AND included in other structures have to be added here.
;--- *new since V0.90: with cmdline switch -i there exists a way to
;--- avoid having to insert structure names here.

[Structure Names]
ACE_HEADER
AD_GENERAL_PARAMS
AD_GUARANTEED
BITMAP
BITMAPCOREHEADER
BITMAPINFOHEADER
CERT_ALT_NAME_INFO
CERT_NAME_BLOB
CERT_PUBLIC_KEY_INFO
CERT_RDN_VALUE_BLOB
CIEXYZ
CIEXYZTRIPLE
CLSID
CMSG_SIGNED_ENCODE_INFO
CMSG_ENVELOPED_ENCODE_INFO
COLORADJUSTMENT
CONTROL_SERVICE
CONVCONTEXT
COORD
CREATE_PROCESS_DEBUG_INFO
CREATE_THREAD_DEBUG_INFO
CRL_DIST_POINT_NAME
CRYPT_ALGORITHM_IDENTIFIER
CRYPT_ATTRIBUTES
CRYPT_DATA_BLOB
CRYPT_OBJID_BLOB
CTL_USAGE
DCB
DDEML_MSG_HOOK_DATA
DESIGNVECTOR
ELEMDESC
EMR
EMRTEXT
ENUMLOGFONTEXA
ENUMLOGFONTEXW
EVENTLOGRECORD
EXCEPTION_DEBUG_INFO
EXCEPTION_RECORD
EXIT_PROCESS_DEBUG_INFO
EXIT_THREAD_DEBUG_INFO
EXTLOGFONTW
EXTLOGPEN
FILETIME
FIXED
FLOATING_SAVE_AREA
FLOWSPEC
FOCUS_EVENT_RECORD
FONTSIGNATURE
GUID
HARDWAREINPUT
IDLDESC
IID
IMAGE_DATA_DIRECTORY
IMAGE_FILE_HEADER
IMAGE_OPTIONAL_HEADER32
IMAGE_OPTIONAL_HEADER64
IMAGE_ROM_OPTIONAL_HEADER
IN_ADDR_IPV4
IN_ADDR_IPV6
KEYBDINPUT
KEY_EVENT_RECORD
LARGE_INTEGER
LIST_ENTRY
LOAD_DLL_DEBUG_INFO
LOGBRUSH
LOGCOLORSPACEW
LOGFONTA
LOGFONTW
LOGPALETTE
LOGPEN
LUID
LUID_AND_ATTRIBUTES
MENU_EVENT_RECORD
MESSAGE_RESOURCE_BLOCK
MOUSEINPUT
MOUSE_EVENT_RECORD
NEWTEXTMETRICA
NEWTEXTMETRICW
NEWTEXTMETRICEXA
NEWTEXTMETRICEXW
NMHDR
OUTPUT_DEBUG_STRING_INFO
PALETTEENTRY
PANOSE
PARAMDESC
PARAM_BUFFER
PIXELFORMATDESCRIPTOR
POINT
POINTFLOAT
POINTFX
POINTL
POINTS
PRINTER_NOTIFY_INFO_DATA
QOS_OBJECT_HDR
RECT
RECTL
RGBQUAD
RGBTRIPLE
RGNDATAHEADER
RIP_INFO
RSVP_FILTERSPEC_V4
RSVP_FILTERSPEC_V4_GPI
RSVP_FILTERSPEC_V6
RSVP_FILTERSPEC_V6_FLOW
RSVP_FILTERSPEC_V6_GPI
SECURITY_QUALITY_OF_SERVICE
SERVICE_STATUS
SID_AND_ATTRIBUTES
SID_IDENTIFIER_AUTHORITY
SIZEL
SMALL_RECT
SOCKET_ADDRESS
STGMEDIUM
SYSTEMTIME
TEXTMETRICA
TEXTMETRICW
TOKEN_SOURCE
TRIVERTEX
TYPEDESC
UNLOAD_DLL_DEBUG_INFO
WAVEFORMAT
WCRANGE
WINDOW_BUFFER_SIZE_RECORD
WSABUF
WSAPROTOCOLCHAIN
XFORM

;--- some structures are aligned wrong when using defaults.
;--- Entries in the following section will force h2incx
;--- to add an align parameter to the structure definition
;--- Please note: most of the entries here could be avoided
;--- by launching h2incx with parameter -a.

[Alignment]
ARRAYDESC=4
ELEMDESC=4
FORMATETC=4
FUNCDESC=4
IDLDESC=4
INPUT_RECORD=4
PARAMDESC=4
PARAMDESCEX=8
TLIBATTR=4
TYPEDESC=4
VARDESC=4
LOADED_IMAGE=4
ADDRESS=4
WSADATA=4

;--- parameter types with size > 4 should be included here
;--- so h2incx can determine the name suffix for stdcall prototypes

[Type Size]
POINT=8
DOUBLE=8
DATE=8
CY=8
VARIANT=16
LONG64=8
ULONG64=8

;--- end of file
