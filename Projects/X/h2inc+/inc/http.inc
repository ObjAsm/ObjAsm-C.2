;Include file created by h2inc+ version C.2.0 on (UTC) 20/05/2024 18:06:34
;(C) G. Friedrich April 2024
;Source file: d:\objasm\projects\x\h2inc+\h\um_10.0.22621.0\http.h
;             Created on (UTC) 06/04/2024 06:15:55
;             Last modified on (UTC) 21/02/2024 18:15:26

;--*
ifndef __HTTP_H__
  __HTTP_H__ equ <>
  include winapifamily.inc
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
    if _WIN32_WINNT ge 0501h
      ; HTTPAPI is available on
      ; a) WinXP SP2 and higher
      ; b) Windows 2003 and higher
      ; c) Vista and higher.
      include winsock2.inc
      include ws2tcpip.inc
      ifdef __cplusplus
        ;[...]
      endif
      ; __cplusplus
      ; Flags for HttpInitialize() and HttpTerminate().
      ; HTTP_INITIALIZE_SERVER - Initializes the HTTP API layer and driver for
      ;                          applications using server APIs.
      ; HTTP_INITIALIZE_CONFIG - Initializes the HTTP API layer and driver for
      ;                          applications using HTTP configuration APIs.
      ; HTTP_DEMAND_CBT        - Pre-Win7, it checks HTTP API layer and driver for
      ;                          Extended Protection capabilities.
      ;                          On Win7 and above, this flag has no use and is
      ;                          present only for app-compat reasons.
      ;                          It must be combined with HTTP_INITIALIZE_SERVER.
      ; Notes -
      ; 1. These flags can be used in combination.
      ; 2. HttpTerminate() must be called for each call to HttpInitialize() made
      ;    with each flag set when invoking HttpInitialize.  For example, one
      ;    could make two calls to HttpInitialize() setting HTTP_INITIALIZE_SERVER
      ;    the first time and HTTP_INITIALIZE_CONFIG the second time.  One call
      ;    to HttpTerminate() with both flags set suffices to clean up both
      ;    calls to HttpInitialize().
      HTTP_INITIALIZE_SERVER equ 00000001h
      HTTP_INITIALIZE_CONFIG equ 00000002h
      HTTP_DEMAND_CBT equ 00000004h
      if _WIN32_WINNT ge 0600h
        ; Following section defines the properties supported by the
        ; server side HTTP API.
        HTTP_SERVER_PROPERTY typedef SDWORD
        ; Used for enabling server side authentication.
        HttpServerAuthenticationProperty equ 0
        ; Used for enabling logging.
        HttpServerLoggingProperty equ 1
        ; Used for setting QoS properties.
        HttpServerQosProperty equ 2
        ; Used for configuring timeouts.
        HttpServerTimeoutsProperty equ 3
        ; Used for limiting request queue lengths.
        HttpServerQueueLengthProperty equ 4
        ; Used for manipulating the state.
        HttpServerStateProperty equ 5
        ; Used for modifying the verbosity level of 503 type responses
        ; generated by server side API.
        HttpServer503VerbosityProperty equ 6
        ; Used for manipulating Url Group to Request Queue association.
        HttpServerBindingProperty equ 7
        ; Extended authentication property.
        HttpServerExtendedAuthenticationProperty equ 8
        ; Listening endpoint property.
        HttpServerListenEndpointProperty equ 9
        ; Authentication channel binding property
        HttpServerChannelBindProperty equ 10
        ; IP Protection level policy for a Url Group.
        HttpServerProtectionLevelProperty equ 11
        ; Used for manipulating Url Group to Delegate Request Queue association.
        HttpServerDelegationProperty equ 16
        _HTTP_SERVER_PROPERTY typedef HTTP_SERVER_PROPERTY
        PHTTP_SERVER_PROPERTY typedef ptr HTTP_SERVER_PROPERTY
        HTTP_MAX_SERVER_QUEUE_LENGTH equ 7FFFFFFFh
        HTTP_MIN_SERVER_QUEUE_LENGTH equ 1
        ; Generic property flags. Each structure defining a property info typically
        ; contain an element of this type.
        HTTP_PROPERTY_FLAGS struct
          HTTP_PROPERTY_FLAGS_REC record HTTP_PROPERTY_FLAGS_REC_Filler:31, HTTP_PROPERTY_FLAGS_REC_Present:1
          HTTP_PROPERTY_FLAGS_BITS HTTP_PROPERTY_FLAGS_REC <>
        HTTP_PROPERTY_FLAGS ends
        _HTTP_PROPERTY_FLAGS typedef HTTP_PROPERTY_FLAGS
        PHTTP_PROPERTY_FLAGS typedef ptr HTTP_PROPERTY_FLAGS
        ; Enabled state.
        HTTP_ENABLED_STATE typedef SDWORD
        HttpEnabledStateActive equ 0
        HttpEnabledStateInactive equ 1
        _HTTP_ENABLED_STATE typedef HTTP_ENABLED_STATE
        PHTTP_ENABLED_STATE typedef ptr HTTP_ENABLED_STATE
        HTTP_STATE_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          State HTTP_ENABLED_STATE ?
        HTTP_STATE_INFO ends
        _HTTP_STATE_INFO typedef HTTP_STATE_INFO
        PHTTP_STATE_INFO typedef ptr HTTP_STATE_INFO
        ; Defines the verbosity level for a request queue which will be used
        ; when sending "503 - Service Unavailable" type error responses. Note that
        ; this setting only affects the error responses generated internally
        ; by HTTPAPI.
        HTTP_503_RESPONSE_VERBOSITY typedef SDWORD
        ; Instead of sending a 503 response, the connection will be reset.
        ; This is the default behavior.
        Http503ResponseVerbosityBasic equ 0
        ; Will send a 503 w/ a generic reason phrase.
        Http503ResponseVerbosityLimited equ 1
        ; Will send a 503 w/ a detailed reason phrase.
        Http503ResponseVerbosityFull equ 2
        _HTTP_503_RESPONSE_VERBOSITY typedef HTTP_503_RESPONSE_VERBOSITY
        PHTTP_503_RESPONSE_VERBOSITY typedef ptr HTTP_503_RESPONSE_VERBOSITY
        ; Network QoS related.
        HTTP_QOS_SETTING_TYPE typedef SDWORD
        HttpQosSettingTypeBandwidth equ 0
        HttpQosSettingTypeConnectionLimit equ 1
        HttpQosSettingTypeFlowRate equ 2
        _HTTP_QOS_SETTING_TYPE typedef HTTP_QOS_SETTING_TYPE
        PHTTP_QOS_SETTING_TYPE typedef ptr HTTP_QOS_SETTING_TYPE
        HTTP_QOS_SETTING_INFO struct
          QosType HTTP_QOS_SETTING_TYPE ?
          QosSetting POINTER ?
        HTTP_QOS_SETTING_INFO ends
        _HTTP_QOS_SETTING_INFO typedef HTTP_QOS_SETTING_INFO
        PHTTP_QOS_SETTING_INFO typedef ptr HTTP_QOS_SETTING_INFO
        HTTP_CONNECTION_LIMIT_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          MaxConnections DWORD ?
        HTTP_CONNECTION_LIMIT_INFO ends
        _HTTP_CONNECTION_LIMIT_INFO typedef HTTP_CONNECTION_LIMIT_INFO
        PHTTP_CONNECTION_LIMIT_INFO typedef ptr HTTP_CONNECTION_LIMIT_INFO
        HTTP_BANDWIDTH_LIMIT_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          MaxBandwidth DWORD ?
        HTTP_BANDWIDTH_LIMIT_INFO ends
        _HTTP_BANDWIDTH_LIMIT_INFO typedef HTTP_BANDWIDTH_LIMIT_INFO
        PHTTP_BANDWIDTH_LIMIT_INFO typedef ptr HTTP_BANDWIDTH_LIMIT_INFO
        HTTP_FLOWRATE_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          MaxBandwidth DWORD ?
          MaxPeakBandwidth DWORD ?
          BurstSize DWORD ?
        HTTP_FLOWRATE_INFO ends
        _HTTP_FLOWRATE_INFO typedef HTTP_FLOWRATE_INFO
        PHTTP_FLOWRATE_INFO typedef ptr HTTP_FLOWRATE_INFO
        ; Bandwidth throttling limit can not be set lower than the following
        ; number. The value is in bytes/sec.
        HTTP_MIN_ALLOWED_BANDWIDTH_THROTTLING_RATE equ (1024)
        ; Distinguished value for bandwidth, connection limits and logging rollover
        ; size indicating "no limit".
        HTTP_LIMIT_INFINITE equ (- 1)
        ; Timeout information.
        ; For manipulating global timeout settings.
        ; These timers run when connection does not belong to any application.
        ; Value zero is not allowed for driver wide timeout settings.
        HTTP_SERVICE_CONFIG_TIMEOUT_KEY typedef SDWORD
        IdleConnectionTimeout equ 0
        HeaderWaitTimeout equ 1
        _HTTP_SERVICE_CONFIG_TIMEOUT_KEY typedef HTTP_SERVICE_CONFIG_TIMEOUT_KEY
        PHTTP_SERVICE_CONFIG_TIMEOUT_KEY typedef ptr HTTP_SERVICE_CONFIG_TIMEOUT_KEY
        HTTP_SERVICE_CONFIG_TIMEOUT_PARAM typedef USHORT
        PHTTP_SERVICE_CONFIG_TIMEOUT_PARAM typedef ptr USHORT
        ; To set a timeout value use the set structure. To query/delete use the key
        ; directly. When you query a timeout value the output buffer must be exactly
        ; the sizeof param.
        HTTP_SERVICE_CONFIG_TIMEOUT_SET struct
          KeyDesc HTTP_SERVICE_CONFIG_TIMEOUT_KEY ?
          ParamDesc HTTP_SERVICE_CONFIG_TIMEOUT_PARAM ?
        HTTP_SERVICE_CONFIG_TIMEOUT_SET ends
        _HTTP_SERVICE_CONFIG_TIMEOUT_SET typedef HTTP_SERVICE_CONFIG_TIMEOUT_SET
        PHTTP_SERVICE_CONFIG_TIMEOUT_SET typedef ptr HTTP_SERVICE_CONFIG_TIMEOUT_SET
        ; For manipulating application specific timeout settings.
        ; These timers run when there's a request being processed on a connection
        ; and HTTPAPI has already associated the request with an application.
        ; Setting a timeout value to zero will cause HTTPAPI to revert to default.
        HTTP_TIMEOUT_LIMIT_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          ; Timeouts configured in seconds.
          EntityBody WORD ?
          DrainEntityBody WORD ?
          RequestQueue WORD ?
          ; Following two timeouts are only enforced after first request on
          ; connection is routed to the application. These will not manipulate
          ; the driver wide timeouts.
          IdleConnection WORD ?
          HeaderWait WORD ?
          ; Timeouts configured in bytes/second.
          ; This timer can be turned off by setting it to MAXULONG.
          MinSendRate DWORD ?
        HTTP_TIMEOUT_LIMIT_INFO ends
        _HTTP_TIMEOUT_LIMIT_INFO typedef HTTP_TIMEOUT_LIMIT_INFO
        PHTTP_TIMEOUT_LIMIT_INFO typedef ptr HTTP_TIMEOUT_LIMIT_INFO
        ;  Controls config settings
        HTTP_SERVICE_CONFIG_SETTING_KEY typedef SDWORD
        HttpNone equ 0
        HttpTlsThrottle equ 1
        _HTTP_SERVICE_CONFIG_SETTING_KEY typedef HTTP_SERVICE_CONFIG_SETTING_KEY
        PHTTP_SERVICE_CONFIG_SETTING_KEY typedef ptr HTTP_SERVICE_CONFIG_SETTING_KEY
        HTTP_SERVICE_CONFIG_SETTING_PARAM typedef ULONG
        PHTTP_SERVICE_CONFIG_SETTING_PARAM typedef ptr ULONG
        HTTP_SERVICE_CONFIG_SETTING_SET struct
          KeyDesc HTTP_SERVICE_CONFIG_SETTING_KEY ?
          ParamDesc HTTP_SERVICE_CONFIG_SETTING_PARAM ?
        HTTP_SERVICE_CONFIG_SETTING_SET ends
        _HTTP_SERVICE_CONFIG_SETTING_SET typedef HTTP_SERVICE_CONFIG_SETTING_SET
        PHTTP_SERVICE_CONFIG_SETTING_SET typedef ptr HTTP_SERVICE_CONFIG_SETTING_SET
        ; Controls whether IP-based URLs should listen on the specific IP or wildcard.
        HTTP_LISTEN_ENDPOINT_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          EnableSharing BYTE ?
        HTTP_LISTEN_ENDPOINT_INFO ends
        _HTTP_LISTEN_ENDPOINT_INFO typedef HTTP_LISTEN_ENDPOINT_INFO
        PHTTP_LISTEN_ENDPOINT_INFO typedef ptr HTTP_LISTEN_ENDPOINT_INFO
        HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS struct
          DomainNameLength WORD ?
          DomainName POINTER ?
          RealmLength WORD ?
          Realm POINTER ?
        HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS ends
        _HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS typedef HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS
        PHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS typedef ptr HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS
        HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS struct
          RealmLength WORD ?
          Realm POINTER ?
        HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS ends
        _HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS typedef HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS
        PHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS typedef ptr HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS
        ; Definitions used for setting server side authentication property.
        HTTP_AUTH_ENABLE_BASIC equ (00000001h)
        HTTP_AUTH_ENABLE_DIGEST equ (00000002h)
        HTTP_AUTH_ENABLE_NTLM equ (00000004h)
        HTTP_AUTH_ENABLE_NEGOTIATE equ (00000008h)
        HTTP_AUTH_ENABLE_KERBEROS equ (00000010h)
        HTTP_AUTH_ENABLE_ALL equ <(HTTP_AUTH_ENABLE_BASIC or HTTP_AUTH_ENABLE_DIGEST or HTTP_AUTH_ENABLE_NTLM or HTTP_AUTH_ENABLE_NEGOTIATE or HTTP_AUTH_ENABLE_KERBEROS)>
        HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING equ (01h)
        HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL equ (02h)
        HTTP_SERVER_AUTHENTICATION_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          AuthSchemes DWORD ?
          ReceiveMutualAuth BYTE ?
          ReceiveContextHandle BYTE ?
          DisableNTLMCredentialCaching BYTE ?
          ExFlags BYTE ?
          DigestParams HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS <>
          BasicParams HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS <>
        HTTP_SERVER_AUTHENTICATION_INFO ends
        _HTTP_SERVER_AUTHENTICATION_INFO typedef HTTP_SERVER_AUTHENTICATION_INFO
        PHTTP_SERVER_AUTHENTICATION_INFO typedef ptr HTTP_SERVER_AUTHENTICATION_INFO
        if _WIN32_WINNT ge _WIN32_WINNT_WIN7
          ; Definitions for setting authentication channel binding properties
          HTTP_SERVICE_BINDING_TYPE typedef SDWORD
          HttpServiceBindingTypeNone equ 0
          HttpServiceBindingTypeW equ 1
          HttpServiceBindingTypeA equ 2
          _HTTP_SERVICE_BINDING_TYPE typedef HTTP_SERVICE_BINDING_TYPE

          HTTP_SERVICE_BINDING_BASE struct
            Type_ HTTP_SERVICE_BINDING_TYPE ?
          HTTP_SERVICE_BINDING_BASE ends
          _HTTP_SERVICE_BINDING_BASE typedef HTTP_SERVICE_BINDING_BASE
          PHTTP_SERVICE_BINDING_BASE typedef ptr HTTP_SERVICE_BINDING_BASE
          HTTP_SERVICE_BINDING_A struct
            Base HTTP_SERVICE_BINDING_BASE <>
            Buffer POINTER ?
            BufferSize DWORD ?
          HTTP_SERVICE_BINDING_A ends
          _HTTP_SERVICE_BINDING_A typedef HTTP_SERVICE_BINDING_A
          PHTTP_SERVICE_BINDING_A typedef ptr HTTP_SERVICE_BINDING_A
          HTTP_SERVICE_BINDING_W struct
            Base HTTP_SERVICE_BINDING_BASE <>
            Buffer PWCHAR ?
            BufferSize DWORD ?
          HTTP_SERVICE_BINDING_W ends
          _HTTP_SERVICE_BINDING_W typedef HTTP_SERVICE_BINDING_W
          PHTTP_SERVICE_BINDING_W typedef ptr HTTP_SERVICE_BINDING_W
          HTTP_AUTHENTICATION_HARDENING_LEVELS typedef SDWORD
          HttpAuthenticationHardeningLegacy equ 0
          HttpAuthenticationHardeningMedium equ 1
          HttpAuthenticationHardeningStrict equ 2
          _HTTP_AUTHENTICATION_HARDENING_LEVELS typedef HTTP_AUTHENTICATION_HARDENING_LEVELS

          ; Channel binding token verification flags.
          HTTP_CHANNEL_BIND_PROXY equ 1h
          HTTP_CHANNEL_BIND_PROXY_COHOSTING equ 20h
          ; Service bind verification flags
          HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK equ 2h
          HTTP_CHANNEL_BIND_DOTLESS_SERVICE equ 4h
          ; Flags triggering channel bind parameters retrieval
          HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN equ 8h
          HTTP_CHANNEL_BIND_CLIENT_SERVICE equ 10h
          ; All valid flags (mask for internal checks)
          HTTP_CHANNEL_BIND_INFO struct
            Hardening HTTP_AUTHENTICATION_HARDENING_LEVELS ?
            Flags DWORD ?
            ServiceNames POINTER ?
            NumberOfServiceNames DWORD ?
          HTTP_CHANNEL_BIND_INFO ends
          _HTTP_CHANNEL_BIND_INFO typedef HTTP_CHANNEL_BIND_INFO
          PHTTP_CHANNEL_BIND_INFO typedef ptr HTTP_CHANNEL_BIND_INFO
          HTTP_REQUEST_CHANNEL_BIND_STATUS struct
            ServiceName PHTTP_SERVICE_BINDING_BASE ?
            ChannelToken PUCHAR ?
            ChannelTokenSize DWORD ?
            Flags DWORD ?
          HTTP_REQUEST_CHANNEL_BIND_STATUS ends
          _HTTP_REQUEST_CHANNEL_BIND_STATUS typedef HTTP_REQUEST_CHANNEL_BIND_STATUS
          PHTTP_REQUEST_CHANNEL_BIND_STATUS typedef ptr HTTP_REQUEST_CHANNEL_BIND_STATUS
        endif
        HTTP_REQUEST_TOKEN_BINDING_INFO struct
          TokenBinding PUCHAR ?
          TokenBindingSize DWORD ?
          EKM PUCHAR ?
          EKMSize DWORD ?
          KeyType BYTE ?
        HTTP_REQUEST_TOKEN_BINDING_INFO ends
        _HTTP_REQUEST_TOKEN_BINDING_INFO typedef HTTP_REQUEST_TOKEN_BINDING_INFO
        PHTTP_REQUEST_TOKEN_BINDING_INFO typedef ptr HTTP_REQUEST_TOKEN_BINDING_INFO
        ; Definitions used for setting logging property.
        ; The known log fields recognized/supported by HTTPAPI. Following fields
        ; are used for W3C logging. Subset of them are also used for error
        ; logging.
        HTTP_LOG_FIELD_DATE equ 00000001h
        HTTP_LOG_FIELD_TIME equ 00000002h
        HTTP_LOG_FIELD_CLIENT_IP equ 00000004h
        HTTP_LOG_FIELD_USER_NAME equ 00000008h
        HTTP_LOG_FIELD_SITE_NAME equ 00000010h
        HTTP_LOG_FIELD_COMPUTER_NAME equ 00000020h
        HTTP_LOG_FIELD_SERVER_IP equ 00000040h
        HTTP_LOG_FIELD_METHOD equ 00000080h
        HTTP_LOG_FIELD_URI_STEM equ 00000100h
        HTTP_LOG_FIELD_URI_QUERY equ 00000200h
        HTTP_LOG_FIELD_STATUS equ 00000400h
        HTTP_LOG_FIELD_WIN32_STATUS equ 00000800h
        HTTP_LOG_FIELD_BYTES_SENT equ 00001000h
        HTTP_LOG_FIELD_BYTES_RECV equ 00002000h
        HTTP_LOG_FIELD_TIME_TAKEN equ 00004000h
        HTTP_LOG_FIELD_SERVER_PORT equ 00008000h
        HTTP_LOG_FIELD_USER_AGENT equ 00010000h
        HTTP_LOG_FIELD_COOKIE equ 00020000h
        HTTP_LOG_FIELD_REFERER equ 00040000h
        HTTP_LOG_FIELD_VERSION equ 00080000h
        HTTP_LOG_FIELD_HOST equ 00100000h
        HTTP_LOG_FIELD_SUB_STATUS equ 00200000h
        HTTP_LOG_FIELD_STREAM_ID equ 08000000h
        HTTP_LOG_FIELD_STREAM_ID_EX equ 10000000h
        HTTP_LOG_FIELD_TRANSPORT_TYPE equ 20000000h
        ; Fields that are used only for error logging.
        HTTP_LOG_FIELD_CLIENT_PORT equ 00400000h
        HTTP_LOG_FIELD_URI equ 00800000h
        HTTP_LOG_FIELD_SITE_ID equ 01000000h
        HTTP_LOG_FIELD_REASON equ 02000000h
        HTTP_LOG_FIELD_QUEUE_NAME equ 04000000h
        HTTP_LOG_FIELD_CORRELATION_ID equ 40000000h
        HTTP_LOG_FIELD_FAULT_CODE equ 80000000h
        ; Defines the logging type.
        HTTP_LOGGING_TYPE typedef SDWORD
        HttpLoggingTypeW3C equ 0
        HttpLoggingTypeIIS equ 1
        HttpLoggingTypeNCSA equ 2
        HttpLoggingTypeRaw equ 3
        _HTTP_LOGGING_TYPE typedef HTTP_LOGGING_TYPE
        PHTTP_LOGGING_TYPE typedef ptr HTTP_LOGGING_TYPE
        ; Defines the rollover type for log files.
        HTTP_LOGGING_ROLLOVER_TYPE typedef SDWORD
        HttpLoggingRolloverSize equ 0
        HttpLoggingRolloverDaily equ 1
        HttpLoggingRolloverWeekly equ 2
        HttpLoggingRolloverMonthly equ 3
        HttpLoggingRolloverHourly equ 4
        _HTTP_LOGGING_ROLLOVER_TYPE typedef HTTP_LOGGING_ROLLOVER_TYPE
        PHTTP_LOGGING_ROLLOVER_TYPE typedef ptr HTTP_LOGGING_ROLLOVER_TYPE
        ; Log file rollover size can not be set lower than the following
        ; limit. The value is in bytes.
        HTTP_MIN_ALLOWED_LOG_FILE_ROLLOVER_SIZE equ ((1 * 1024 * 1024))
        ; Logging option flags. When used in the logging configuration alters
        ; some default logging behaviour.
        ; HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER - This flag is used to change
        ;      the log file rollover to happen by local time based. By default
        ;      log file rollovers happen by GMT time.
        ; HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION - When set the unicode fields
        ;      will be converted to UTF8 multibytes when writting to the log
        ;      files. When this flag is not present, the local code page
        ;      conversion happens.
        ; HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY -
        ; HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY - These two flags are used to
        ;      to do selective logging. If neither of them are present both
        ;      types of requests will be logged. Only one these flags can be
        ;      set at a time. They are mutually exclusive.
        HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER equ (00000001h)
        HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION equ (00000002h)
        HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY equ (00000004h)
        HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY equ (00000008h)
        ; Configuration structure used for setting the logging property.
        HTTP_LOGGING_INFO struct
          ; Specifies whether this property exists or not.
          Flags HTTP_PROPERTY_FLAGS <>
          ; Optional logging flags.
          LoggingFlags DWORD ?
          ; Optional informatonal software directive string for W3C type logging. Not
          ; used for other types of logging. If nothing is provided here HTTPAPI will
          ; log a default string. Any arbitrary string could be used here to identify
          ; the application. Length cannot be greater than MAX_PATH. Lenght is in
          ; bytes.
          SoftwareName PCWSTR ?
          SoftwareNameLength WORD ?
          ; Log file directory must be a fully qualified path.
          ; Length must be in number of bytes.
          DirectoryNameLength WORD ?
          DirectoryName PCWSTR ?
          ; Specifies the format for the log files.
          Format HTTP_LOGGING_TYPE ?
          ; Bitmask value indicates which fields to be logged
          ; if the log format is set to W3C. This must be the 'bitwise or'
          ; of the HTTP_LOG_FIELD_... values.
          Fields DWORD ?
          ; Following fields are reserved they must be NULL and zero..
          pExtFields POINTER ?
          NumOfExtFields WORD ?
          ; Reserved must be zero.
          MaxRecordSize WORD ?
          ; Defines the rollover type for the log files.
          RolloverType HTTP_LOGGING_ROLLOVER_TYPE ?
          ; Indicates the maximum size (in bytes) after which
          ; the log files should be rolled over. A value of -1
          ; (HTTP_LIMIT_INFINITE) indicates an unlimited size.
          ; This value is discarded if rollover type is not set to
          ; HttpLoggingRolloverSize.
          RolloverSize DWORD ?
          ; Specifies the security descriptor to be applied to
          ; the log files and the sub-directories. If null we will
          ; inherit the system default. This security descriptor must
          ; be self-relative.
          pSecurityDescriptor PSECURITY_DESCRIPTOR ?
        HTTP_LOGGING_INFO ends
        _HTTP_LOGGING_INFO typedef HTTP_LOGGING_INFO
        PHTTP_LOGGING_INFO typedef ptr HTTP_LOGGING_INFO
        ; Binding information.
        HTTP_BINDING_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          RequestQueueHandle HANDLE ?
        HTTP_BINDING_INFO ends
        _HTTP_BINDING_INFO typedef HTTP_BINDING_INFO
        PHTTP_BINDING_INFO typedef ptr HTTP_BINDING_INFO
      endif
      if _WIN32_WINNT ge _WIN32_WINNT_WIN7
        ; Defines the protection level types for UrlGroups.
        HTTP_PROTECTION_LEVEL_TYPE typedef SDWORD
        ; This option will allow edge (NAT) traversed traffic, i.e. Teredo
        ; for the UrlGroup, unless there is an admin rule that overwrites the
        ; application's intend.
        HttpProtectionLevelUnrestricted equ 0
        ; This setting will ensure that edge (NAT) traversed traffic
        ; will not be allowed.
        HttpProtectionLevelEdgeRestricted equ 1
        ; Below type is not supported by HTTP API.
        HttpProtectionLevelRestricted equ 2
        _HTTP_PROTECTION_LEVEL_TYPE typedef HTTP_PROTECTION_LEVEL_TYPE
        PHTTP_PROTECTION_LEVEL_TYPE typedef ptr HTTP_PROTECTION_LEVEL_TYPE
        ; Controls whether the associated UrlGroup Namespace should receive
        ; edge traversed traffic. By default this parameter is unspecified.
        HTTP_PROTECTION_LEVEL_INFO struct
          Flags HTTP_PROPERTY_FLAGS <>
          Level HTTP_PROTECTION_LEVEL_TYPE ?
        HTTP_PROTECTION_LEVEL_INFO ends
        _HTTP_PROTECTION_LEVEL_INFO typedef HTTP_PROTECTION_LEVEL_INFO
        PHTTP_PROTECTION_LEVEL_INFO typedef ptr HTTP_PROTECTION_LEVEL_INFO
      endif
      if _WIN32_WINNT ge 0600h
        ; Definitions for request queue manipulation.
        ; These flags are used with HttpCreateRequestQueue() API.
        ; HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING - To open an existing request
        ; queue. The request queue name must be supplied.
        ; HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER - Creates the request queue and
        ; marks that the caller process is not willing to do send/receive (HTTP I/O)on
        ; the handle directly.
        HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING equ (00000001h)
        HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER equ (00000002h)
        HTTP_CREATE_REQUEST_QUEUE_FLAG_DELEGATION equ (00000008h)
      endif
      ; _WIN32_WINNT >= 0x0600
      ; Flags for HttpReceiveHttpRequest().
      ; HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY - Specifies that the caller would like
      ; any available entity body to be copied along with the protocol headers.
      ; HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY - Specifies that the caller would like
      ; all of the entity bodies to be copied along with the protocol headers.
      HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY equ 00000001h
      HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY equ 00000002h
      if _WIN32_WINNT ge 0600h
        ; Flags for HttpReceiveRequestEntityBody().
        ; HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER - Specifies that the
        ; caller would like the buffer to get filled up with entity bodies unless
        ; there are no more entity bodies to be copied.
        HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER equ 00000001h
      endif
      ; _WIN32_WINNT >= 0x0600
      ; Flags for HttpSendHttpResponse() and HttpSendResponseEntityBody().
      ; HTTP_SEND_RESPONSE_FLAG_DISCONNECT - Specifies that the network connection
      ; should be disconnected immediately after sending the response, overriding
      ; the HTTP protocol's persistent connection features, such as
      ; "Connection: keep-alive".
      ; HTTP_SEND_RESPONSE_FLAG_MORE_DATA - Specifies that additional entity body
      ; data will be sent by the caller.
      ; HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA - Specifies that a caller wants the
      ; response to complete as soon as possible at the cost of buffering partial
      ; or the entire response.
      ; HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING - Specifies that a caller wants to
      ; enable the TCP nagling algorithm for this particular send.
      ; HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES - Specifies that for a range request
      ; a full response content is passed and a caller wants HTTP API to process
      ; ranges properly.
      ; HTTP_SEND_RESPONSE_FLAG_OPAQUE - Specifies that the request/response is not
      ; HTTP compliant and all subsequent bytes should be treated as entity-body.
      ; HTTP_SEND_RESPONSE_FLAG_GOAWAY - A flag that must always be specified with
      ; HTTP_SEND_RESPONSE_FLAG_DISCONNECT. For pure HTTP/1.x connections, that is
      ; connections that don't do HTTP/2 and HTTP/3, this behaves the same as
      ; HTTP_SEND_RESPONSE_FLAG_DISCONNECT. For HTTP/2 and HTTP/3, this results in
      ; sending a GOAWAY frame and will cause the client to move to a different
      ; connection.
      HTTP_SEND_RESPONSE_FLAG_DISCONNECT equ 00000001h
      HTTP_SEND_RESPONSE_FLAG_MORE_DATA equ 00000002h
      HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA equ 00000004h
      HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING equ 00000008h
      HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES equ 00000020h
      HTTP_SEND_RESPONSE_FLAG_OPAQUE equ 00000040h
      HTTP_SEND_RESPONSE_FLAG_GOAWAY equ 00000100h
      ; Flags for HttpFlushResponseCache().
      ; HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE - Flushes the specified URL and all
      ; hierarchally-related sub-URLs from the response or fragment cache.
      HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE equ 00000001h
      ; Opaque identifiers for various HTTPAPI objects.
      HTTP_OPAQUE_ID typedef ULONGLONG
      PHTTP_OPAQUE_ID typedef ptr ULONGLONG
      HTTP_REQUEST_ID typedef HTTP_OPAQUE_ID
      PHTTP_REQUEST_ID typedef ptr HTTP_OPAQUE_ID
      HTTP_CONNECTION_ID typedef HTTP_OPAQUE_ID
      PHTTP_CONNECTION_ID typedef ptr HTTP_OPAQUE_ID
      HTTP_RAW_CONNECTION_ID typedef HTTP_OPAQUE_ID
      PHTTP_RAW_CONNECTION_ID typedef ptr HTTP_OPAQUE_ID
      if _WIN32_WINNT ge 0600h
        HTTP_URL_GROUP_ID typedef HTTP_OPAQUE_ID
        PHTTP_URL_GROUP_ID typedef ptr HTTP_OPAQUE_ID
        HTTP_SERVER_SESSION_ID typedef HTTP_OPAQUE_ID
        PHTTP_SERVER_SESSION_ID typedef ptr HTTP_OPAQUE_ID
        ; #if _WIN32_WINNT >= Somevalue
        HTTP_CLIENT_REQUEST_ID typedef HTTP_OPAQUE_ID
        PHTTP_CLIENT_REQUEST_ID typedef ptr HTTP_OPAQUE_ID
        HTTP_CLIENT_CONNECTION_ID typedef HTTP_OPAQUE_ID
        PHTTP_CLIENT_CONNECTION_ID typedef ptr HTTP_OPAQUE_ID
        HTTP_CLIENT_STREAM_ID typedef HTTP_OPAQUE_ID
        PHTTP_CLIENT_STREAM_ID typedef ptr HTTP_OPAQUE_ID
      endif
      ; _WIN32_WINNT >= 0x0600
      ; Macros for opaque identifier manipulations.
      HTTP_NULL_ID equ (0)
      HTTP_IS_NULL_ID macro pid
        exitm <(HTTP_NULL_ID == * (pid))>
      endm
      HTTP_SET_NULL_ID macro pid
        exitm <(* (pid) = HTTP_NULL_ID)>
      endm
      ; This structure defines a file byte range.
      ; If the Length field is HTTP_BYTE_RANGE_TO_EOF then the remainder of the
      ; file (everything after StartingOffset) is sent.
      HTTP_BYTE_RANGE_TO_EOF equ (- 1)
      HTTP_BYTE_RANGE struct
        StartingOffset ULARGE_INTEGER <>
        Length_ ULARGE_INTEGER <>
      HTTP_BYTE_RANGE ends
      _HTTP_BYTE_RANGE typedef HTTP_BYTE_RANGE
      PHTTP_BYTE_RANGE typedef ptr HTTP_BYTE_RANGE
      ; The type for HTTP protocol version numbers.
      ifdef HTTP_VERSION
      endif
      HTTP_VERSION struct
        MajorVersion WORD ?
        MinorVersion WORD ?
      HTTP_VERSION ends
      _HTTP_VERSION typedef HTTP_VERSION
      PHTTP_VERSION typedef ptr HTTP_VERSION
      ; Some useful macros for HTTP protocol version manipulation.
      HTTP_VERSION_UNKNOWN equ { 0, 0 }
      HTTP_VERSION_0_9 equ { 0, 9 }
      HTTP_VERSION_1_0 equ { 1, 0 }
      HTTP_VERSION_1_1 equ { 1, 1 }
      HTTP_VERSION_2_0 equ { 2, 0 }
      HTTP_VERSION_3_0 equ { 3, 0 }
      HTTP_SET_VERSION macro version, major, minor
        exitm <do { (version).MajorVersion = (major) ; (version).MinorVersion = (minor) ; } while (0)>
      endm
      HTTP_EQUAL_VERSION macro version, major, minor
        exitm <((version).MajorVersion == (major) and (version).MinorVersion == (minor))>
      endm
      HTTP_GREATER_VERSION macro version, major, minor
        exitm <((version).MajorVersion > (major) or ((version).MajorVersion == (major) and (version).MinorVersion > (minor)))>
      endm
      HTTP_LESS_VERSION macro version, major, minor
        exitm <((version).MajorVersion < (major) or ((version).MajorVersion == (major) and (version).MinorVersion < (minor)))>
      endm
      HTTP_NOT_EQUAL_VERSION macro version, major, minor
        exitm <(! HTTP_EQUAL_VERSION(version, major, minor))>
      endm
      HTTP_GREATER_EQUAL_VERSION macro version, major, minor
        exitm <(! HTTP_LESS_VERSION(version, major, minor))>
      endm
      HTTP_LESS_EQUAL_VERSION macro version, major, minor
        exitm <(! HTTP_GREATER_VERSION(version, major, minor))>
      endm
      ; The enum type for HTTP Scheme.
      HTTP_SCHEME typedef SDWORD
      HttpSchemeHttp equ 0
      HttpSchemeHttps equ 1
      HttpSchemeMaximum equ 2
      _HTTP_URI_SCHEME typedef HTTP_SCHEME
      PHTTP_URI_SCHEME typedef ptr HTTP_SCHEME
      ; The enum type for HTTP verbs.
      HTTP_VERB typedef SDWORD
      HttpVerbUnparsed equ 0
      HttpVerbUnknown equ 1
      HttpVerbInvalid equ 2
      HttpVerbOPTIONS equ 3
      HttpVerbGET equ 4
      HttpVerbHEAD equ 5
      HttpVerbPOST equ 6
      HttpVerbPUT equ 7
      HttpVerbDELETE equ 8
      HttpVerbTRACE equ 9
      HttpVerbCONNECT equ 10
      HttpVerbTRACK equ 11
      ; used by Microsoft Cluster Server for a non-logged trace
      HttpVerbMOVE equ 12
      HttpVerbCOPY equ 13
      HttpVerbPROPFIND equ 14
      HttpVerbPROPPATCH equ 15
      HttpVerbMKCOL equ 16
      HttpVerbLOCK equ 17
      HttpVerbUNLOCK equ 18
      HttpVerbSEARCH equ 19
      HttpVerbMaximum equ 20
      _HTTP_VERB typedef HTTP_VERB
      PHTTP_VERB typedef ptr HTTP_VERB
      ; Symbols for all HTTP/1.1 headers and other tokens. Notice request +
      ; response values overlap. Make sure you know which type of header array
      ; you are indexing.
      ; These values are used as offsets into arrays and as token values in
      ; HTTP_KNOWN_HEADER arrays in HTTP_REQUEST_HEADERS and HTTP_RESPONSE_HEADERS.
      ; See RFC 2616, HTTP/1.1, for further explanation of most of these headers.
      HTTP_HEADER_ID typedef SDWORD
      HttpHeaderCacheControl equ 0
      ; general-header [section 4.5]
      HttpHeaderConnection equ 1
      ; general-header [section 4.5]
      HttpHeaderDate equ 2
      ; general-header [section 4.5]
      HttpHeaderKeepAlive equ 3
      ; general-header [not in rfc]
      HttpHeaderPragma equ 4
      ; general-header [section 4.5]
      HttpHeaderTrailer equ 5
      ; general-header [section 4.5]
      HttpHeaderTransferEncoding equ 6
      ; general-header [section 4.5]
      HttpHeaderUpgrade equ 7
      ; general-header [section 4.5]
      HttpHeaderVia equ 8
      ; general-header [section 4.5]
      HttpHeaderWarning equ 9
      ; general-header [section 4.5]
      HttpHeaderAllow equ 10
      ; entity-header  [section 7.1]
      HttpHeaderContentLength equ 11
      ; entity-header  [section 7.1]
      HttpHeaderContentType equ 12
      ; entity-header  [section 7.1]
      HttpHeaderContentEncoding equ 13
      ; entity-header  [section 7.1]
      HttpHeaderContentLanguage equ 14
      ; entity-header  [section 7.1]
      HttpHeaderContentLocation equ 15
      ; entity-header  [section 7.1]
      HttpHeaderContentMd5 equ 16
      ; entity-header  [section 7.1]
      HttpHeaderContentRange equ 17
      ; entity-header  [section 7.1]
      HttpHeaderExpires equ 18
      ; entity-header  [section 7.1]
      HttpHeaderLastModified equ 19
      ; entity-header  [section 7.1]
      ; Request Headers
      HttpHeaderAccept equ 20
      ; request-header [section 5.3]
      HttpHeaderAcceptCharset equ 21
      ; request-header [section 5.3]
      HttpHeaderAcceptEncoding equ 22
      ; request-header [section 5.3]
      HttpHeaderAcceptLanguage equ 23
      ; request-header [section 5.3]
      HttpHeaderAuthorization equ 24
      ; request-header [section 5.3]
      HttpHeaderCookie equ 25
      ; request-header [not in rfc]
      HttpHeaderExpect equ 26
      ; request-header [section 5.3]
      HttpHeaderFrom equ 27
      ; request-header [section 5.3]
      HttpHeaderHost equ 28
      ; request-header [section 5.3]
      HttpHeaderIfMatch equ 29
      ; request-header [section 5.3]
      HttpHeaderIfModifiedSince equ 30
      ; request-header [section 5.3]
      HttpHeaderIfNoneMatch equ 31
      ; request-header [section 5.3]
      HttpHeaderIfRange equ 32
      ; request-header [section 5.3]
      HttpHeaderIfUnmodifiedSince equ 33
      ; request-header [section 5.3]
      HttpHeaderMaxForwards equ 34
      ; request-header [section 5.3]
      HttpHeaderProxyAuthorization equ 35
      ; request-header [section 5.3]
      HttpHeaderReferer equ 36
      ; request-header [section 5.3]
      HttpHeaderRange equ 37
      ; request-header [section 5.3]
      HttpHeaderTe equ 38
      ; request-header [section 5.3]
      HttpHeaderTranslate equ 39
      ; request-header [webDAV, not in rfc 2518]
      HttpHeaderUserAgent equ 40
      ; request-header [section 5.3]
      HttpHeaderRequestMaximum equ 41
      ; Response Headers
      HttpHeaderAcceptRanges equ 20
      ; response-header [section 6.2]
      HttpHeaderAge equ 21
      ; response-header [section 6.2]
      HttpHeaderEtag equ 22
      ; response-header [section 6.2]
      HttpHeaderLocation equ 23
      ; response-header [section 6.2]
      HttpHeaderProxyAuthenticate equ 24
      ; response-header [section 6.2]
      HttpHeaderRetryAfter equ 25
      ; response-header [section 6.2]
      HttpHeaderServer equ 26
      ; response-header [section 6.2]
      HttpHeaderSetCookie equ 27
      ; response-header [not in rfc]
      HttpHeaderVary equ 28
      ; response-header [section 6.2]
      HttpHeaderWwwAuthenticate equ 29
      ; response-header [section 6.2]
      HttpHeaderResponseMaximum equ 30
      HttpHeaderMaximum equ 41
      _HTTP_HEADER_ID typedef HTTP_HEADER_ID
      PHTTP_HEADER_ID typedef ptr HTTP_HEADER_ID
      ; Structure defining format of a known HTTP header.
      ; Name is from HTTP_HEADER_ID.
      HTTP_KNOWN_HEADER struct
        RawValueLength WORD ?
        ; in bytes not including the NUL
        pRawValue PCSTR ?
      HTTP_KNOWN_HEADER ends
      _HTTP_KNOWN_HEADER typedef HTTP_KNOWN_HEADER
      PHTTP_KNOWN_HEADER typedef ptr HTTP_KNOWN_HEADER
      ; Structure defining format of an unknown header.
      HTTP_UNKNOWN_HEADER struct
        NameLength WORD ?
        ; in bytes not including the NUL
        RawValueLength WORD ?
        ; in bytes not including the NUL
        pName PCSTR ?
        ; The header name (minus the ':' character)
        pRawValue PCSTR ?
        ; The header value
      HTTP_UNKNOWN_HEADER ends
      _HTTP_UNKNOWN_HEADER typedef HTTP_UNKNOWN_HEADER
      PHTTP_UNKNOWN_HEADER typedef ptr HTTP_UNKNOWN_HEADER
      if _WIN32_WINNT ge 0600h
        ; Log fields data structure is used for logging a request. This structure must
        ; be provided along with an HttpSendHttpResponse or HttpSendResponseEntityBody
        ; call that concludes the send.
        ; Base structure is for future versioning.
        HTTP_LOG_DATA_TYPE typedef SDWORD
        HttpLogDataTypeFields equ 0
        _HTTP_LOG_DATA_TYPE typedef HTTP_LOG_DATA_TYPE
        PHTTP_LOG_DATA_TYPE typedef ptr HTTP_LOG_DATA_TYPE
        ; should we DECLSPEC_ALIGN(4 or 8) == DECLSPEC_POINTERALIGN?
        HTTP_LOG_DATA struct
          Type_ HTTP_LOG_DATA_TYPE ?
        HTTP_LOG_DATA ends
        _HTTP_LOG_DATA typedef HTTP_LOG_DATA
        PHTTP_LOG_DATA typedef ptr HTTP_LOG_DATA
        ; Current log fields data structure for of type HttpLogDataTypeFields.
        HTTP_LOG_FIELDS_DATA struct
          Base HTTP_LOG_DATA <>
          UserNameLength WORD ?
          UriStemLength WORD ?
          ClientIpLength WORD ?
          ServerNameLength WORD ?
          ServiceNameLength WORD ?
          ServerIpLength WORD ?
          MethodLength WORD ?
          UriQueryLength WORD ?
          HostLength WORD ?
          UserAgentLength WORD ?
          CookieLength WORD ?
          ReferrerLength WORD ?
          UserName PWCHAR ?
          UriStem PWCHAR ?
          ClientIp POINTER ?
          ServerName POINTER ?
          ServiceName POINTER ?
          ServerIp POINTER ?
          Method_ POINTER ?
          UriQuery POINTER ?
          Host POINTER ?
          UserAgent POINTER ?
          Cookie POINTER ?
          Referrer POINTER ?
          ServerPort WORD ?
          ProtocolStatus WORD ?
          Win32Status DWORD ?
          MethodNum HTTP_VERB ?
          SubStatus WORD ?
        HTTP_LOG_FIELDS_DATA ends
        _HTTP_LOG_FIELDS_DATA typedef HTTP_LOG_FIELDS_DATA
        PHTTP_LOG_FIELDS_DATA typedef ptr HTTP_LOG_FIELDS_DATA
      endif
      ; _WIN32_WINNT >= 0x0600
      ; This enum defines a data source for a particular chunk of data.
      HTTP_DATA_CHUNK_TYPE typedef SDWORD
      HttpDataChunkFromMemory equ 0
      HttpDataChunkFromFileHandle equ 1
      HttpDataChunkFromFragmentCache equ 2
      HttpDataChunkFromFragmentCacheEx equ 3
      HttpDataChunkTrailers equ 4
      HttpDataChunkMaximum equ 5
      _HTTP_DATA_CHUNK_TYPE typedef HTTP_DATA_CHUNK_TYPE
      PHTTP_DATA_CHUNK_TYPE typedef ptr HTTP_DATA_CHUNK_TYPE
      ; This structure describes an individual data chunk.
      HTTP_DATA_CHUNK struct
        ; The type of this data chunk.
        DataChunkType HTTP_DATA_CHUNK_TYPE ?
        ; The data chunk structures, one per supported data chunk type.
        union
          ; From-memory data chunk.
          struct FromMemory
            pBuffer POINTER ?
            BufferLength DWORD ?
          ends
          ; From-file handle data chunk.
          struct FromFileHandle
            ByteRange HTTP_BYTE_RANGE <>
            FileHandle HANDLE ?
          ends
          ; From-fragment cache data chunk.
          struct FromFragmentCache
            FragmentNameLength WORD ?
            ; in bytes not including the NUL
            pFragmentName PCWSTR ?
          ends
          ; From-fragment cache data chunk that specifies a byte range.
          struct FromFragmentCacheEx
            ByteRange HTTP_BYTE_RANGE <>
            pFragmentName PCWSTR ?
            ; NULL-terminated string
          ends
          ; Trailer data chunk that specifies Trailer headers.
          struct Trailers
            TrailerCount WORD ?
            pTrailers PHTTP_UNKNOWN_HEADER ?
          ends
        ends
      HTTP_DATA_CHUNK ends
      _HTTP_DATA_CHUNK typedef HTTP_DATA_CHUNK
      PHTTP_DATA_CHUNK typedef ptr HTTP_DATA_CHUNK
      ; HTTP API doesn't support 16 bit applications.
      ; Neither WIN32 nor _WIN64 was defined.
      ; Structure defining format of request headers.
      HTTP_REQUEST_HEADERS struct
        ; The array of unknown HTTP headers and the number of
        ; entries in the array.
        UnknownHeaderCount WORD ?
        pUnknownHeaders PHTTP_UNKNOWN_HEADER ?
        ; Trailers - we don't use these currently, reserved for a future release
        TrailerCount WORD ?
        ; Reserved, must be 0
        pTrailers PHTTP_UNKNOWN_HEADER ?
        ; Reserved, must be NULL
        ; Known headers.
        KnownHeaders HTTP_KNOWN_HEADER HttpHeaderRequestMaximum dup (<>)
      HTTP_REQUEST_HEADERS ends
      _HTTP_REQUEST_HEADERS typedef HTTP_REQUEST_HEADERS
      PHTTP_REQUEST_HEADERS typedef ptr HTTP_REQUEST_HEADERS
      ; Structure defining format of response headers.
      HTTP_RESPONSE_HEADERS struct
        ; The array of unknown HTTP headers and the number of
        ; entries in the array.
        UnknownHeaderCount WORD ?
        pUnknownHeaders PHTTP_UNKNOWN_HEADER ?
        ; Trailers - we don't use these currently, reserved for a future release
        TrailerCount WORD ?
        ; Reserved, must be 0
        pTrailers PHTTP_UNKNOWN_HEADER ?
        ; Reserved, must be NULL
        ; Known headers.
        KnownHeaders HTTP_KNOWN_HEADER HttpHeaderResponseMaximum dup (<>)
      HTTP_RESPONSE_HEADERS ends
      _HTTP_RESPONSE_HEADERS typedef HTTP_RESPONSE_HEADERS
      PHTTP_RESPONSE_HEADERS typedef ptr HTTP_RESPONSE_HEADERS
      ; Properties that can be passed down with IOCTL_HTTP_DELEGATE_REQUEST_EX
      HTTP_DELEGATE_REQUEST_PROPERTY_ID typedef SDWORD
      DelegateRequestReservedProperty equ 0
      DelegateRequestDelegateUrlProperty equ 1
      _HTTP_DELEGATE_REQUEST_PROPERTY_ID typedef HTTP_DELEGATE_REQUEST_PROPERTY_ID
      PHTTP_DELEGATE_REQUEST_PROPERTY_ID typedef ptr HTTP_DELEGATE_REQUEST_PROPERTY_ID
      HTTP_DELEGATE_REQUEST_PROPERTY_INFO struct
        PropertyId HTTP_DELEGATE_REQUEST_PROPERTY_ID ?
        PropertyInfoLength DWORD ?
        PropertyInfo POINTER ?
      HTTP_DELEGATE_REQUEST_PROPERTY_INFO ends
      _HTTP_DELEGATE_REQUEST_PROPERTY_INFO typedef HTTP_DELEGATE_REQUEST_PROPERTY_INFO
      PHTTP_DELEGATE_REQUEST_PROPERTY_INFO typedef ptr HTTP_DELEGATE_REQUEST_PROPERTY_INFO
      ; Properties that can be passed down with IOCTL_HTTP_CREATE_REQUEST_QUEUE_EX
      HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID typedef SDWORD
      CreateRequestQueueExternalIdProperty equ 1
      CreateRequestQueueMax equ 2
      _HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID typedef HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID
      PHTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID typedef ptr HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID
      HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO struct
        PropertyId HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID ?
        PropertyInfoLength DWORD ?
        PropertyInfo POINTER ?
      HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO ends
      _HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO typedef HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO
      PHTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO typedef ptr HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO
      ; Structure defining format of transport address. Use pLocalAddress->sa_family
      ; to determine whether this is an IPv4 address (AF_INET) or IPv6 (AF_INET6).
      ; pRemoteAddress->sa_family will be the same as pLocalAddress->sa_family.
      ; SOCKADDRs are always in network order, not host order.
      HTTP_TRANSPORT_ADDRESS struct
        pRemoteAddress PSOCKADDR ?
        pLocalAddress PSOCKADDR ?
      HTTP_TRANSPORT_ADDRESS ends
      _HTTP_TRANSPORT_ADDRESS typedef HTTP_TRANSPORT_ADDRESS
      PHTTP_TRANSPORT_ADDRESS typedef ptr HTTP_TRANSPORT_ADDRESS
      ; Structure defining format of cooked URL.
      HTTP_COOKED_URL struct
        ; Pointers overlap and point into pFullUrl. NULL if not present.
        FullUrlLength WORD ?
        ; in bytes not including the NUL
        HostLength WORD ?
        ; in bytes (no NUL)
        AbsPathLength WORD ?
        ; in bytes (no NUL)
        QueryStringLength WORD ?
        ; in bytes (no NUL)
        pFullUrl PCWSTR ?
        ; points to "http://hostname:port/abs/.../path?query"
        pHost PCWSTR ?
        ; points to the first char in the hostname
        pAbsPath PCWSTR ?
        ; Points to the 3rd '/' char
        pQueryString PCWSTR ?
        ; Points to the 1st '?' char or NULL
      HTTP_COOKED_URL ends
      _HTTP_COOKED_URL typedef HTTP_COOKED_URL
      PHTTP_COOKED_URL typedef ptr HTTP_COOKED_URL
      ; An opaque context for URL manipulation.
      HTTP_URL_CONTEXT typedef ULONGLONG
      if _WIN32_WINNT ge 0600h
        ; Optional flags for URL manipulation functions.
        ; HTTP_URL_FLAG_REMOVE_ALL : When this flag is used
        ; when removing a Url from a url group, regardless of
        ; the passed URL, all of the Urls from the url group
        ; will be removed.
        HTTP_URL_FLAG_REMOVE_ALL equ 00000001h
        ; Request Authentication related.
        HTTP_AUTH_STATUS typedef SDWORD
        HttpAuthStatusSuccess equ 0
        HttpAuthStatusNotAuthenticated equ 1
        HttpAuthStatusFailure equ 2
        _HTTP_AUTH_STATUS typedef HTTP_AUTH_STATUS
        PHTTP_AUTH_STATUS typedef ptr HTTP_AUTH_STATUS
        HTTP_REQUEST_AUTH_TYPE typedef SDWORD
        HttpRequestAuthTypeNone equ 0
        HttpRequestAuthTypeBasic equ 1
        HttpRequestAuthTypeDigest equ 2
        HttpRequestAuthTypeNTLM equ 3
        HttpRequestAuthTypeNegotiate equ 4
        HttpRequestAuthTypeKerberos equ 5
        _HTTP_REQUEST_AUTH_TYPE typedef HTTP_REQUEST_AUTH_TYPE
        PHTTP_REQUEST_AUTH_TYPE typedef ptr HTTP_REQUEST_AUTH_TYPE
      endif
      ; _WIN32_WINNT >= 0x0600
      ; SSL Client certificate information.
      HTTP_SSL_CLIENT_CERT_INFO struct
        CertFlags DWORD ?
        CertEncodedSize DWORD ?
        pCertEncoded PUCHAR ?
        Token HANDLE ?
        CertDeniedByMapper BYTE ?
      HTTP_SSL_CLIENT_CERT_INFO ends
      _HTTP_SSL_CLIENT_CERT_INFO typedef HTTP_SSL_CLIENT_CERT_INFO
      PHTTP_SSL_CLIENT_CERT_INFO typedef ptr HTTP_SSL_CLIENT_CERT_INFO
      if _WIN32_WINNT ge _WIN32_WINNT_WIN7
        ; Flag to retrieve secure channel binding with HttpReceiveClientCertificate
        HTTP_RECEIVE_SECURE_CHANNEL_TOKEN equ 1h
        ; Flag to retrieve full certificate chain with HttpReceiveClientCertificate
        HTTP_RECEIVE_FULL_CHAIN equ 2h
      endif
      ; Data computed during SSL handshake.
      HTTP_SSL_INFO struct
        ServerCertKeySize WORD ?
        ConnectionKeySize WORD ?
        ServerCertIssuerSize DWORD ?
        ServerCertSubjectSize DWORD ?
        pServerCertIssuer PCSTR ?
        pServerCertSubject PCSTR ?
        pClientCertInfo PHTTP_SSL_CLIENT_CERT_INFO ?
        SslClientCertNegotiated DWORD ?
      HTTP_SSL_INFO ends
      _HTTP_SSL_INFO typedef HTTP_SSL_INFO
      PHTTP_SSL_INFO typedef ptr HTTP_SSL_INFO
      ; HttpRequestInfoTypeSslProtocol payload.  Contains basic information about the
      ; SSL/TLS protocol and cipher.  See SecPkgContext_ConnectionInfo documentation
      ; for details.  This information is meant for statistics.  Do not use this for
      ; security enforcement because by the time you check this the client may
      ; already have transmitted the information being protected (e.g. HTTP request
      ; headers).
      HTTP_SSL_PROTOCOL_INFO struct
        Protocol DWORD ?
        CipherType DWORD ?
        CipherStrength DWORD ?
        HashType DWORD ?
        HashStrength DWORD ?
        KeyExchangeType DWORD ?
        KeyExchangeStrength DWORD ?
      HTTP_SSL_PROTOCOL_INFO ends
      _HTTP_SSL_PROTOCOL_INFO typedef HTTP_SSL_PROTOCOL_INFO
      PHTTP_SSL_PROTOCOL_INFO typedef ptr HTTP_SSL_PROTOCOL_INFO
      ; List of possible sizes for which information will be retured in HTTP_REQUEST_SIZING_INFO.
      HTTP_REQUEST_SIZING_TYPE typedef SDWORD
      HttpRequestSizingTypeTlsHandshakeLeg1ClientData equ 0
      ; Inbound/outbound data?
      HttpRequestSizingTypeTlsHandshakeLeg1ServerData equ 1
      HttpRequestSizingTypeTlsHandshakeLeg2ClientData equ 2
      HttpRequestSizingTypeTlsHandshakeLeg2ServerData equ 3
      HttpRequestSizingTypeHeaders equ 4
      HttpRequestSizingTypeMax equ 5
      _HTTP_REQUEST_SIZING_TYPE typedef HTTP_REQUEST_SIZING_TYPE
      PHTTP_REQUEST_SIZING_TYPE typedef ptr HTTP_REQUEST_SIZING_TYPE
      ; Flag values for HTTP_REQUEST_SIZING_INFO
      HTTP_REQUEST_SIZING_INFO_FLAG_TCP_FAST_OPEN equ 00000001h
      HTTP_REQUEST_SIZING_INFO_FLAG_TLS_SESSION_RESUMPTION equ 00000002h
      HTTP_REQUEST_SIZING_INFO_FLAG_TLS_FALSE_START equ 00000004h
      HTTP_REQUEST_SIZING_INFO_FLAG_FIRST_REQUEST equ 00000008h
      ; HttpRequestInfoTypeSizeInfo payload. Contains size information filled by
      ; each processsing stage.
      HTTP_REQUEST_SIZING_INFO struct
        Flags QWORD ?
        RequestIndex DWORD ?
        RequestSizingCount DWORD ?
        RequestSizing QWORD HttpRequestSizingTypeMax dup (?)
      HTTP_REQUEST_SIZING_INFO ends
      _HTTP_REQUEST_SIZING_INFO typedef HTTP_REQUEST_SIZING_INFO
      PHTTP_REQUEST_SIZING_INFO typedef ptr HTTP_REQUEST_SIZING_INFO
      ; List of possible request timings for which information will be retured in
      ; HTTP_REQUEST_TIMING_INFO. Not all timings apply for every request.
      HTTP_REQUEST_TIMING_TYPE typedef SDWORD
      HttpRequestTimingTypeConnectionStart equ 0
      HttpRequestTimingTypeDataStart equ 1
      HttpRequestTimingTypeTlsCertificateLoadStart equ 2
      HttpRequestTimingTypeTlsCertificateLoadEnd equ 3
      HttpRequestTimingTypeTlsHandshakeLeg1Start equ 4
      HttpRequestTimingTypeTlsHandshakeLeg1End equ 5
      HttpRequestTimingTypeTlsHandshakeLeg2Start equ 6
      HttpRequestTimingTypeTlsHandshakeLeg2End equ 7
      HttpRequestTimingTypeTlsAttributesQueryStart equ 8
      HttpRequestTimingTypeTlsAttributesQueryEnd equ 9
      HttpRequestTimingTypeTlsClientCertQueryStart equ 10
      HttpRequestTimingTypeTlsClientCertQueryEnd equ 11
      HttpRequestTimingTypeHttp2StreamStart equ 12
      HttpRequestTimingTypeHttp2HeaderDecodeStart equ 13
      HttpRequestTimingTypeHttp2HeaderDecodeEnd equ 14
      HttpRequestTimingTypeRequestHeaderParseStart equ 15
      HttpRequestTimingTypeRequestHeaderParseEnd equ 16
      HttpRequestTimingTypeRequestRoutingStart equ 17
      HttpRequestTimingTypeRequestRoutingEnd equ 18
      HttpRequestTimingTypeRequestQueuedForInspection equ 19
      HttpRequestTimingTypeRequestDeliveredForInspection equ 20
      HttpRequestTimingTypeRequestReturnedAfterInspection equ 21
      HttpRequestTimingTypeRequestQueuedForDelegation equ 22
      HttpRequestTimingTypeRequestDeliveredForDelegation equ 23
      HttpRequestTimingTypeRequestReturnedAfterDelegation equ 24
      HttpRequestTimingTypeRequestQueuedForIO equ 25
      HttpRequestTimingTypeRequestDeliveredForIO equ 26
      HttpRequestTimingTypeHttp3StreamStart equ 27
      HttpRequestTimingTypeHttp3HeaderDecodeStart equ 28
      HttpRequestTimingTypeHttp3HeaderDecodeEnd equ 29
      HttpRequestTimingTypeMax equ 30
      _HTTP_REQUEST_TIMING_TYPE typedef HTTP_REQUEST_TIMING_TYPE
      PHTTP_REQUEST_TIMING_TYPE typedef ptr HTTP_REQUEST_TIMING_TYPE
      ; HttpRequestInfoTypeTiming payload.  Contains information about how much
      ; time was spent at each request processing stage.
      HTTP_REQUEST_TIMING_INFO struct
        RequestTimingCount DWORD ?
        RequestTiming QWORD HttpRequestTimingTypeMax dup (?)
      HTTP_REQUEST_TIMING_INFO ends
      _HTTP_REQUEST_TIMING_INFO typedef HTTP_REQUEST_TIMING_INFO
      PHTTP_REQUEST_TIMING_INFO typedef ptr HTTP_REQUEST_TIMING_INFO
      if _WIN32_WINNT ge 0600h
        ; Generic request information type.
        HTTP_REQUEST_INFO_TYPE typedef SDWORD
        HttpRequestInfoTypeAuth equ 0
        HttpRequestInfoTypeChannelBind equ 1
        HttpRequestInfoTypeSslProtocol equ 2
        HttpRequestInfoTypeSslTokenBindingDraft equ 3
        HttpRequestInfoTypeSslTokenBinding equ 4
        HttpRequestInfoTypeRequestTiming equ 5
        HttpRequestInfoTypeTcpInfoV0 equ 6
        HttpRequestInfoTypeRequestSizing equ 7
        HttpRequestInfoTypeQuicStats equ 8
        HttpRequestInfoTypeTcpInfoV1 equ 9
        _HTTP_REQUEST_INFO_TYPE typedef HTTP_REQUEST_INFO_TYPE
        PHTTP_REQUEST_INFO_TYPE typedef ptr HTTP_REQUEST_INFO_TYPE
        HTTP_REQUEST_INFO struct
          InfoType HTTP_REQUEST_INFO_TYPE ?
          InfoLength DWORD ?
          pInfo POINTER ?
        HTTP_REQUEST_INFO ends
        _HTTP_REQUEST_INFO typedef HTTP_REQUEST_INFO
        PHTTP_REQUEST_INFO typedef ptr HTTP_REQUEST_INFO
        ifndef __SECSTATUS_DEFINED__
          SECURITY_STATUS typedef LONG
          __SECSTATUS_DEFINED__ equ <>
        endif
        ; __SECSTATUS_DEFINED__
        ; Authentication request info structure
        HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED equ (00000001h)
        HTTP_REQUEST_AUTH_INFO struct
          AuthStatus HTTP_AUTH_STATUS ?
          SecStatus SECURITY_STATUS ?
          Flags DWORD ?
          AuthType HTTP_REQUEST_AUTH_TYPE ?
          AccessToken HANDLE ?
          ContextAttributes DWORD ?
          ; Optional serialized context.
          PackedContextLength DWORD ?
          PackedContextType DWORD ?
          PackedContext POINTER ?
          ; Optional mutual authentication data and its length in bytes.
          MutualAuthDataLength DWORD ?
          pMutualAuthData POINTER ?
          ; For SSPI based schemes the package name is returned. Length does
          ; not include the terminating null and it is in bytes.
          PackageNameLength WORD ?
          pPackageName POINTER ?
        HTTP_REQUEST_AUTH_INFO ends
        _HTTP_REQUEST_AUTH_INFO typedef HTTP_REQUEST_AUTH_INFO
        PHTTP_REQUEST_AUTH_INFO typedef ptr HTTP_REQUEST_AUTH_INFO
      endif
      ; _WIN32_WINNT >= 0x0600
      ; The structure of an HTTP request for downlevel OS
      HTTP_REQUEST_V1 struct
        ; Request flags (see HTTP_REQUEST_FLAG_* definitions below).
        Flags DWORD ?
        ; An opaque request identifier. These values are used by the driver
        ; to correlate outgoing responses with incoming requests.
        ConnectionId HTTP_CONNECTION_ID ?
        RequestId HTTP_REQUEST_ID ?
        ; The context associated with the URL prefix.
        UrlContext HTTP_URL_CONTEXT ?
        ; The HTTP version number.
        Version HTTP_VERSION <>
        ; The request verb.
        Verb HTTP_VERB ?
        ; The length of the verb string if the Verb field is HttpVerbUnknown.
        UnknownVerbLength WORD ?
        ; in bytes not including the NUL
        ; The length of the raw (uncooked) URL
        RawUrlLength WORD ?
        ; in bytes not including the NUL
        ; Pointer to the verb string if the Verb field is HttpVerbUnknown.
        pUnknownVerb PCSTR ?
        ; Pointer to the raw (uncooked) URL
        pRawUrl PCSTR ?
        ; The canonicalized Unicode URL
        CookedUrl HTTP_COOKED_URL <>
        ; Local and remote transport addresses for the connection.
        Address HTTP_TRANSPORT_ADDRESS <>
        ; The request headers.
        Headers HTTP_REQUEST_HEADERS <>
        ; The total number of bytes received from network for this request.
        BytesReceived QWORD ?
        ; pEntityChunks is an array of EntityChunkCount HTTP_DATA_CHUNKs. The
        ; entity body is copied only if HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY
        ; was passed to HttpReceiveHttpRequest().
        EntityChunkCount WORD ?
        pEntityChunks PHTTP_DATA_CHUNK ?
        ; SSL connection information.
        RawConnectionId HTTP_RAW_CONNECTION_ID ?
        pSslInfo PHTTP_SSL_INFO ?
      HTTP_REQUEST_V1 ends
      _HTTP_REQUEST_V1 typedef HTTP_REQUEST_V1
      PHTTP_REQUEST_V1 typedef ptr HTTP_REQUEST_V1
      if _WIN32_WINNT ge 0600h
        ; Vista
        ; Version 2.0 members are defined here
        ; N.B. One must define V2 elements in two places :(
        ;      This is due to the fact that C++ doesn't allow anonymous
        ;      structure declarations and one must use structure
        ;      inheritance instead.
        ifdef __cplusplus
          ;[...]
        else
        ; __cplusplus
          HTTP_REQUEST_V2 struct
            ; Anonymous structure
            ; Version 2.0 members are declared below
            ; Additional Request Informations.
            RequestInfoCount WORD ?
            pRequestInfo PHTTP_REQUEST_INFO ?
          HTTP_REQUEST_V2 ends
          _HTTP_REQUEST_V2 typedef HTTP_REQUEST_V2
          PHTTP_REQUEST_V2 typedef ptr HTTP_REQUEST_V2
        endif
        ; __cplusplus
        HTTP_REQUEST typedef HTTP_REQUEST_V2
      else
      ; _WIN32_WINNT >= 0x0600
        HTTP_REQUEST typedef HTTP_REQUEST_V1
      endif
      ; _WIN32_WINNT >= 0x0600
      PHTTP_REQUEST typedef ptr HTTP_REQUEST
      ; Values for HTTP_REQUEST::Flags. Zero or more of these may be ORed together.
      ; HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS - there is more entity body
      ; to be read for this request. Otherwise, there is no entity body or
      ; all of the entity body was copied into pEntityChunks.
      ; HTTP_REQUEST_FLAG_IP_ROUTED - This flag indicates that the request has been
      ; routed based on host plus ip or ip binding.This is a hint for the application
      ; to include the local ip while flushing kernel cache entries build for this
      ; request if any.
      ; HTTP_REQUEST_FLAG_HTTP2 - Indicates the request was received over HTTP/2.
      ; HTTP_REQUEST_FLAG_HTTP3 - Indicates the request was received over HTTP/3.
      HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS equ 00000001h
      HTTP_REQUEST_FLAG_IP_ROUTED equ 00000002h
      HTTP_REQUEST_FLAG_HTTP2 equ 00000004h
      HTTP_REQUEST_FLAG_HTTP3 equ 00000008h
      ; This structure describes an HTTP response.
      HTTP_RESPONSE_V1 struct
        ; Response flags (see HTTP_RESPONSE_FLAG_* definitions below).
        Flags DWORD ?
        ; The raw HTTP protocol version number.
        Version HTTP_VERSION <>
        ; The HTTP status code (e.g., 200).
        StatusCode WORD ?
        ; The HTTP reason (e.g., "OK"). This MUST not contain
        ; non-ASCII characters (i.e., all chars must be in range 0x20-0x7E).
        ReasonLength WORD ?
        ; in bytes not including the '\0'
        pReason PCSTR ?
        ; The response headers.
        Headers HTTP_RESPONSE_HEADERS <>
        ; pEntityChunks points to an array of EntityChunkCount HTTP_DATA_CHUNKs.
        EntityChunkCount WORD ?
        pEntityChunks PHTTP_DATA_CHUNK ?
      HTTP_RESPONSE_V1 ends
      _HTTP_RESPONSE_V1 typedef HTTP_RESPONSE_V1
      PHTTP_RESPONSE_V1 typedef ptr HTTP_RESPONSE_V1
      if _WIN32_WINNT ge 0600h
        ; Values for HTTP_RESPONSE::Flags.
        ; HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE - Set this flag if encodings
        ; other than identity form are available for this resource.This flag is ignored
        ; if application has not asked for response to be cached. It's used as a hint
        ; to the Http Server API for content negotiation  used when serving from the
        ; the kernel response cache.
        ; HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS - there is more entity body
        ; to be read for this response.  Otherwise, there is no entity body or
        ; all of the entity body was copied into pEntityChunks.
        HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE equ 00000001h
        HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS equ 00000002h
        HTTP_RESPONSE_INFO_TYPE typedef SDWORD
        HttpResponseInfoTypeMultipleKnownHeaders equ 0
        HttpResponseInfoTypeAuthenticationProperty equ 1
        HttpResponseInfoTypeQoSProperty equ 2
        HttpResponseInfoTypeChannelBind equ 3
        _HTTP_RESPONSE_INFO_TYPE typedef HTTP_RESPONSE_INFO_TYPE
        PHTTP_RESPONSE_INFO_TYPE typedef HTTP_RESPONSE_INFO_TYPE
        HTTP_RESPONSE_INFO struct
          Type_ HTTP_RESPONSE_INFO_TYPE ?
          Length_ DWORD ?
          pInfo POINTER ?
        HTTP_RESPONSE_INFO ends
        _HTTP_RESPONSE_INFO typedef HTTP_RESPONSE_INFO
        PHTTP_RESPONSE_INFO typedef ptr HTTP_RESPONSE_INFO
        HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER equ 00000001h
        ; This structure allows the provision of providing multiple known headers.
        HTTP_MULTIPLE_KNOWN_HEADERS struct
          ; Known header id.
          HeaderId HTTP_HEADER_ID ?
          Flags DWORD ?
          ; Number of headers of the same category.
          KnownHeaderCount WORD ?
          ; Array of known header structures.
          KnownHeaders PHTTP_KNOWN_HEADER ?
        HTTP_MULTIPLE_KNOWN_HEADERS ends
        _HTTP_MULTIPLE_KNOWN_HEADERS typedef HTTP_MULTIPLE_KNOWN_HEADERS
        PHTTP_MULTIPLE_KNOWN_HEADERS typedef ptr HTTP_MULTIPLE_KNOWN_HEADERS
        ; Version 2.0 members are defined here
        ; N.B. One must define V2 elements in two places :(
        ;      This is due to the fact that C++ doesn't allow anonymous
        ;      structure declarations and one must use structure
        ;      inheritance instead.
        ifdef __cplusplus
          ;[...]
        else
        ; __cplusplus
          HTTP_RESPONSE_V2 struct
            ; Version 2.0 members are declared below
            ResponseInfoCount WORD ?
            pResponseInfo PHTTP_RESPONSE_INFO ?
          HTTP_RESPONSE_V2 ends
          _HTTP_RESPONSE_V2 typedef HTTP_RESPONSE_V2
          PHTTP_RESPONSE_V2 typedef ptr HTTP_RESPONSE_V2
        endif
        ; __cplusplus
        HTTP_RESPONSE typedef HTTP_RESPONSE_V2
      else
      ; _WIN32_WINNT >= 0x0600
        HTTP_RESPONSE typedef HTTP_RESPONSE_V1
      endif
      ; _WIN32_WINNT >= 0x0600
      PHTTP_RESPONSE typedef ptr HTTP_RESPONSE
      ; Api Version. This is used to ensure compatibility between applications and
      ; httpapi.dll and http.sys.
      ; This must not be confused with the HTTP Protocol version.
      HTTPAPI_VERSION struct
        HttpApiMajorVersion WORD ?
        HttpApiMinorVersion WORD ?
      HTTPAPI_VERSION ends
      _HTTPAPI_VERSION typedef HTTPAPI_VERSION
      PHTTPAPI_VERSION typedef ptr HTTPAPI_VERSION
      if _WIN32_WINNT ge 0600h
        ; Vista
        HTTPAPI_VERSION_2 equ { 2, 0 }
      endif
      ; _WIN32_WINNT >= 0x0600
      HTTPAPI_VERSION_1 equ { 1, 0 }
      HTTPAPI_EQUAL_VERSION macro version, major, minor
        exitm <((version).HttpApiMajorVersion == (major) and (version).HttpApiMinorVersion == (minor))>
      endm
      HTTPAPI_GREATER_VERSION macro version, major, minor
        exitm <((version).HttpApiMajorVersion > (major) or ((version).HttpApiMajorVersion == (major) and (version).HttpApiMinorVersion > (minor)))>
      endm
      HTTPAPI_LESS_VERSION macro version, major, minor
        exitm <((version).HttpApiMajorVersion < (major) or ((version).HttpApiMajorVersion == (major) and (version).HttpApiMinorVersion < (minor)))>
      endm
      HTTPAPI_VERSION_GREATER_OR_EQUAL macro version, major, minor
        exitm <(! HTTPAPI_LESS_VERSION(version, major, minor))>
      endm
      ; Cache control.
      ; This enum defines the available cache policies.
      HTTP_CACHE_POLICY_TYPE typedef SDWORD
      HttpCachePolicyNocache equ 0
      HttpCachePolicyUserInvalidates equ 1
      HttpCachePolicyTimeToLive equ 2
      HttpCachePolicyMaximum equ 3
      _HTTP_CACHE_POLICY_TYPE typedef HTTP_CACHE_POLICY_TYPE
      PHTTP_CACHE_POLICY_TYPE typedef ptr HTTP_CACHE_POLICY_TYPE
      ;  Only cache unauthorized GETs + HEADs.
      HTTP_CACHE_POLICY struct
        Policy HTTP_CACHE_POLICY_TYPE ?
        SecondsToLive DWORD ?
      HTTP_CACHE_POLICY ends
      _HTTP_CACHE_POLICY typedef HTTP_CACHE_POLICY
      PHTTP_CACHE_POLICY typedef ptr HTTP_CACHE_POLICY
      ; Enum that is used with HttpSetServiceConfiguration(),
      ; HttpQueryServiceConfiguration(), and HttpDeleteServiceConfiguration() APIs.
      HTTP_SERVICE_CONFIG_ID typedef SDWORD
      HttpServiceConfigIPListenList equ 0
      ; Set, Query & Delete.
      HttpServiceConfigSSLCertInfo equ 1
      ; Set, Update, Query & Delete.
      HttpServiceConfigUrlAclInfo equ 2
      ; Set, Query & Delete.
      HttpServiceConfigTimeout equ 3
      ; Set, Query & Delete.
      HttpServiceConfigCache equ 4
      ; Set, Query & Delete.
      if _WIN32_WINNT ge _WIN32_WINNT_WIN8
        HttpServiceConfigSslSniCertInfo equ 5
        ; Set, Update, Query & Delete.
        HttpServiceConfigSslCcsCertInfo equ 6
        ; Set, Update, Query & Delete.
      endif
      if _WIN32_WINNT ge _WIN32_WINNT_WIN10
        HttpServiceConfigSetting equ 7
        ; Set, Query & Delete.
      endif
      HttpServiceConfigSslCertInfoEx equ 8
      HttpServiceConfigSslSniCertInfoEx equ 9
      HttpServiceConfigSslCcsCertInfoEx equ 10
      HttpServiceConfigSslScopedCcsCertInfo equ 11
      HttpServiceConfigSslScopedCcsCertInfoEx equ 12
      HttpServiceConfigMax equ 13
      _HTTP_SERVICE_CONFIG_ID typedef HTTP_SERVICE_CONFIG_ID
      PHTTP_SERVICE_CONFIG_ID typedef ptr HTTP_SERVICE_CONFIG_ID
      ; Generic Query enum that can be used with HttpQueryServiceConfiguration()
      HTTP_SERVICE_CONFIG_QUERY_TYPE typedef SDWORD
      HttpServiceConfigQueryExact equ 0
      HttpServiceConfigQueryNext equ 1
      HttpServiceConfigQueryMax equ 2
      _HTTP_SERVICE_CONFIG_QUERY_TYPE typedef HTTP_SERVICE_CONFIG_QUERY_TYPE
      PHTTP_SERVICE_CONFIG_QUERY_TYPE typedef ptr HTTP_SERVICE_CONFIG_QUERY_TYPE
      ; These data structures are used to define the key types of the various SSL
      ; bindings.
      HTTP_SERVICE_CONFIG_SSL_KEY struct
        pIpPort PSOCKADDR ?
      HTTP_SERVICE_CONFIG_SSL_KEY ends
      _HTTP_SERVICE_CONFIG_SSL_KEY typedef HTTP_SERVICE_CONFIG_SSL_KEY
      PHTTP_SERVICE_CONFIG_SSL_KEY typedef ptr HTTP_SERVICE_CONFIG_SSL_KEY
      HTTP_SERVICE_CONFIG_SSL_KEY_EX struct
        IpPort SOCKADDR_STORAGE ?
      HTTP_SERVICE_CONFIG_SSL_KEY_EX ends
      _HTTP_SERVICE_CONFIG_SSL_KEY_EX typedef HTTP_SERVICE_CONFIG_SSL_KEY_EX
      PHTTP_SERVICE_CONFIG_SSL_KEY_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_KEY_EX
      if _WIN32_WINNT ge _WIN32_WINNT_WIN8
        HTTP_SERVICE_CONFIG_SSL_SNI_KEY struct
          IpPort SOCKADDR_STORAGE ?
          Host POINTER ?
        HTTP_SERVICE_CONFIG_SSL_SNI_KEY ends
        _HTTP_SERVICE_CONFIG_SSL_SNI_KEY typedef HTTP_SERVICE_CONFIG_SSL_SNI_KEY
        PHTTP_SERVICE_CONFIG_SSL_SNI_KEY typedef ptr HTTP_SERVICE_CONFIG_SSL_SNI_KEY
        HTTP_SERVICE_CONFIG_SSL_CCS_KEY struct
          LocalAddress SOCKADDR_STORAGE ?
        HTTP_SERVICE_CONFIG_SSL_CCS_KEY ends
        _HTTP_SERVICE_CONFIG_SSL_CCS_KEY typedef HTTP_SERVICE_CONFIG_SSL_CCS_KEY
        PHTTP_SERVICE_CONFIG_SSL_CCS_KEY typedef ptr HTTP_SERVICE_CONFIG_SSL_CCS_KEY
      endif
      ; This defines a record for the SSL config store.
      HTTP_SERVICE_CONFIG_SSL_PARAM struct
        SslHashLength DWORD ?
        ; Length of the SSL hash (in bytes)
        pSslHash POINTER ?
        ; Pointer to the SSL hash
        AppId GUID <>
        ; A unique identifier that can be used to
        ; identify the app that has set this parameter
        pSslCertStoreName POINTER ?
        ; Store name to read the server certificate
        ; from; defaults to "MY". Certificate must be
        ; stored in the LOCAL_MACHINE context.
        ; The following settings are used only for client certificates
        ; DefaultCertCheckMode is a bit flag with the following semantics
        ;  0x1     - Client certificate will not be verified for revocation
        ;  0x2     - Only cached certificate revocation will be used.
        ;  0x4     - Enable use of the DefaultRevocationFreshnessTime setting
        ;  0x10000 - No usage check.
        DefaultCertCheckMode DWORD ?
        ; DefaultRevocationFreshnessTime (seconds) - How often to check for
        ; an updated Certificate revocation list (CRL). If this value is 0
        ; then the new CRL is updated only if the previous one expires
        DefaultRevocationFreshnessTime DWORD ?
        ; DefaultRevocationUrlRetrievalTimeout (milliseconds) - Timeout on
        ; attempt to retrieve certificate revocation list from the remote URL.
        DefaultRevocationUrlRetrievalTimeout DWORD ?
        ; pDefaultSslCtlIdentifier - Restrict the certificate issuers that you
        ; want to trust. Can be a subset of the certificate issuers that are
        ; trusted by the machine.
        pDefaultSslCtlIdentifier POINTER ?
        ; Store name under LOCAL_MACHINE where Ctl identified by
        ; pDefaultSslCtlIdentifier is stored.
        pDefaultSslCtlStoreName POINTER ?
        ; Default Flags - see HTTP_SERVICE_CONFIG_SSL_FLAG* below.
        DefaultFlags DWORD ?
      HTTP_SERVICE_CONFIG_SSL_PARAM ends
      _HTTP_SERVICE_CONFIG_SSL_PARAM typedef HTTP_SERVICE_CONFIG_SSL_PARAM
      PHTTP_SERVICE_CONFIG_SSL_PARAM typedef ptr HTTP_SERVICE_CONFIG_SSL_PARAM
      ; The extended param type for the SSL extended params.
      HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE typedef SDWORD
      ExParamTypeHttp2Window equ 0
      ExParamTypeHttp2SettingsLimits equ 1
      ExParamTypeHttpPerformance equ 2
      ExParamTypeTlsRestrictions equ 3
      ExParamTypeErrorHeaders equ 4
      ExParamTypeTlsSessionTicketKeys equ 5
      ExParamTypeMax equ 6
      _HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE typedef HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE
      PHTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE typedef ptr HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE
      HTTP2_WINDOW_SIZE_PARAM struct
        ; The http/2 connection receive window size.
        Http2ReceiveWindowSize DWORD ?
      HTTP2_WINDOW_SIZE_PARAM ends
      _HTTP2_WINDOW_SIZE_PARAM typedef HTTP2_WINDOW_SIZE_PARAM
      PHTTP2_WINDOW_SIZE_PARAM typedef ptr HTTP2_WINDOW_SIZE_PARAM
      HTTP2_SETTINGS_LIMITS_PARAM struct
        ; The maximum allowed settings per SETTINGS frame.
        Http2MaxSettingsPerFrame DWORD ?
        ; The maximum settings we will process in a minute.
        Http2MaxSettingsPerMinute DWORD ?
      HTTP2_SETTINGS_LIMITS_PARAM ends
      _HTTP2_SETTINGS_LIMITS_PARAM typedef HTTP2_SETTINGS_LIMITS_PARAM
      PHTTP2_SETTINGS_LIMITS_PARAM typedef ptr HTTP2_SETTINGS_LIMITS_PARAM
      HTTP_PERFORMANCE_PARAM_TYPE typedef SDWORD
      PerformanceParamSendBufferingFlags equ 0
      PerformanceParamAggressiveICW equ 1
      PerformanceParamMaxSendBufferSize equ 2
      PerformanceParamMaxConcurrentClientStreams equ 3
      PerformanceParamMaxReceiveBufferSize equ 4
      PerformanceParamDecryptOnSspiThread equ 5
      PerformanceParamMax equ 6
      _HTTP_PERFORMANCE_PARAM_TYPE typedef HTTP_PERFORMANCE_PARAM_TYPE
      PHTTP_PERFORMANCE_PARAM_TYPE typedef ptr HTTP_PERFORMANCE_PARAM_TYPE
      HTTP_PERFORMANCE_PARAM struct
        Type_ HTTP_PERFORMANCE_PARAM_TYPE ?
        BufferSize DWORD ?
        Buffer POINTER ?
      HTTP_PERFORMANCE_PARAM ends
      _HTTP_PERFORMANCE_PARAM typedef HTTP_PERFORMANCE_PARAM
      PHTTP_PERFORMANCE_PARAM typedef ptr HTTP_PERFORMANCE_PARAM
      HTTP_TLS_RESTRICTIONS_PARAM struct
        RestrictionCount DWORD ?
        TlsRestrictions POINTER ?
      HTTP_TLS_RESTRICTIONS_PARAM ends
      _HTTP_TLS_RESTRICTIONS_PARAM typedef HTTP_TLS_RESTRICTIONS_PARAM
      PHTTP_TLS_RESTRICTIONS_PARAM typedef ptr HTTP_TLS_RESTRICTIONS_PARAM
      HTTP_ERROR_HEADERS_PARAM struct
        StatusCode WORD ?
        HeaderCount WORD ?
        Headers PHTTP_UNKNOWN_HEADER ?
      HTTP_ERROR_HEADERS_PARAM ends
      _HTTP_ERROR_HEADERS_PARAM typedef HTTP_ERROR_HEADERS_PARAM
      PHTTP_ERROR_HEADERS_PARAM typedef ptr HTTP_ERROR_HEADERS_PARAM
      HTTP_TLS_SESSION_TICKET_KEYS_PARAM struct
        SessionTicketKeyCount DWORD ?
        SessionTicketKeys POINTER ?
      HTTP_TLS_SESSION_TICKET_KEYS_PARAM ends
      _HTTP_TLS_SESSION_TICKET_KEYS_PARAM typedef HTTP_TLS_SESSION_TICKET_KEYS_PARAM
      PHTTP_TLS_SESSION_TICKET_KEYS_PARAM typedef ptr HTTP_TLS_SESSION_TICKET_KEYS_PARAM
      ; This defines the extended params for the ssl config record.
      HTTP_SERVICE_CONFIG_SSL_PARAM_EX struct
        ; The id that decides which param property is passed below.
        ParamType HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ?
        ; Flags for future use, if any.
        Flags QWORD ?
        ; The property.
        union
          Http2WindowSizeParam HTTP2_WINDOW_SIZE_PARAM <>
          Http2SettingsLimitsParam HTTP2_SETTINGS_LIMITS_PARAM <>
          HttpPerformanceParam HTTP_PERFORMANCE_PARAM <>
          HttpTlsRestrictionsParam HTTP_TLS_RESTRICTIONS_PARAM <>
          HttpErrorHeadersParam HTTP_ERROR_HEADERS_PARAM <>
          HttpTlsSessionTicketKeysParam HTTP_TLS_SESSION_TICKET_KEYS_PARAM <>
        ends
      HTTP_SERVICE_CONFIG_SSL_PARAM_EX ends
      _HTTP_SERVICE_CONFIG_SSL_PARAM_EX typedef HTTP_SERVICE_CONFIG_SSL_PARAM_EX
      PHTTP_SERVICE_CONFIG_SSL_PARAM_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_PARAM_EX
      ; The SSL config flags.
      HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER equ 00000001h
      HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT equ 00000002h
      if _WIN32_WINNT lt 0600h
        HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER equ 00000004h
      endif
      ; _WIN32_WINNT < 0x0600
      HTTP_SERVICE_CONFIG_SSL_FLAG_REJECT equ 00000008h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_HTTP2 equ 00000010h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_QUIC equ 00000020h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS13 equ 00000040h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_OCSP_STAPLING equ 00000080h
      HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_TOKEN_BINDING equ 00000100h
      HTTP_SERVICE_CONFIG_SSL_FLAG_LOG_EXTENDED_EVENTS equ 00000200h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_LEGACY_TLS equ 00000400h
      HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_SESSION_TICKET equ 00000800h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS12 equ 00001000h
      HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_CLIENT_CORRELATION equ 00002000h
      HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_SESSION_ID equ 00004000h
      ; These data structures are used by HttpSetServiceConfiguration() to add a new
      ; record to the SSL bindings list.
      ; ConfigId                        | Structure
      ; --------------------------------+---------------------------------
      ; HttpServiceConfigSSLCertInfo    | HTTP_SERVICE_CONFIG_SSL_SET
      ; HttpServiceConfigSslSniCertInfo | HTTP_SERVICE_CONFIG_SSL_SNI_SET
      ; HttpServiceConfigSslCcsCertInfo | HTTP_SERVICE_CONFIG_SSL_CCS_SET
      HTTP_SERVICE_CONFIG_SSL_SET struct
        KeyDesc HTTP_SERVICE_CONFIG_SSL_KEY <>
        ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM <>
      HTTP_SERVICE_CONFIG_SSL_SET ends
      _HTTP_SERVICE_CONFIG_SSL_SET typedef HTTP_SERVICE_CONFIG_SSL_SET
      PHTTP_SERVICE_CONFIG_SSL_SET typedef ptr HTTP_SERVICE_CONFIG_SSL_SET
      if _WIN32_WINNT ge _WIN32_WINNT_WIN8
        HTTP_SERVICE_CONFIG_SSL_SNI_SET struct
          KeyDesc HTTP_SERVICE_CONFIG_SSL_SNI_KEY <>
          ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM <>
        HTTP_SERVICE_CONFIG_SSL_SNI_SET ends
        _HTTP_SERVICE_CONFIG_SSL_SNI_SET typedef HTTP_SERVICE_CONFIG_SSL_SNI_SET
        PHTTP_SERVICE_CONFIG_SSL_SNI_SET typedef ptr HTTP_SERVICE_CONFIG_SSL_SNI_SET
        HTTP_SERVICE_CONFIG_SSL_CCS_SET struct
          KeyDesc HTTP_SERVICE_CONFIG_SSL_CCS_KEY <>
          ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM <>
        HTTP_SERVICE_CONFIG_SSL_CCS_SET ends
        _HTTP_SERVICE_CONFIG_SSL_CCS_SET typedef HTTP_SERVICE_CONFIG_SSL_CCS_SET
        PHTTP_SERVICE_CONFIG_SSL_CCS_SET typedef ptr HTTP_SERVICE_CONFIG_SSL_CCS_SET
        HTTP_SERVICE_CONFIG_SSL_SET_EX struct
          KeyDesc HTTP_SERVICE_CONFIG_SSL_KEY_EX <>
          ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM_EX <>
        HTTP_SERVICE_CONFIG_SSL_SET_EX ends
        _HTTP_SERVICE_CONFIG_SSL_SET_EX typedef HTTP_SERVICE_CONFIG_SSL_SET_EX
        PHTTP_SERVICE_CONFIG_SSL_SET_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_SET_EX
        HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX struct
          KeyDesc HTTP_SERVICE_CONFIG_SSL_SNI_KEY <>
          ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM_EX <>
        HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX ends
        _HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX typedef HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX
        PHTTP_SERVICE_CONFIG_SSL_SNI_SET_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX
        HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX struct
          KeyDesc HTTP_SERVICE_CONFIG_SSL_CCS_KEY <>
          ParamDesc HTTP_SERVICE_CONFIG_SSL_PARAM_EX <>
        HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX ends
        _HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX typedef HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX
        PHTTP_SERVICE_CONFIG_SSL_CCS_SET_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX
      endif
      ; These data structures are used by HttpQueryServiceConfiguration() to query a
      ; particular record from the SSL store.
      ; ConfigId                        | Structure
      ; --------------------------------+---------------------------------
      ; HttpServiceConfigSSLCertInfo    | HTTP_SERVICE_CONFIG_SSL_QUERY
      ; HttpServiceConfigSSLSniCertInfo | HTTP_SERVICE_CONFIG_SSL_SNI_QUERY
      ; HttpServiceConfigSslCcsCertInfo | HTTP_SERVICE_CONFIG_SSL_CCS_QUERY
      ; If QueryDesc is HttpServiceConfigQueryExact, then the one particular record
      ; is returned. If the QueryType is HttpServiceConfigQueryNext, then the next
      ; instance is returned. In such cases, the dwToken field represents the cursor.
      ; To retrieve the first item, dwToken has to be 0. For retrieving subsequent
      ; items, dwToken has to be incremented by 1, until ERROR_NO_MORE_ITEMS is
      ; returned.
      HTTP_SERVICE_CONFIG_SSL_QUERY struct
        QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
        KeyDesc HTTP_SERVICE_CONFIG_SSL_KEY <>
        dwToken DWORD ?
      HTTP_SERVICE_CONFIG_SSL_QUERY ends
      _HTTP_SERVICE_CONFIG_SSL_QUERY typedef HTTP_SERVICE_CONFIG_SSL_QUERY
      PHTTP_SERVICE_CONFIG_SSL_QUERY typedef ptr HTTP_SERVICE_CONFIG_SSL_QUERY
      if _WIN32_WINNT ge _WIN32_WINNT_WIN8
        HTTP_SERVICE_CONFIG_SSL_SNI_QUERY struct
          QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
          KeyDesc HTTP_SERVICE_CONFIG_SSL_SNI_KEY <>
          dwToken DWORD ?
        HTTP_SERVICE_CONFIG_SSL_SNI_QUERY ends
        _HTTP_SERVICE_CONFIG_SSL_SNI_QUERY typedef HTTP_SERVICE_CONFIG_SSL_SNI_QUERY
        PHTTP_SERVICE_CONFIG_SSL_SNI_QUERY typedef ptr HTTP_SERVICE_CONFIG_SSL_SNI_QUERY
        HTTP_SERVICE_CONFIG_SSL_CCS_QUERY struct
          QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
          KeyDesc HTTP_SERVICE_CONFIG_SSL_CCS_KEY <>
          dwToken DWORD ?
        HTTP_SERVICE_CONFIG_SSL_CCS_QUERY ends
        _HTTP_SERVICE_CONFIG_SSL_CCS_QUERY typedef HTTP_SERVICE_CONFIG_SSL_CCS_QUERY
        PHTTP_SERVICE_CONFIG_SSL_CCS_QUERY typedef ptr HTTP_SERVICE_CONFIG_SSL_CCS_QUERY
        HTTP_SERVICE_CONFIG_SSL_QUERY_EX struct
          QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
          KeyDesc HTTP_SERVICE_CONFIG_SSL_KEY_EX <>
          dwToken DWORD ?
          ParamType HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ?
        HTTP_SERVICE_CONFIG_SSL_QUERY_EX ends
        _HTTP_SERVICE_CONFIG_SSL_QUERY_EX typedef HTTP_SERVICE_CONFIG_SSL_QUERY_EX
        PHTTP_SERVICE_CONFIG_SSL_QUERY_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_QUERY_EX
        HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX struct
          QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
          KeyDesc HTTP_SERVICE_CONFIG_SSL_SNI_KEY <>
          dwToken DWORD ?
          ParamType HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ?
        HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX ends
        _HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX typedef HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX
        PHTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX
        HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX struct
          QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
          KeyDesc HTTP_SERVICE_CONFIG_SSL_CCS_KEY <>
          dwToken DWORD ?
          ParamType HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ?
        HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX ends
        _HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX typedef HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX
        PHTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX typedef ptr HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX
      endif
      ; Set/Delete IP Listen-Only List record
      ; Used as a parameter to both HttpSetServiceConfiguration() and
      ; HttpDeleteServiceConfiguration() functions.
      HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM struct
        AddrLength WORD ?
        pAddress PSOCKADDR ?
      HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM ends
      _HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM typedef HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM
      PHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM typedef ptr HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM
      ; Query IP Listen-Only List record.
      ; Parameter to HttpQueryServiceConfiguration() for the config ID
      ; HttpServiceConfigIPListenList.  On successful return, AddrList
      ; contains an array of AddrCount elements.  Caller must provide a
      ; large enough buffer to hold all elements in one call.
      ; Caller may determine the type of each returned element by examining
      ; AddrList[i].ss_family. If it's AF_INET, use ((PSOCKADDR_IN) &AddrList[i]);
      ; otherwise, for AF_INET6, use ((PSOCKADDR_IN6) &AddrList[i])
      ; to select the appropriate address type.
      HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY struct
        AddrCount DWORD ?
        AddrList SOCKADDR_STORAGE ANYSIZE_ARRAY dup (?)
      HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY ends
      _HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY typedef HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY
      PHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY typedef ptr HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY
      ; URL ACL
      HTTP_SERVICE_CONFIG_URLACL_KEY struct
        pUrlPrefix POINTER ?
      HTTP_SERVICE_CONFIG_URLACL_KEY ends
      _HTTP_SERVICE_CONFIG_URLACL_KEY typedef HTTP_SERVICE_CONFIG_URLACL_KEY
      PHTTP_SERVICE_CONFIG_URLACL_KEY typedef ptr HTTP_SERVICE_CONFIG_URLACL_KEY
      ; This defines a record for the SSL config store.
      HTTP_SERVICE_CONFIG_URLACL_PARAM struct
        pStringSecurityDescriptor POINTER ?
      HTTP_SERVICE_CONFIG_URLACL_PARAM ends
      _HTTP_SERVICE_CONFIG_URLACL_PARAM typedef HTTP_SERVICE_CONFIG_URLACL_PARAM
      PHTTP_SERVICE_CONFIG_URLACL_PARAM typedef ptr HTTP_SERVICE_CONFIG_URLACL_PARAM
      ; This data structure is used by HttpSetServiceConfiguration for the config ID
      ; HttpServiceConfigUrlAclInfo. It is used to add a new record to the URL ACL
      ; store.
      HTTP_SERVICE_CONFIG_URLACL_SET struct
        KeyDesc HTTP_SERVICE_CONFIG_URLACL_KEY <>
        ParamDesc HTTP_SERVICE_CONFIG_URLACL_PARAM <>
      HTTP_SERVICE_CONFIG_URLACL_SET ends
      _HTTP_SERVICE_CONFIG_URLACL_SET typedef HTTP_SERVICE_CONFIG_URLACL_SET
      PHTTP_SERVICE_CONFIG_URLACL_SET typedef ptr HTTP_SERVICE_CONFIG_URLACL_SET
      ; This data structure is used by HttpQueryServiceConfiguration() for the
      ; config ID HttpServiceConfigUrlAclInfo. It's used to query a particular
      ; record from the URL ACL store.
      ; If QueryType is HttpServiceConfigQueryExact, then one particular record of
      ; the type HTTP_SERVICE_CONFIG_URLACL_SET is returned. If the QueryType is
      ; HttpServiceConfigQueryNext, then the next instance of
      ; HTTP_SERVICE_CONFIG_URLACL_SET is returned. In such cases, the dwToken field
      ; represents the cursor. For the first item,  dwToken has to be 0.
      ; For subsequent items, dwToken has to be incremented by 1,
      ; until ERROR_NO_MORE_ITEMS is returned.
      HTTP_SERVICE_CONFIG_URLACL_QUERY struct
        QueryDesc HTTP_SERVICE_CONFIG_QUERY_TYPE ?
        KeyDesc HTTP_SERVICE_CONFIG_URLACL_KEY <>
        dwToken DWORD ?
      HTTP_SERVICE_CONFIG_URLACL_QUERY ends
      _HTTP_SERVICE_CONFIG_URLACL_QUERY typedef HTTP_SERVICE_CONFIG_URLACL_QUERY
      PHTTP_SERVICE_CONFIG_URLACL_QUERY typedef ptr HTTP_SERVICE_CONFIG_URLACL_QUERY
      ; Cache Paramemers
      ; For manipulating global cache parameters.
      ; The parameters that can be changed or queued are per-uri cache size
      ; and cached range chunk size.
      HTTP_SERVICE_CONFIG_CACHE_KEY typedef SDWORD
      MaxCacheResponseSize equ 0
      CacheRangeChunkSize equ 1
      _HTTP_SERVICE_CONFIG_CACHE_KEY typedef HTTP_SERVICE_CONFIG_CACHE_KEY
      PHTTP_SERVICE_CONFIG_CACHE_KEY typedef ptr HTTP_SERVICE_CONFIG_CACHE_KEY
      HTTP_SERVICE_CONFIG_CACHE_PARAM typedef ULONG
      PHTTP_SERVICE_CONFIG_CACHE_PARAM typedef ptr ULONG
      ; To set a cache parameter value use the set structure. To query use the key
      ; directly. When you query a parameter value the output buffer must be exactly
      ; the sizeof param.
      HTTP_SERVICE_CONFIG_CACHE_SET struct
        KeyDesc HTTP_SERVICE_CONFIG_CACHE_KEY ?
        ParamDesc HTTP_SERVICE_CONFIG_CACHE_PARAM ?
      HTTP_SERVICE_CONFIG_CACHE_SET ends
      PHTTP_SERVICE_CONFIG_CACHE_SET typedef ptr HTTP_SERVICE_CONFIG_CACHE_SET
      ; Input types for HttpQueryRequestProperty. Only types are public and not the API
      ; so that IIS need not have their own types for public usage.
      HTTP_REQUEST_PROPERTY typedef SDWORD
      HttpRequestPropertyIsb equ 0
      HttpRequestPropertyTcpInfoV0 equ 1
      HttpRequestPropertyQuicStats equ 2
      HttpRequestPropertyTcpInfoV1 equ 3
      HttpRequestPropertySni equ 4
      HttpRequestPropertyStreamError equ 5
      HttpRequestPropertyWskApiTimings equ 6
      HttpRequestPropertyQuicApiTimings equ 7
      _HTTP_REQUEST_PROPERTY typedef HTTP_REQUEST_PROPERTY
      PHTTP_REQUEST_PROPERTY typedef ptr HTTP_REQUEST_PROPERTY
      HTTP_QUERY_REQUEST_QUALIFIER_TCP struct
        Freshness QWORD ?
      HTTP_QUERY_REQUEST_QUALIFIER_TCP ends
      _HTTP_QUERY_REQUEST_QUALIFIER_TCP typedef HTTP_QUERY_REQUEST_QUALIFIER_TCP
      PHTTP_QUERY_REQUEST_QUALIFIER_TCP typedef ptr HTTP_QUERY_REQUEST_QUALIFIER_TCP
      HTTP_QUERY_REQUEST_QUALIFIER_QUIC struct
        Freshness QWORD ?
      HTTP_QUERY_REQUEST_QUALIFIER_QUIC ends
      _HTTP_QUERY_REQUEST_QUALIFIER_QUIC typedef HTTP_QUERY_REQUEST_QUALIFIER_QUIC
      PHTTP_QUERY_REQUEST_QUALIFIER_QUIC typedef ptr HTTP_QUERY_REQUEST_QUALIFIER_QUIC
      HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH equ 255
      ; Flags inside HTTP_REQUEST_PROPERTY_SNI can have following values:
      ; - HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED: Indicates that SNI was used for succesful
      ;   endpoint lookup during handshake. If client sent the SNI but Http.sys still decided to
      ;   use IP endpoint binding then this flag will not be set.
      ; - HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI: Indicates that client did not send the SNI.
      ;   If this flag is set, HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED can not be set.
      HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED equ 00000001h
      HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI equ 00000002h
      HTTP_REQUEST_PROPERTY_SNI struct
        Hostname WORD HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH + 1 dup (?)
        Flags DWORD ?
      HTTP_REQUEST_PROPERTY_SNI ends
      _HTTP_REQUEST_PROPERTY_SNI typedef HTTP_REQUEST_PROPERTY_SNI
      PHTTP_REQUEST_PROPERTY_SNI typedef ptr HTTP_REQUEST_PROPERTY_SNI
      HTTP_REQUEST_PROPERTY_STREAM_ERROR struct
        ErrorCode DWORD ?
      HTTP_REQUEST_PROPERTY_STREAM_ERROR ends
      _HTTP_REQUEST_PROPERTY_STREAM_ERROR typedef HTTP_REQUEST_PROPERTY_STREAM_ERROR
      PHTTP_REQUEST_PROPERTY_STREAM_ERROR typedef ptr HTTP_REQUEST_PROPERTY_STREAM_ERROR
      HTTP_WSK_API_TIMINGS struct
        ConnectCount QWORD ?
        ConnectSum QWORD ?
        DisconnectCount QWORD ?
        DisconnectSum QWORD ?
        SendCount QWORD ?
        SendSum QWORD ?
        ReceiveCount QWORD ?
        ReceiveSum QWORD ?
        ReleaseCount QWORD ?
        ReleaseSum QWORD ?
        ControlSocketCount QWORD ?
        ControlSocketSum QWORD ?
      HTTP_WSK_API_TIMINGS ends
      _HTTP_WSK_API_TIMINGS typedef HTTP_WSK_API_TIMINGS
      PHTTP_WSK_API_TIMINGS typedef ptr HTTP_WSK_API_TIMINGS
      HTTP_QUIC_STREAM_API_TIMINGS struct
        OpenCount QWORD ?
        OpenSum QWORD ?
        CloseCount QWORD ?
        CloseSum QWORD ?
        StartCount QWORD ?
        StartSum QWORD ?
        ShutdownCount QWORD ?
        ShutdownSum QWORD ?
        SendCount QWORD ?
        SendSum QWORD ?
        ReceiveSetEnabledCount QWORD ?
        ReceiveSetEnabledSum QWORD ?
        GetParamCount QWORD ?
        GetParamSum QWORD ?
        SetParamCount QWORD ?
        SetParamSum QWORD ?
        SetCallbackHandlerCount QWORD ?
        SetCallbackHandlerSum QWORD ?
      HTTP_QUIC_STREAM_API_TIMINGS ends
      _HTTP_QUIC_STREAM_API_TIMINGS typedef HTTP_QUIC_STREAM_API_TIMINGS
      PHTTP_QUIC_STREAM_API_TIMINGS typedef ptr HTTP_QUIC_STREAM_API_TIMINGS
      HTTP_QUIC_CONNECTION_API_TIMINGS struct
        OpenTime QWORD ?
        CloseTime QWORD ?
        StartTime QWORD ?
        ShutdownTime QWORD ?
        SecConfigCreateTime QWORD ?
        SecConfigDeleteTime QWORD ?
        GetParamCount QWORD ?
        GetParamSum QWORD ?
        SetParamCount QWORD ?
        SetParamSum QWORD ?
        SetCallbackHandlerCount QWORD ?
        SetCallbackHandlerSum QWORD ?
        ControlStreamTimings HTTP_QUIC_STREAM_API_TIMINGS <>
      HTTP_QUIC_CONNECTION_API_TIMINGS ends
      _HTTP_QUIC_CONNECTION_API_TIMINGS typedef HTTP_QUIC_CONNECTION_API_TIMINGS
      PHTTP_QUIC_CONNECTION_API_TIMINGS typedef ptr HTTP_QUIC_CONNECTION_API_TIMINGS
      HTTP_QUIC_API_TIMINGS struct
        ConnectionTimings HTTP_QUIC_CONNECTION_API_TIMINGS <>
        StreamTimings HTTP_QUIC_STREAM_API_TIMINGS <>
      HTTP_QUIC_API_TIMINGS ends
      _HTTP_QUIC_API_TIMINGS typedef HTTP_QUIC_API_TIMINGS
      PHTTP_QUIC_API_TIMINGS typedef ptr HTTP_QUIC_API_TIMINGS
      HTTP_QUIC_STREAM_REQUEST_STATS struct
        StreamWaitStart QWORD ?
        StreamWaitEnd QWORD ?
        RequestHeadersCompressionStart QWORD ?
        RequestHeadersCompressionEnd QWORD ?
        ResponseHeadersDecompressionStart QWORD ?
        ResponseHeadersDecompressionEnd QWORD ?
        RequestHeadersCompressedSize QWORD ?
        ResponseHeadersCompressedSize QWORD ?
      HTTP_QUIC_STREAM_REQUEST_STATS ends
      _HTTP_QUIC_STREAM_REQUEST_STATS typedef HTTP_QUIC_STREAM_REQUEST_STATS
      PHTTP_QUIC_STREAM_REQUEST_STATS typedef ptr HTTP_QUIC_STREAM_REQUEST_STATS
      HTTP_QUIC_KEEPALIVE_TIMEOUT_DISABLED equ (- 1)
      HTTP_FEATURE_ID typedef SDWORD
      HttpFeatureUnknown equ 0
      HttpFeatureResponseTrailers equ 1
      HttpFeatureApiTimings equ 2
      HttpFeatureDelegateEx equ 3
      HttpFeatureHttp3 equ 4
      HttpFeatureLast equ 5
      HttpFeaturemax equ 0FFFFFFFFh
      _HTTP_FEATURE_ID typedef HTTP_FEATURE_ID
      PHTTP_FEATURE_ID typedef ptr HTTP_FEATURE_ID
      ; Define our API linkage.
      if  not Defined(HTTPAPI_LINKAGE)
        HTTPAPI_LINKAGE equ <DECLSPEC_IMPORT>
      endif
      ; !HTTPAPI_LINKAGE
      ; Initialize/Terminate APIs.
      ; NOTE: MUST be called once before all other APIs
      @DefProto DllImport, HttpInitialize, WIN_STD_CALL_CONV,, <:HTTPAPI_VERSION, :ULONG, :PVOID>, 12
      ; NOTE: MUST be called after final API call returns.
      @DefProto DllImport, HttpTerminate, WIN_STD_CALL_CONV,, <:ULONG, :PVOID>, 8
      ; HTTP Request Queue manipulation APIs.
      ; This API is maintained for backward competibility for the first
      ; version of the HTTPAPI and should not be used. Instead the new
      ; HttpCreateRequestQueue() API must be used.
      ; Use CloseHandle() to release the handles returned by
      ; HttpCreateHttpHandle() API.
      @DefProto DllImport, HttpCreateHttpHandle, WIN_STD_CALL_CONV,, <:PHANDLE, :ULONG>, 8
      if _WIN32_WINNT ge 0600h
        ; Extended Request Queue manipulation APIs.
        ; Use HttpCloseRequestQueue() API to close the handles
        ; created by the HttpCreateRequestQueue API.
        @DefProto DllImport, HttpCreateRequestQueue, WIN_STD_CALL_CONV,, <:HTTPAPI_VERSION, :PCWSTR, :PSECURITY_ATTRIBUTES, :ULONG, :PHANDLE>, 20
        @DefProto DllImport, HttpCloseRequestQueue, WIN_STD_CALL_CONV,, <:HANDLE>, 4
        @DefProto DllImport, HttpSetRequestQueueProperty, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG, :ULONG, :PVOID>, 24
        @DefProto DllImport, HttpQueryRequestQueueProperty, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG, :ULONG, :PULONG, :PVOID>, 28
        @DefProto DllImport, HttpSetRequestProperty, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_OPAQUE_ID, :HTTP_REQUEST_PROPERTY, :PVOID, :ULONG, :LPOVERLAPPED>, 24
        @DefProto DllImport, HttpShutdownRequestQueue, WIN_STD_CALL_CONV,, <:HANDLE>, 4
      endif
      ; _WIN32_WINNT >= 0x0600
      ; SSL APIs.
      @DefProto DllImport, HttpReceiveClientCertificate, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_CONNECTION_ID, :ULONG, :PHTTP_SSL_CLIENT_CERT_INFO, :ULONG, :PULONG, :LPOVERLAPPED>, 28
      if _WIN32_WINNT ge 0600h
        ; Server Session APIs.
        @DefProto DllImport, HttpCreateServerSession, WIN_STD_CALL_CONV,, <:HTTPAPI_VERSION, :PHTTP_SERVER_SESSION_ID, :ULONG>, 12
        @DefProto DllImport, HttpCloseServerSession, WIN_STD_CALL_CONV,, <:HTTP_SERVER_SESSION_ID>, 4
        @DefProto DllImport, HttpQueryServerSessionProperty, WIN_STD_CALL_CONV,, <:HTTP_SERVER_SESSION_ID, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG, :PULONG>, 20
        @DefProto DllImport, HttpSetServerSessionProperty, WIN_STD_CALL_CONV,, <:HTTP_SERVER_SESSION_ID, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG>, 16
      endif
      ; _WIN32_WINNT >= 0x0600
      ; Url Configuration APIs. Can only be used for V1 request queues.
      @DefProto DllImport, HttpAddUrl, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PVOID>, 12
      @DefProto DllImport, HttpRemoveUrl, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR>, 8
      if _WIN32_WINNT ge 0600h
        ; Url Group APIs.
        @DefProto DllImport, HttpCreateUrlGroup, WIN_STD_CALL_CONV,, <:HTTP_SERVER_SESSION_ID, :PHTTP_URL_GROUP_ID, :ULONG>, 12
        @DefProto DllImport, HttpCloseUrlGroup, WIN_STD_CALL_CONV,, <:HTTP_URL_GROUP_ID>, 4
        @DefProto DllImport, HttpAddUrlToUrlGroup, WIN_STD_CALL_CONV,, <:HTTP_URL_GROUP_ID, :PCWSTR, :HTTP_URL_CONTEXT, :ULONG>, 16
        @DefProto DllImport, HttpRemoveUrlFromUrlGroup, WIN_STD_CALL_CONV,, <:HTTP_URL_GROUP_ID, :PCWSTR, :ULONG>, 12
        @DefProto DllImport, HttpSetUrlGroupProperty, WIN_STD_CALL_CONV,, <:HTTP_URL_GROUP_ID, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG>, 16
        @DefProto DllImport, HttpQueryUrlGroupProperty, WIN_STD_CALL_CONV,, <:HTTP_URL_GROUP_ID, :HTTP_SERVER_PROPERTY, :PVOID, :ULONG, :PULONG>, 20
      endif
      ; _WIN32_WINNT >= 0x0600
      if _WIN32_WINNT ge _WIN32_WINNT_WIN8
        @DefProto DllImport, HttpPrepareUrl, WIN_STD_CALL_CONV,, <:PVOID, :ULONG, :PCWSTR, :ptr PWSTR>, 16
      endif
      ; HTTP Server I/O APIs.
      @DefProto DllImport, HttpReceiveHttpRequest, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :PHTTP_REQUEST, :ULONG, :PULONG, :LPOVERLAPPED>, 28
      @DefProto DllImport, HttpReceiveRequestEntityBody, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :PVOID, :ULONG, :PULONG, :LPOVERLAPPED>, 28
      if _WIN32_WINNT ge 0600h
        @DefProto DllImport, HttpSendHttpResponse, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :PHTTP_RESPONSE, :PHTTP_CACHE_POLICY, :PULONG, :PVOID, :ULONG, :LPOVERLAPPED, :PHTTP_LOG_DATA>, 40
      else
      ; _WIN32_WINNT >= 0x0600
        @DefProto DllImport, HttpSendHttpResponse, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :PHTTP_RESPONSE, :PVOID, :PULONG, :PVOID, :ULONG, :LPOVERLAPPED, :PVOID>, 40
        ; must be NULL
      endif
      ; _WIN32_WINNT >= 0x0600
      if _WIN32_WINNT ge 0600h
        @DefProto DllImport, HttpSendResponseEntityBody, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :USHORT, :PHTTP_DATA_CHUNK, :PULONG, :PVOID, :ULONG, :LPOVERLAPPED, :PHTTP_LOG_DATA>, 40
      else
      ; _WIN32_WINNT >= 0x0600
        @DefProto DllImport, HttpSendResponseEntityBody, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :ULONG, :USHORT, :PHTTP_DATA_CHUNK, :PULONG, :PVOID, :ULONG, :LPOVERLAPPED, :PVOID>, 40
        ; must be NULL
      endif
      ; _WIN32_WINNT >= 0x0600
      @DefProto DllImport, HttpDeclarePush, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :HTTP_VERB, :PCWSTR, :PCSTR, :PHTTP_REQUEST_HEADERS>, 24
      @DefProto DllImport, HttpWaitForDisconnect, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_CONNECTION_ID, :LPOVERLAPPED>, 12
      if _WIN32_WINNT ge 0600h
        @DefProto DllImport, HttpWaitForDisconnectEx, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_CONNECTION_ID, :ULONG, :LPOVERLAPPED>, 16
        @DefProto DllImport, HttpCancelHttpRequest, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_REQUEST_ID, :LPOVERLAPPED>, 12
        @DefProto DllImport, HttpWaitForDemandStart, WIN_STD_CALL_CONV,, <:HANDLE, :LPOVERLAPPED>, 8
        HttpIsFeatureSupported proto WIN_STD_CALL_CONV :HTTP_FEATURE_ID
        @DefProto DllImport, HttpDelegateRequestEx, WIN_STD_CALL_CONV,, <:HANDLE, :HANDLE, :HTTP_REQUEST_ID, :HTTP_URL_GROUP_ID, :ULONG, :PHTTP_DELEGATE_REQUEST_PROPERTY_INFO>, 24
        @DefProto DllImport, HttpFindUrlGroupId, WIN_STD_CALL_CONV,, <:PCWSTR, :HANDLE, :PHTTP_URL_GROUP_ID>, 12
      endif
      ; _WIN32_WINNT >= 0x0600
      ; Cache manipulation APIs.
      @DefProto DllImport, HttpFlushResponseCache, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :ULONG, :LPOVERLAPPED>, 16
      @DefProto DllImport, HttpAddFragmentToCache, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PHTTP_DATA_CHUNK, :PHTTP_CACHE_POLICY, :LPOVERLAPPED>, 20
      @DefProto DllImport, HttpReadFragmentFromCache, WIN_STD_CALL_CONV,, <:HANDLE, :PCWSTR, :PHTTP_BYTE_RANGE, :PVOID, :ULONG, :PULONG, :LPOVERLAPPED>, 28
      ; Server configuration APIs
      @DefProto DllImport, HttpSetServiceConfiguration, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVICE_CONFIG_ID, :PVOID, :ULONG, :LPOVERLAPPED>, 20
      @DefProto DllImport, HttpUpdateServiceConfiguration, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVICE_CONFIG_ID, :PVOID, :ULONG, :LPOVERLAPPED>, 20
      @DefProto DllImport, HttpDeleteServiceConfiguration, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVICE_CONFIG_ID, :PVOID, :ULONG, :LPOVERLAPPED>, 20
      @DefProto DllImport, HttpQueryServiceConfiguration, WIN_STD_CALL_CONV,, <:HANDLE, :HTTP_SERVICE_CONFIG_ID, :PVOID, :ULONG, :PVOID, :ULONG, :PULONG, :LPOVERLAPPED>, 32
      HttpGetExtension proto WIN_STD_CALL_CONV :HTTPAPI_VERSION, :ULONG, :PVOID, :ULONG
      ifdef __cplusplus
        ;[...]
      endif
      ; __cplusplus
    endif
    ; _WIN32_WINNT >= 0x0501
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) *
  endif
endif
; __HTTP_H__
