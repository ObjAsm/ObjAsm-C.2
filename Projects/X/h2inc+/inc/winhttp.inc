;Include file created by h2inc+ version C.2.0 on (UTC) 20/05/2024 18:06:34
;(C) G. Friedrich April 2024
;Source file: d:\objasm\projects\x\h2inc+\h\um_10.0.22621.0\winhttp.h
;             Created on (UTC) 06/04/2024 06:16:03
;             Last modified on (UTC) 21/02/2024 18:13:16

;--*
if  not Defined(_WINHTTPX_)
  _WINHTTPX_ equ <>
  include winapifamily.inc
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ;*
    ;* Set up Structure Packing to be 4 bytes for all winhttp structures
    ;*
    if Defined(_WIN64)
      include pshpack8.inc
    else
      include pshpack4.inc
    endif
    if Defined(__cplusplus)
      ;[...]
    endif
    if  not Defined(_WINHTTP_INTERNAL_)
      WINHTTPAPI equ <DECLSPEC_IMPORT>
    else
      WINHTTPAPI equ <>
    endif
    ifndef BOOLAPI
      BOOLAPI equ <WINHTTPAPI BOOL WINAPI>
    endif
    ; types
    HINTERNET typedef LPVOID
    LPHINTERNET typedef ptr HINTERNET
    INTERNET_PORT typedef WORD
    LPINTERNET_PORT typedef ptr INTERNET_PORT
    ; manifests
    INTERNET_DEFAULT_PORT equ 0; use the protocol-specific default

    INTERNET_DEFAULT_HTTP_PORT equ 80;    "     "  HTTP   "

    INTERNET_DEFAULT_HTTPS_PORT equ 443;    "     "  HTTPS  "

    ; flags for WinHttpOpen():
    WINHTTP_FLAG_ASYNC equ 10000000h; this session is asynchronous (where supported)

    WINHTTP_FLAG_SECURE_DEFAULTS equ 30000000h; note that this flag also forces async

    ; flags for WinHttpOpenRequest():
    WINHTTP_FLAG_SECURE equ 00800000h; use SSL if applicable (HTTPS)

    WINHTTP_FLAG_ESCAPE_PERCENT equ 00000004h; if escaping enabled, escape percent as well

    WINHTTP_FLAG_NULL_CODEPAGE equ 00000008h; assume all symbols are ASCII, use fast convertion

    WINHTTP_FLAG_ESCAPE_DISABLE equ 00000040h; disable escaping

    WINHTTP_FLAG_ESCAPE_DISABLE_QUERY equ 00000080h; if escaping enabled escape path part, but do not escape query

    WINHTTP_FLAG_BYPASS_PROXY_CACHE equ 00000100h; add "pragma: no-cache" request header

    WINHTTP_FLAG_REFRESH equ <WINHTTP_FLAG_BYPASS_PROXY_CACHE>
    WINHTTP_FLAG_AUTOMATIC_CHUNKING equ 00000200h; Send request without content-length header or chunked TE

    SECURITY_FLAG_IGNORE_UNKNOWN_CA equ 00000100h
    SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE equ 00000200h
    SECURITY_FLAG_IGNORE_CERT_CN_INVALID equ 00001000h; bad common name in X509 Cert.

    SECURITY_FLAG_IGNORE_CERT_DATE_INVALID equ 00002000h; expired X509 Cert.

    SECURITY_FLAG_IGNORE_ALL_CERT_ERRORS equ <(SECURITY_FLAG_IGNORE_UNKNOWN_CA or SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE or SECURITY_FLAG_IGNORE_CERT_CN_INVALID or SECURITY_FLAG_IGNORE_CERT_DATE_INVALID)>
    ; WINHTTP_ASYNC_RESULT - this structure is returned to the application via
    ; the callback with WINHTTP_CALLBACK_STATUS_REQUEST_COMPLETE. It is not sufficient to
    ; just return the result of the async operation. If the API failed then the
    ; app cannot call GetLastError() because the thread context will be incorrect.
    ; Both the value returned by the async API and any resultant error code are
    ; made available. The app need not check dwError if dwResult indicates that
    ; the API succeeded (in this case dwError will be ERROR_SUCCESS)
    WINHTTP_ASYNC_RESULT struct
      dwResult XWORD ?
      ; indicates which async API has encountered an error
      dwError DWORD ?
      ; the error code if the API failed
    WINHTTP_ASYNC_RESULT ends
    _WINHTTP_ASYNC_RESULT typedef WINHTTP_ASYNC_RESULT
    LPWINHTTP_ASYNC_RESULT typedef ptr WINHTTP_ASYNC_RESULT
    PWINHTTP_ASYNC_RESULT typedef ptr WINHTTP_ASYNC_RESULT
    ; HTTP_VERSION_INFO - query or set global HTTP version (1.0 or 1.1)
    ifndef _HTTP_VERSION_INFO_
      _HTTP_VERSION_INFO_ equ <>
      HTTP_VERSION_INFO struct
        dwMajorVersion DWORD ?
        dwMinorVersion DWORD ?
      HTTP_VERSION_INFO ends
      _HTTP_VERSION_INFO typedef HTTP_VERSION_INFO
      LPHTTP_VERSION_INFO typedef ptr HTTP_VERSION_INFO
      PHTTP_VERSION_INFO typedef ptr HTTP_VERSION_INFO
    endif
    ; INTERNET_SCHEME - URL scheme type
    ifndef _INTERNET_SCHEME_
      _INTERNET_SCHEME_ equ <>
      INTERNET_SCHEME typedef SDWORD
      LPINTERNET_SCHEME typedef ptr SDWORD
      INTERNET_SCHEME_HTTP equ (1)
      INTERNET_SCHEME_HTTPS equ (2)
      INTERNET_SCHEME_FTP equ (3)
      INTERNET_SCHEME_SOCKS equ (4)
    endif
    ; URL_COMPONENTS - the constituent parts of an URL. Used in WinHttpCrackUrl()
    ; and WinHttpCreateUrl()
    ; For WinHttpCrackUrl(), if a pointer field and its corresponding length field
    ; are both 0 then that component is not returned. If the pointer field is NULL
    ; but the length field is not zero, then both the pointer and length fields are
    ; returned if both pointer and corresponding length fields are non-zero then
    ; the pointer field points to a buffer where the component is copied. The
    ; component may be un-escaped, depending on dwFlags
    ; For WinHttpCreateUrl(), the pointer fields should be NULL if the component
    ; is not required. If the corresponding length field is zero then the pointer
    ; field is the address of a zero-terminated string. If the length field is not
    ; zero then it is the string length of the corresponding pointer field
    ; disable alignment warning
    ifndef _URL_COMPONENTS_
      _URL_COMPONENTS_ equ <>
      URL_COMPONENTS struct
        dwStructSize DWORD ?
        ; size of this structure. Used in version check
        lpszScheme POINTER ?
        ; pointer to scheme name
        dwSchemeLength DWORD ?
        ; length of scheme name
        nScheme INTERNET_SCHEME ?
        ; enumerated scheme type (if known)
        lpszHostName POINTER ?
        ; pointer to host name
        dwHostNameLength DWORD ?
        ; length of host name
        nPort INTERNET_PORT ?
        ; converted port number
        lpszUserName POINTER ?
        ; pointer to user name
        dwUserNameLength DWORD ?
        ; length of user name
        lpszPassword POINTER ?
        ; pointer to password
        dwPasswordLength DWORD ?
        ; length of password
        lpszUrlPath POINTER ?
        ; pointer to URL-path
        dwUrlPathLength DWORD ?
        ; length of URL-path
        lpszExtraInfo POINTER ?
        ; pointer to extra information (e.g. ?foo or #foo)
        dwExtraInfoLength DWORD ?
        ; length of extra information
      URL_COMPONENTS ends
      _WINHTTP_URL_COMPONENTS typedef URL_COMPONENTS
      LPURL_COMPONENTS typedef ptr URL_COMPONENTS
      URL_COMPONENTSW typedef URL_COMPONENTS
      LPURL_COMPONENTSW typedef LPURL_COMPONENTS
    endif
    ; restore alignment warning
    ; WINHTTP_PROXY_INFO - structure supplied with WINHTTP_OPTION_PROXY to get/
    ; set proxy information on a WinHttpOpen() handle
    WINHTTP_PROXY_INFO struct
      dwAccessType DWORD ?
      ; see WINHTTP_ACCESS_* types below
      lpszProxy POINTER ?
      ; proxy server list
      lpszProxyBypass POINTER ?
      ; proxy bypass list
    WINHTTP_PROXY_INFO ends
    _WINHTTP_PROXY_INFO typedef WINHTTP_PROXY_INFO
    LPWINHTTP_PROXY_INFO typedef ptr WINHTTP_PROXY_INFO
    PWINHTTP_PROXY_INFO typedef ptr WINHTTP_PROXY_INFO
    WINHTTP_PROXY_INFOW typedef WINHTTP_PROXY_INFO
    LPWINHTTP_PROXY_INFOW typedef LPWINHTTP_PROXY_INFO
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    WINHTTP_AUTOPROXY_OPTIONS struct
      dwFlags DWORD ?
      dwAutoDetectFlags DWORD ?
      lpszAutoConfigUrl =POINTER ?
      lpvReserved POINTER ?
      dwReserved DWORD ?
      fAutoLogonIfChallenged DWORD ?
    WINHTTP_AUTOPROXY_OPTIONS ends
    _WINHTTP_AUTOPROXY_OPTIONS typedef WINHTTP_AUTOPROXY_OPTIONS
    PWINHTTP_AUTOPROXY_OPTIONS typedef ptr WINHTTP_AUTOPROXY_OPTIONS
    WINHTTP_AUTOPROXY_AUTO_DETECT equ 00000001h
    WINHTTP_AUTOPROXY_CONFIG_URL equ 00000002h
    WINHTTP_AUTOPROXY_HOST_KEEPCASE equ 00000004h
    WINHTTP_AUTOPROXY_HOST_LOWERCASE equ 00000008h
    WINHTTP_AUTOPROXY_ALLOW_AUTOCONFIG equ 00000100h
    WINHTTP_AUTOPROXY_ALLOW_STATIC equ 00000200h
    WINHTTP_AUTOPROXY_ALLOW_CM equ 00000400h
    WINHTTP_AUTOPROXY_USE_INTERFACE_CONFIG equ 00000800h
    WINHTTP_AUTOPROXY_RUN_INPROCESS equ 00010000h
    WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY equ 00020000h
    WINHTTP_AUTOPROXY_NO_DIRECTACCESS equ 00040000h
    WINHTTP_AUTOPROXY_NO_CACHE_CLIENT equ 00080000h
    WINHTTP_AUTOPROXY_NO_CACHE_SVC equ 00100000h
    WINHTTP_AUTOPROXY_SORT_RESULTS equ 00400000h
    ; Flags for dwAutoDetectFlags
    WINHTTP_AUTO_DETECT_TYPE_DHCP equ 00000001h
    WINHTTP_AUTO_DETECT_TYPE_DNS_A equ 00000002h
    ; WINHTTP_PROXY_RESULT - structure containing parsed proxy result,
    ; see WinHttpGetProxyForUrlEx and WinHttpGetProxyResult, use WinHttpFreeProxyResult to free its members.
    WINHTTP_PROXY_RESULT_ENTRY struct
      fProxy DWORD ?
      ; Is this a proxy or DIRECT?
      fBypass DWORD ?
      ; If DIRECT, is it bypassing a proxy (intranet) or is all traffic DIRECT (internet)
      ProxyScheme INTERNET_SCHEME ?
      ; The scheme of the proxy, SOCKS, HTTP (CERN Proxy), HTTPS (SSL through Proxy)
      pwszProxy POINTER ?
      ; Hostname of the proxy.
      ProxyPort INTERNET_PORT ?
      ; Port of the proxy.
    WINHTTP_PROXY_RESULT_ENTRY ends
    _WINHTTP_PROXY_RESULT_ENTRY typedef WINHTTP_PROXY_RESULT_ENTRY
    WINHTTP_PROXY_RESULT struct
      cEntries DWORD ?
      pEntries POINTER ?
    WINHTTP_PROXY_RESULT ends
    _WINHTTP_PROXY_RESULT typedef WINHTTP_PROXY_RESULT
    WINHTTP_PROXY_RESULT_EX struct
      cEntries DWORD ?
      pEntries POINTER ?
      hProxyDetectionHandle HANDLE ?
      dwProxyInterfaceAffinity DWORD ?
    WINHTTP_PROXY_RESULT_EX ends
    _WINHTTP_PROXY_RESULT_EX typedef WINHTTP_PROXY_RESULT_EX
    NETWORKING_KEY_BUFSIZE equ 128
    WINHTTP_PROXY_NETWORKING_KEY struct
      pbBuffer BYTE NETWORKING_KEY_BUFSIZE dup (?)
    WINHTTP_PROXY_NETWORKING_KEY ends
    _WinHttpProxyNetworkKey typedef WINHTTP_PROXY_NETWORKING_KEY
    PWINHTTP_PROXY_NETWORKING_KEY typedef ptr WINHTTP_PROXY_NETWORKING_KEY
    WINHTTP_PROXY_TYPE_DIRECT equ 00000001h; Direct to net

    WINHTTP_PROXY_TYPE_PROXY equ 00000002h; Via named proxy

    WINHTTP_PROXY_TYPE_AUTO_PROXY_URL equ 00000004h; Autoproxy URL

    WINHTTP_PROXY_TYPE_AUTO_DETECT equ 00000008h; Use autoproxy detection

    WINHTTP_PROXY_SETTINGS struct
      dwStructSize DWORD ?
      dwFlags DWORD ?
      dwCurrentSettingsVersion DWORD ?
      pwszConnectionName POINTER ?
      pwszProxy POINTER ?
      pwszProxyBypass POINTER ?
      pwszAutoconfigUrl POINTER ?
      pwszAutoconfigSecondaryUrl POINTER ?
      dwAutoDiscoveryFlags DWORD ?
      pwszLastKnownGoodAutoConfigUrl POINTER ?
      dwAutoconfigReloadDelayMins DWORD ?
      ftLastKnownDetectTime FILETIME <>
      dwDetectedInterfaceIpCount DWORD ?
      pdwDetectedInterfaceIp POINTER ?
      cNetworkKeys DWORD ?
      pNetworkKeys PWINHTTP_PROXY_NETWORKING_KEY ?
    WINHTTP_PROXY_SETTINGS ends
    _WINHTTP_PROXY_SETTINGS typedef WINHTTP_PROXY_SETTINGS
    PWINHTTP_PROXY_SETTINGS typedef ptr WINHTTP_PROXY_SETTINGS
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ; WINHTTP_CERTIFICATE_INFO lpBuffer - contains the certificate returned from
    ; the server
    WINHTTP_CERTIFICATE_INFO struct
      ; ftExpiry - date the certificate expires.
      ftExpiry FILETIME <>
      ; ftStart - date the certificate becomes valid.
      ftStart FILETIME <>
      ; lpszSubjectInfo - the name of organization, site, and server
      ;   the cert. was issued for.
      lpszSubjectInfo POINTER ?
      ; lpszIssuerInfo - the name of organization, site, and server
      ;   the cert was issues by.
      lpszIssuerInfo POINTER ?
      ; lpszProtocolName - the name of the protocol used to provide the secure
      ;   connection.
      lpszProtocolName POINTER ?
      ; lpszSignatureAlgName - the name of the algorithm used for signing
      ;  the certificate.
      lpszSignatureAlgName POINTER ?
      ; lpszEncryptionAlgName - the name of the algorithm used for
      ;  doing encryption over the secure channel (SSL) connection.
      lpszEncryptionAlgName POINTER ?
      ; dwKeySize - size of the key.
      dwKeySize DWORD ?
    WINHTTP_CERTIFICATE_INFO ends
    _WINHTTP_CERTIFICATE_INFO typedef WINHTTP_CERTIFICATE_INFO
    PWINHTTP_CERTIFICATE_INFO typedef ptr WINHTTP_CERTIFICATE_INFO
    ifdef _WS2DEF_
      WINHTTP_CONNECTION_INFO struct
        cbSize DWORD ?
        LocalAddress SOCKADDR_STORAGE ?
        ; local ip, local port
        RemoteAddress SOCKADDR_STORAGE ?
        ; remote ip, remote port
      WINHTTP_CONNECTION_INFO ends
      _WINHTTP_CONNECTION_INFO typedef WINHTTP_CONNECTION_INFO
      PWINHTTP_CONNECTION_INFO typedef ptr WINHTTP_CONNECTION_INFO
    endif
    ifdef __SCHANNEL_H__
      WINHTTP_SECURITY_INFO struct
        ConnectionInfo SecPkgContext_ConnectionInfo ?
        CipherInfo SecPkgContext_CipherInfo ?
      WINHTTP_SECURITY_INFO ends
      _WINHTTP_SECURITY_INFO typedef WINHTTP_SECURITY_INFO
      PWINHTTP_SECURITY_INFO typedef ptr WINHTTP_SECURITY_INFO
    endif
    WINHTTP_REQUEST_TIME_ENTRY typedef SDWORD
    WinHttpProxyDetectionStart equ 0
    WinHttpProxyDetectionEnd equ 1
    WinHttpConnectionAcquireStart equ 2
    WinHttpConnectionAcquireWaitEnd equ 3
    WinHttpConnectionAcquireEnd equ 4
    WinHttpNameResolutionStart equ 5
    WinHttpNameResolutionEnd equ 6
    WinHttpConnectionEstablishmentStart equ 7
    WinHttpConnectionEstablishmentEnd equ 8
    WinHttpTlsHandshakeClientLeg1Start equ 9
    WinHttpTlsHandshakeClientLeg1End equ 10
    WinHttpTlsHandshakeClientLeg2Start equ 11
    WinHttpTlsHandshakeClientLeg2End equ 12
    WinHttpTlsHandshakeClientLeg3Start equ 13
    WinHttpTlsHandshakeClientLeg3End equ 14
    WinHttpStreamWaitStart equ 15
    WinHttpStreamWaitEnd equ 16
    WinHttpSendRequestStart equ 17
    WinHttpSendRequestHeadersCompressionStart equ 18
    WinHttpSendRequestHeadersCompressionEnd equ 19
    WinHttpSendRequestHeadersEnd equ 20
    WinHttpSendRequestEnd equ 21
    WinHttpReceiveResponseStart equ 22
    WinHttpReceiveResponseHeadersDecompressionStart equ 23
    WinHttpReceiveResponseHeadersDecompressionEnd equ 24
    WinHttpReceiveResponseHeadersEnd equ 25
    WinHttpReceiveResponseBodyDecompressionDelta equ 26
    WinHttpReceiveResponseEnd equ 27
    WinHttpProxyTunnelStart equ 28
    WinHttpProxyTunnelEnd equ 29
    WinHttpProxyTlsHandshakeClientLeg1Start equ 30
    WinHttpProxyTlsHandshakeClientLeg1End equ 31
    WinHttpProxyTlsHandshakeClientLeg2Start equ 32
    WinHttpProxyTlsHandshakeClientLeg2End equ 33
    WinHttpProxyTlsHandshakeClientLeg3Start equ 34
    WinHttpProxyTlsHandshakeClientLeg3End equ 35
    WinHttpRequestTimeLast equ 36
    WinHttpRequestTimeMax equ 64
    _WINHTTP_REQUEST_TIME_ENTRY typedef WINHTTP_REQUEST_TIME_ENTRY

    WINHTTP_REQUEST_TIMES struct
      cTimes DWORD ?
      rgullTimes QWORD WinHttpRequestTimeMax dup (?)
    WINHTTP_REQUEST_TIMES ends
    _WINHTTP_REQUEST_TIMES typedef WINHTTP_REQUEST_TIMES
    PWINHTTP_REQUEST_TIMES typedef ptr WINHTTP_REQUEST_TIMES
    WINHTTP_REQUEST_STAT_ENTRY typedef SDWORD
    WinHttpConnectFailureCount equ 0
    WinHttpProxyFailureCount equ 1
    WinHttpTlsHandshakeClientLeg1Size equ 2
    WinHttpTlsHandshakeServerLeg1Size equ 3
    WinHttpTlsHandshakeClientLeg2Size equ 4
    WinHttpTlsHandshakeServerLeg2Size equ 5
    WinHttpRequestHeadersSize equ 6
    WinHttpRequestHeadersCompressedSize equ 7
    WinHttpResponseHeadersSize equ 8
    WinHttpResponseHeadersCompressedSize equ 9
    WinHttpResponseBodySize equ 10
    WinHttpResponseBodyCompressedSize equ 11
    WinHttpProxyTlsHandshakeClientLeg1Size equ 12
    WinHttpProxyTlsHandshakeServerLeg1Size equ 13
    WinHttpProxyTlsHandshakeClientLeg2Size equ 14
    WinHttpProxyTlsHandshakeServerLeg2Size equ 15
    WinHttpRequestStatLast equ 16
    WinHttpRequestStatMax equ 32
    _WINHTTP_REQUEST_STAT_ENTRY typedef WINHTTP_REQUEST_STAT_ENTRY

    WINHTTP_REQUEST_STAT_FLAG_TCP_FAST_OPEN equ 00000001h
    WINHTTP_REQUEST_STAT_FLAG_TLS_SESSION_RESUMPTION equ 00000002h
    WINHTTP_REQUEST_STAT_FLAG_TLS_FALSE_START equ 00000004h
    WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_SESSION_RESUMPTION equ 00000008h
    WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_FALSE_START equ 00000010h
    WINHTTP_REQUEST_STAT_FLAG_FIRST_REQUEST equ 00000020h
    WINHTTP_REQUEST_STATS struct
      ullFlags QWORD ?
      ulIndex DWORD ?
      cStats DWORD ?
      rgullStats QWORD WinHttpRequestStatMax dup (?)
    WINHTTP_REQUEST_STATS ends
    _WINHTTP_REQUEST_STATS typedef WINHTTP_REQUEST_STATS
    PWINHTTP_REQUEST_STATS typedef ptr WINHTTP_REQUEST_STATS
    WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION equ 00000001h
    WINHTTP_MATCH_CONNECTION_GUID_FLAGS_MASK equ <WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION>
    WINHTTP_MATCH_CONNECTION_GUID struct
      ConnectionGuid GUID <>
      ullFlags QWORD ?
    WINHTTP_MATCH_CONNECTION_GUID ends
    _WINHTTP_MATCH_CONNECTION_GUID typedef WINHTTP_MATCH_CONNECTION_GUID
    PWINHTTP_MATCH_CONNECTION_GUID typedef ptr WINHTTP_MATCH_CONNECTION_GUID
    ;nameless unions
    WINHTTP_EXTENDED_HEADER struct
      union
        pwszName PCWSTR ?
        pszName PCSTR ?
      ends
      union
        pwszValue PCWSTR ?
        pszValue PCSTR ?
      ends
    WINHTTP_EXTENDED_HEADER ends
    _WINHTTP_EXTENDED_HEADER typedef WINHTTP_EXTENDED_HEADER
    PWINHTTP_EXTENDED_HEADER typedef ptr WINHTTP_EXTENDED_HEADER
    WINHTTP_HEADER_NAME union
      pwszName PCWSTR ?
      pszName PCSTR ?
    WINHTTP_HEADER_NAME ends
    _WINHTTP_HEADER_NAME typedef WINHTTP_HEADER_NAME
    PWINHTTP_HEADER_NAME typedef ptr WINHTTP_HEADER_NAME
    WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT equ 00000001h
    WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE equ 00000002h
    WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL equ 00000004h
    WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL equ 00000008h
    WINHTTP_SECURE_DNS_SETTING typedef SDWORD
    WinHttpSecureDnsSettingDefault equ 0
    WinHttpSecureDnsSettingForcePlaintext equ 1
    WinHttpSecureDnsSettingRequireEncryption equ 2
    WinHttpSecureDnsSettingTryEncryptionWithFallback equ 3
    WinHttpSecureDnsSettingMax equ 4
    _WINHTTP_SECURE_DNS_SETTING typedef WINHTTP_SECURE_DNS_SETTING

    WINHTTP_RESOLVER_CACHE_CONFIG struct
      ulMaxResolverCacheEntries DWORD ?
      ; ulMaxCacheEntryAge is the maximum allowed age of a cache entry specified in minutes.
      ulMaxCacheEntryAge DWORD ?
      ; ulMinCacheEntryTtl the minimum TTL of a cache entry specified in seconds.
      ulMinCacheEntryTtl DWORD ?
      SecureDnsSetting WINHTTP_SECURE_DNS_SETTING ?
      ; If WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL is set, then ullCOnnResolutionWaitTime
      ; can be used to control how frequently a re-resolution attempt is made for any connection.
      ; It is specified in 100 nanosecond units, and the default is 600000000 (one minute).
      ullConnResolutionWaitTime QWORD ?
      ullFlags QWORD ?
    WINHTTP_RESOLVER_CACHE_CONFIG ends
    _WINHTTP_RESOLVER_CACHE_CONFIG typedef WINHTTP_RESOLVER_CACHE_CONFIG
    PWINHTTP_RESOLVER_CACHE_CONFIG typedef ptr WINHTTP_RESOLVER_CACHE_CONFIG
    ; Structures for WinHttpQueryConnectionGroup
    WINHTTP_CONNECTION_GROUP struct
      cConnections DWORD ?
      guidGroup GUID <>
    WINHTTP_CONNECTION_GROUP ends
    _WINHTTP_CONNECTION_GROUP typedef WINHTTP_CONNECTION_GROUP
    PWINHTTP_CONNECTION_GROUP typedef ptr WINHTTP_CONNECTION_GROUP
    WINHTTP_HOST_CONNECTION_GROUP struct
      pwszHost PCWSTR ?
      cConnectionGroups DWORD ?
      pConnectionGroups PWINHTTP_CONNECTION_GROUP ?
    WINHTTP_HOST_CONNECTION_GROUP ends
    _WINHTTP_HOST_CONNECTION_GROUP typedef WINHTTP_HOST_CONNECTION_GROUP
    PWINHTTP_HOST_CONNECTION_GROUP typedef ptr WINHTTP_HOST_CONNECTION_GROUP
    WINHTTP_QUERY_CONNECTION_GROUP_RESULT struct
      cHosts DWORD ?
      pHostConnectionGroups PWINHTTP_HOST_CONNECTION_GROUP ?
    WINHTTP_QUERY_CONNECTION_GROUP_RESULT ends
    _WINHTTP_QUERY_CONNECTION_GROUP_RESULT typedef WINHTTP_QUERY_CONNECTION_GROUP_RESULT
    PWINHTTP_QUERY_CONNECTION_GROUP_RESULT typedef ptr WINHTTP_QUERY_CONNECTION_GROUP_RESULT
    WINHTTP_QUERY_CONNECTION_GROUP_FLAG_INSECURE equ 0000000000000001ulh
    WINHTTP_HTTP2_RECEIVE_WINDOW struct
      ulStreamWindow DWORD ?
      ulStreamWindowUpdateDelta DWORD ?
    WINHTTP_HTTP2_RECEIVE_WINDOW ends
    _WINHTTP_HTTP2_RECEIVE_WINDOW typedef WINHTTP_HTTP2_RECEIVE_WINDOW
    PWINHTTP_HTTP2_RECEIVE_WINDOW typedef ptr WINHTTP_HTTP2_RECEIVE_WINDOW
    ; constants for WinHttpTimeFromSystemTime
    WINHTTP_TIME_FORMAT_BUFSIZE equ 62
    ; options manifests for WinHttp{Query|Set}Option
    WINHTTP_FIRST_OPTION equ <WINHTTP_OPTION_CALLBACK>
    WINHTTP_OPTION_CALLBACK equ 1
    WINHTTP_OPTION_RESOLVE_TIMEOUT equ 2
    WINHTTP_OPTION_CONNECT_TIMEOUT equ 3
    WINHTTP_OPTION_CONNECT_RETRIES equ 4
    WINHTTP_OPTION_SEND_TIMEOUT equ 5
    WINHTTP_OPTION_RECEIVE_TIMEOUT equ 6
    WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT equ 7
    WINHTTP_OPTION_HANDLE_TYPE equ 9
    WINHTTP_OPTION_READ_BUFFER_SIZE equ 12
    WINHTTP_OPTION_WRITE_BUFFER_SIZE equ 13
    WINHTTP_OPTION_PARENT_HANDLE equ 21
    WINHTTP_OPTION_EXTENDED_ERROR equ 24
    WINHTTP_OPTION_SECURITY_FLAGS equ 31
    WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT equ 32
    WINHTTP_OPTION_URL equ 34
    WINHTTP_OPTION_SECURITY_KEY_BITNESS equ 36
    WINHTTP_OPTION_PROXY equ 38
    WINHTTP_OPTION_PROXY_RESULT_ENTRY equ 39
    WINHTTP_OPTION_USER_AGENT equ 41
    WINHTTP_OPTION_CONTEXT_VALUE equ 45
    WINHTTP_OPTION_CLIENT_CERT_CONTEXT equ 47
    WINHTTP_OPTION_REQUEST_PRIORITY equ 58
    WINHTTP_OPTION_HTTP_VERSION equ 59
    WINHTTP_OPTION_DISABLE_FEATURE equ 63
    WINHTTP_OPTION_CODEPAGE equ 68
    WINHTTP_OPTION_MAX_CONNS_PER_SERVER equ 73
    WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER equ 74
    WINHTTP_OPTION_AUTOLOGON_POLICY equ 77
    WINHTTP_OPTION_SERVER_CERT_CONTEXT equ 78
    WINHTTP_OPTION_ENABLE_FEATURE equ 79
    WINHTTP_OPTION_WORKER_THREAD_COUNT equ 80
    WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT equ 81
    WINHTTP_OPTION_PASSPORT_COBRANDING_URL equ 82
    WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH equ 83
    WINHTTP_OPTION_SECURE_PROTOCOLS equ 84
    WINHTTP_OPTION_ENABLETRACING equ 85
    WINHTTP_OPTION_PASSPORT_SIGN_OUT equ 86
    WINHTTP_OPTION_PASSPORT_RETURN_URL equ 87
    WINHTTP_OPTION_REDIRECT_POLICY equ 88
    WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS equ 89
    WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE equ 90
    WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE equ 91
    WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE equ 92
    WINHTTP_OPTION_CONNECTION_INFO equ 93
    WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST equ 94
    WINHTTP_OPTION_SPN equ 96
    WINHTTP_OPTION_GLOBAL_PROXY_CREDS equ 97
    WINHTTP_OPTION_GLOBAL_SERVER_CREDS equ 98
    WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT equ 99
    WINHTTP_OPTION_REJECT_USERPWD_IN_URL equ 100
    WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS equ 101
    WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE equ 103
    WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE equ 104
    WINHTTP_OPTION_NETWORK_INTERFACE_AFFINITY equ 105
    WINHTTP_OPTION_SERVER_SPN_USED equ 106
    WINHTTP_OPTION_PROXY_SPN_USED equ 107
    WINHTTP_OPTION_SERVER_CBT equ 108
    WINHTTP_OPTION_UNSAFE_HEADER_PARSING equ 110
    WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS equ 111
    WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET equ 114
    WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT equ 115
    WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL equ 116
    WINHTTP_OPTION_DECOMPRESSION equ 118
    WINHTTP_OPTION_WEB_SOCKET_RECEIVE_BUFFER_SIZE equ 122
    WINHTTP_OPTION_WEB_SOCKET_SEND_BUFFER_SIZE equ 123
    WINHTTP_OPTION_TCP_PRIORITY_HINT equ 128
    WINHTTP_OPTION_CONNECTION_FILTER equ 131
    WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL equ 133
    WINHTTP_OPTION_HTTP_PROTOCOL_USED equ 134
    WINHTTP_OPTION_KDC_PROXY_SETTINGS equ 136
    WINHTTP_OPTION_PROXY_DISABLE_SERVICE_CALLS equ 137
    WINHTTP_OPTION_ENCODE_EXTRA equ 138
    WINHTTP_OPTION_DISABLE_STREAM_QUEUE equ 139
    WINHTTP_OPTION_IPV6_FAST_FALLBACK equ 140
    WINHTTP_OPTION_CONNECTION_STATS_V0 equ 141
    WINHTTP_OPTION_REQUEST_TIMES equ 142
    WINHTTP_OPTION_EXPIRE_CONNECTION equ 143
    WINHTTP_OPTION_DISABLE_SECURE_PROTOCOL_FALLBACK equ 144
    WINHTTP_OPTION_HTTP_PROTOCOL_REQUIRED equ 145
    WINHTTP_OPTION_REQUEST_STATS equ 146
    WINHTTP_OPTION_SERVER_CERT_CHAIN_CONTEXT equ 147
    WINHTTP_OPTION_CONNECTION_STATS_V1 equ 150
    WINHTTP_OPTION_SECURITY_INFO equ 151
    WINHTTP_OPTION_TCP_KEEPALIVE equ 152
    WINHTTP_OPTION_TCP_FAST_OPEN equ 153
    WINHTTP_OPTION_TLS_FALSE_START equ 154
    WINHTTP_OPTION_IGNORE_CERT_REVOCATION_OFFLINE equ 155
    WINHTTP_OPTION_TLS_PROTOCOL_INSECURE_FALLBACK equ 158
    WINHTTP_OPTION_STREAM_ERROR_CODE equ 159
    WINHTTP_OPTION_REQUIRE_STREAM_END equ 160
    WINHTTP_OPTION_ENABLE_HTTP2_PLUS_CLIENT_CERT equ 161
    WINHTTP_OPTION_FAILED_CONNECTION_RETRIES equ 162
    WINHTTP_OPTION_HTTP2_KEEPALIVE equ 164
    WINHTTP_OPTION_RESOLUTION_HOSTNAME equ 165
    WINHTTP_OPTION_SET_TOKEN_BINDING equ 166
    WINHTTP_OPTION_TOKEN_BINDING_PUBLIC_KEY equ 167
    WINHTTP_OPTION_REFERER_TOKEN_BINDING_HOSTNAME equ 168
    WINHTTP_OPTION_HTTP2_PLUS_TRANSFER_ENCODING equ 169
    WINHTTP_OPTION_RESOLVER_CACHE_CONFIG equ 170
    WINHTTP_OPTION_DISABLE_CERT_CHAIN_BUILDING equ 171
    WINHTTP_OPTION_BACKGROUND_CONNECTIONS equ 172
    WINHTTP_OPTION_FIRST_AVAILABLE_CONNECTION equ 173
    WINHTTP_OPTION_TCP_PRIORITY_STATUS equ 177
    WINHTTP_OPTION_CONNECTION_GUID equ 178
    WINHTTP_OPTION_MATCH_CONNECTION_GUID equ 179
    WINHTTP_OPTION_HTTP2_RECEIVE_WINDOW equ 183
    WINHTTP_OPTION_FEATURE_SUPPORTED equ 184
    WINHTTP_OPTION_QUIC_STATS equ 185
    WINHTTP_OPTION_HTTP3_KEEPALIVE equ 188
    WINHTTP_OPTION_HTTP3_HANDSHAKE_TIMEOUT equ 189
    WINHTTP_OPTION_HTTP3_INITIAL_RTT equ 190
    WINHTTP_OPTION_HTTP3_STREAM_ERROR_CODE equ 191
    WINHTTP_OPTION_REQUEST_ANNOTATION equ 192
    WINHTTP_OPTION_DISABLE_PROXY_AUTH_SCHEMES equ 193
    WINHTTP_OPTION_REVERT_IMPERSONATION_SERVER_CERT equ 194
    WINHTTP_OPTION_DISABLE_GLOBAL_POOLING equ 195
    WINHTTP_OPTION_USE_SESSION_SCH_CRED equ 196
    WINHTTP_LAST_OPTION equ <WINHTTP_OPTION_USE_SESSION_SCH_CRED>
    WINHTTP_OPTION_USERNAME equ 1000h
    WINHTTP_OPTION_PASSWORD equ 1001h
    WINHTTP_OPTION_PROXY_USERNAME equ 1002h
    WINHTTP_OPTION_PROXY_PASSWORD equ 1003h
    ; manifest value for WINHTTP_OPTION_MAX_CONNS_PER_SERVER and WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER
    WINHTTP_CONNS_PER_SERVER_UNLIMITED equ 0FFFFFFFFh
    WINHTTP_CONNECTION_RETRY_CONDITION_408 equ 1h
    WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE equ 2h
    WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION equ 4h
    WINHTTP_CONNECTION_RETRY_CONDITION_MASK equ <(WINHTTP_CONNECTION_RETRY_CONDITION_408 or WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE or WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION)>
    WINHTTP_FAILED_CONNECTION_RETRIES struct
      dwMaxRetries DWORD ?
      dwAllowedRetryConditions DWORD ?
    WINHTTP_FAILED_CONNECTION_RETRIES ends
    _WINHTTP_FAILED_CONNECTION_RETRIES typedef WINHTTP_FAILED_CONNECTION_RETRIES
    PWINHTTP_FAILED_CONNECTION_RETRIES typedef ptr WINHTTP_FAILED_CONNECTION_RETRIES
    ; Values for WINHTTP_OPTION_DECOMPRESSION
    WINHTTP_DECOMPRESSION_FLAG_GZIP equ 00000001h
    WINHTTP_DECOMPRESSION_FLAG_DEFLATE equ 00000002h
    WINHTTP_DECOMPRESSION_FLAG_ALL equ <(WINHTTP_DECOMPRESSION_FLAG_GZIP or WINHTTP_DECOMPRESSION_FLAG_DEFLATE)>
    ; Values for WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL / WINHTTP_OPTION_HTTP_PROTOCOL_USED
    WINHTTP_PROTOCOL_FLAG_HTTP2 equ 1h
    WINHTTP_PROTOCOL_FLAG_HTTP3 equ 2h
    WINHTTP_PROTOCOL_MASK equ <(WINHTTP_PROTOCOL_FLAG_HTTP2 or WINHTTP_PROTOCOL_FLAG_HTTP3)>
    WINHTTP_OPTION_REQUEST_ANNOTATION_MAX_LENGTH equ 0FA00h
    ; values for WINHTTP_OPTION_AUTOLOGON_POLICY
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM equ 0
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW equ 1
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH equ 2
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_PROXY_ONLY equ 3
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT equ <WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM>
    WINHTTP_AUTOLOGON_SECURITY_LEVEL_MAX equ <WINHTTP_AUTOLOGON_SECURITY_LEVEL_PROXY_ONLY>
    ; values for WINHTTP_OPTION_REDIRECT_POLICY
    WINHTTP_OPTION_REDIRECT_POLICY_NEVER equ 0
    WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP equ 1
    WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS equ 2
    WINHTTP_OPTION_REDIRECT_POLICY_LAST equ <WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS>
    WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT equ <WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP>
    WINHTTP_DISABLE_PASSPORT_AUTH equ 00000000h
    WINHTTP_ENABLE_PASSPORT_AUTH equ 10000000h
    WINHTTP_DISABLE_PASSPORT_KEYRING equ 20000000h
    WINHTTP_ENABLE_PASSPORT_KEYRING equ 40000000h
    ; Bits passed with WINHTTP_OPTION_DISABLE_PROXY_AUTH_SCHEMES option
    WINHTTP_PROXY_DISABLE_SCHEME_BASIC equ 00000001h
    WINHTTP_PROXY_DISABLE_SCHEME_DIGEST equ 00000002h
    WINHTTP_PROXY_DISABLE_SCHEME_NTLM equ 00000004h
    WINHTTP_PROXY_DISABLE_SCHEME_KERBEROS equ 00000008h
    WINHTTP_PROXY_DISABLE_SCHEME_NEGOTIATE equ 00000010h
    WINHTTP_PROXY_DISABLE_AUTH_LOCAL_SERVICE equ 00000100h
    ; values for WINHTTP_OPTION_DISABLE_FEATURE
    WINHTTP_DISABLE_COOKIES equ 00000001h
    WINHTTP_DISABLE_REDIRECTS equ 00000002h
    WINHTTP_DISABLE_AUTHENTICATION equ 00000004h
    WINHTTP_DISABLE_KEEP_ALIVE equ 00000008h
    ; values for WINHTTP_OPTION_ENABLE_FEATURE
    WINHTTP_ENABLE_SSL_REVOCATION equ 00000001h
    WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION equ 00000002h
    ; values for WINHTTP_OPTION_SPN
    WINHTTP_DISABLE_SPN_SERVER_PORT equ 00000000h
    WINHTTP_ENABLE_SPN_SERVER_PORT equ 00000001h
    WINHTTP_OPTION_SPN_MASK equ <WINHTTP_ENABLE_SPN_SERVER_PORT>
    WINHTTP_CREDS struct
      lpszUserName POINTER ?
      lpszPassword POINTER ?
      lpszRealm POINTER ?
      dwAuthScheme DWORD ?
      lpszHostName POINTER ?
      dwPort DWORD ?
    WINHTTP_CREDS ends
    tagWINHTTP_CREDS typedef WINHTTP_CREDS
    PWINHTTP_CREDS typedef ptr WINHTTP_CREDS
    ; structure for WINHTTP_OPTION_GLOBAL_SERVER_CREDS and
    ; WINHTTP_OPTION_GLOBAL_PROXY_CREDS
    WINHTTP_CREDS_EX struct
      lpszUserName POINTER ?
      lpszPassword POINTER ?
      lpszRealm POINTER ?
      dwAuthScheme DWORD ?
      lpszHostName POINTER ?
      dwPort DWORD ?
      lpszUrl POINTER ?
    WINHTTP_CREDS_EX ends
    tagWINHTTP_CREDS_EX typedef WINHTTP_CREDS_EX
    PWINHTTP_CREDS_EX typedef ptr WINHTTP_CREDS_EX
    ; winhttp handle types
    WINHTTP_HANDLE_TYPE_SESSION equ 1
    WINHTTP_HANDLE_TYPE_CONNECT equ 2
    WINHTTP_HANDLE_TYPE_REQUEST equ 3
    WINHTTP_HANDLE_TYPE_PROXY_RESOLVER equ 4
    WINHTTP_HANDLE_TYPE_WEBSOCKET equ 5
    ; values for auth schemes
    WINHTTP_AUTH_SCHEME_BASIC equ 00000001h
    WINHTTP_AUTH_SCHEME_NTLM equ 00000002h
    WINHTTP_AUTH_SCHEME_PASSPORT equ 00000004h
    WINHTTP_AUTH_SCHEME_DIGEST equ 00000008h
    WINHTTP_AUTH_SCHEME_NEGOTIATE equ 00000010h
    ; WinHttp supported Authentication Targets
    WINHTTP_AUTH_TARGET_SERVER equ 00000000h
    WINHTTP_AUTH_TARGET_PROXY equ 00000001h
    ; values for WINHTTP_OPTION_SECURITY_FLAGS
    ; query only
    SECURITY_FLAG_SECURE equ 00000001h; can query only

    SECURITY_FLAG_STRENGTH_WEAK equ 10000000h
    SECURITY_FLAG_STRENGTH_MEDIUM equ 40000000h
    SECURITY_FLAG_STRENGTH_STRONG equ 20000000h
    ; Secure connection error status flags
    WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED equ 00000001h
    WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT equ 00000002h
    WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED equ 00000004h
    WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA equ 00000008h
    WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID equ 00000010h
    WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID equ 00000020h
    WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE equ 00000040h
    WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR equ 80000000h
    WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 equ 00000008h
    WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 equ 00000020h
    WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 equ 00000080h
    WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 equ 00000200h
    WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 equ 00000800h
    WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_3 equ 00002000h
    WINHTTP_FLAG_SECURE_PROTOCOL_ALL equ <(WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 or WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 or WINHTTP_FLAG_SECURE_PROTOCOL_TLS1)>
    ; callback function for WinHttpSetStatusCallback
    TYPE_WINHTTP_STATUS_CALLBACK typedef proto WIN_STD_CALL_CONV :HINTERNET, :DWORD_PTR, :DWORD, :LPVOID, :DWORD
    WINHTTP_STATUS_CALLBACK typedef ptr TYPE_WINHTTP_STATUS_CALLBACK

    LPWINHTTP_STATUS_CALLBACK typedef ptr WINHTTP_STATUS_CALLBACK
    ; status manifests for WinHttp status callback
    WINHTTP_CALLBACK_STATUS_RESOLVING_NAME equ 00000001h
    WINHTTP_CALLBACK_STATUS_NAME_RESOLVED equ 00000002h
    WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER equ 00000004h
    WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER equ 00000008h
    WINHTTP_CALLBACK_STATUS_SENDING_REQUEST equ 00000010h
    WINHTTP_CALLBACK_STATUS_REQUEST_SENT equ 00000020h
    WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE equ 00000040h
    WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED equ 00000080h
    WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION equ 00000100h
    WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED equ 00000200h
    WINHTTP_CALLBACK_STATUS_HANDLE_CREATED equ 00000400h
    WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING equ 00000800h
    WINHTTP_CALLBACK_STATUS_DETECTING_PROXY equ 00001000h
    WINHTTP_CALLBACK_STATUS_REDIRECT equ 00004000h
    WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE equ 00008000h
    WINHTTP_CALLBACK_STATUS_SECURE_FAILURE equ 00010000h
    WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE equ 00020000h
    WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE equ 00040000h
    WINHTTP_CALLBACK_STATUS_READ_COMPLETE equ 00080000h
    WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE equ 00100000h
    WINHTTP_CALLBACK_STATUS_REQUEST_ERROR equ 00200000h
    WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE equ 00400000h
    WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE equ 01000000h
    WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE equ 02000000h
    WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE equ 04000000h
    WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE equ 08000000h
    WINHTTP_CALLBACK_STATUS_SETTINGS_WRITE_COMPLETE equ 10000000h
    WINHTTP_CALLBACK_STATUS_SETTINGS_READ_COMPLETE equ 20000000h
    ; API Enums for WINHTTP_CALLBACK_STATUS_REQUEST_ERROR:
    API_RECEIVE_RESPONSE equ (1)
    API_QUERY_DATA_AVAILABLE equ (2)
    API_READ_DATA equ (3)
    API_WRITE_DATA equ (4)
    API_SEND_REQUEST equ (5)
    API_GET_PROXY_FOR_URL equ (6)
    API_GET_PROXY_SETTINGS equ (7)
    WINHTTP_CALLBACK_FLAG_RESOLVE_NAME equ <(WINHTTP_CALLBACK_STATUS_RESOLVING_NAME or WINHTTP_CALLBACK_STATUS_NAME_RESOLVED)>
    WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER equ <(WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER or WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER)>
    WINHTTP_CALLBACK_FLAG_SEND_REQUEST equ <(WINHTTP_CALLBACK_STATUS_SENDING_REQUEST or WINHTTP_CALLBACK_STATUS_REQUEST_SENT)>
    WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE equ <(WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE or WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED)>
    WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION equ <(WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION or WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED)>
    WINHTTP_CALLBACK_FLAG_HANDLES equ <(WINHTTP_CALLBACK_STATUS_HANDLE_CREATED or WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING)>
    WINHTTP_CALLBACK_FLAG_DETECTING_PROXY equ <WINHTTP_CALLBACK_STATUS_DETECTING_PROXY>
    WINHTTP_CALLBACK_FLAG_REDIRECT equ <WINHTTP_CALLBACK_STATUS_REDIRECT>
    WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE equ <WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE>
    WINHTTP_CALLBACK_FLAG_SECURE_FAILURE equ <WINHTTP_CALLBACK_STATUS_SECURE_FAILURE>
    WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE equ <WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE>
    WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE equ <WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE>
    WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE equ <WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE>
    WINHTTP_CALLBACK_FLAG_READ_COMPLETE equ <WINHTTP_CALLBACK_STATUS_READ_COMPLETE>
    WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE equ <WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE>
    WINHTTP_CALLBACK_FLAG_REQUEST_ERROR equ <WINHTTP_CALLBACK_STATUS_REQUEST_ERROR>
    WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE equ <WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE>
    WINHTTP_CALLBACK_FLAG_GETPROXYSETTINGS_COMPLETE equ <WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE>
    WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS equ <(WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE or WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE or WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE or WINHTTP_CALLBACK_STATUS_READ_COMPLETE or WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE or WINHTTP_CALLBACK_STATUS_REQUEST_ERROR or WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE or WINHTTP_CALLBACK_STATUS_GETPROXYSETTINGS_COMPLETE)>
    WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS equ 0ffffffffh
    ; if the following value is returned by WinHttpSetStatusCallback, then
    ; probably an invalid (non-code) address was supplied for the callback
    WINHTTP_INVALID_STATUS_CALLBACK equ ((WINHTTP_STATUS_CALLBACK) (- 1))
    ; WinHttpQueryHeaders info levels. Generally, there is one info level
    ; for each potential RFC822/HTTP/MIME header that an HTTP server
    ; may send as part of a request response.
    ; The WINHTTP_QUERY_RAW_HEADERS info level is provided for clients
    ; that choose to perform their own header parsing.
    WINHTTP_QUERY_MIME_VERSION equ 0
    WINHTTP_QUERY_CONTENT_TYPE equ 1
    WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING equ 2
    WINHTTP_QUERY_CONTENT_ID equ 3
    WINHTTP_QUERY_CONTENT_DESCRIPTION equ 4
    WINHTTP_QUERY_CONTENT_LENGTH equ 5
    WINHTTP_QUERY_CONTENT_LANGUAGE equ 6
    WINHTTP_QUERY_ALLOW equ 7
    WINHTTP_QUERY_PUBLIC equ 8
    WINHTTP_QUERY_DATE equ 9
    WINHTTP_QUERY_EXPIRES equ 10
    WINHTTP_QUERY_LAST_MODIFIED equ 11
    WINHTTP_QUERY_MESSAGE_ID equ 12
    WINHTTP_QUERY_URI equ 13
    WINHTTP_QUERY_DERIVED_FROM equ 14
    WINHTTP_QUERY_COST equ 15
    WINHTTP_QUERY_LINK equ 16
    WINHTTP_QUERY_PRAGMA equ 17
    WINHTTP_QUERY_VERSION equ 18; special: part of status line

    WINHTTP_QUERY_STATUS_CODE equ 19; special: part of status line

    WINHTTP_QUERY_STATUS_TEXT equ 20; special: part of status line

    WINHTTP_QUERY_RAW_HEADERS equ 21; special: all headers as ASCIIZ

    WINHTTP_QUERY_RAW_HEADERS_CRLF equ 22; special: all headers

    WINHTTP_QUERY_CONNECTION equ 23
    WINHTTP_QUERY_ACCEPT equ 24
    WINHTTP_QUERY_ACCEPT_CHARSET equ 25
    WINHTTP_QUERY_ACCEPT_ENCODING equ 26
    WINHTTP_QUERY_ACCEPT_LANGUAGE equ 27
    WINHTTP_QUERY_AUTHORIZATION equ 28
    WINHTTP_QUERY_CONTENT_ENCODING equ 29
    WINHTTP_QUERY_FORWARDED equ 30
    WINHTTP_QUERY_FROM equ 31
    WINHTTP_QUERY_IF_MODIFIED_SINCE equ 32
    WINHTTP_QUERY_LOCATION equ 33
    WINHTTP_QUERY_ORIG_URI equ 34
    WINHTTP_QUERY_REFERER equ 35
    WINHTTP_QUERY_RETRY_AFTER equ 36
    WINHTTP_QUERY_SERVER equ 37
    WINHTTP_QUERY_TITLE equ 38
    WINHTTP_QUERY_USER_AGENT equ 39
    WINHTTP_QUERY_WWW_AUTHENTICATE equ 40
    WINHTTP_QUERY_PROXY_AUTHENTICATE equ 41
    WINHTTP_QUERY_ACCEPT_RANGES equ 42
    WINHTTP_QUERY_SET_COOKIE equ 43
    WINHTTP_QUERY_COOKIE equ 44
    WINHTTP_QUERY_REQUEST_METHOD equ 45; special: GET/POST etc.

    WINHTTP_QUERY_REFRESH equ 46
    WINHTTP_QUERY_CONTENT_DISPOSITION equ 47
    ; HTTP 1.1 defined headers
    WINHTTP_QUERY_AGE equ 48
    WINHTTP_QUERY_CACHE_CONTROL equ 49
    WINHTTP_QUERY_CONTENT_BASE equ 50
    WINHTTP_QUERY_CONTENT_LOCATION equ 51
    WINHTTP_QUERY_CONTENT_MD5 equ 52
    WINHTTP_QUERY_CONTENT_RANGE equ 53
    WINHTTP_QUERY_ETAG equ 54
    WINHTTP_QUERY_HOST equ 55
    WINHTTP_QUERY_IF_MATCH equ 56
    WINHTTP_QUERY_IF_NONE_MATCH equ 57
    WINHTTP_QUERY_IF_RANGE equ 58
    WINHTTP_QUERY_IF_UNMODIFIED_SINCE equ 59
    WINHTTP_QUERY_MAX_FORWARDS equ 60
    WINHTTP_QUERY_PROXY_AUTHORIZATION equ 61
    WINHTTP_QUERY_RANGE equ 62
    WINHTTP_QUERY_TRANSFER_ENCODING equ 63
    WINHTTP_QUERY_UPGRADE equ 64
    WINHTTP_QUERY_VARY equ 65
    WINHTTP_QUERY_VIA equ 66
    WINHTTP_QUERY_WARNING equ 67
    WINHTTP_QUERY_EXPECT equ 68
    WINHTTP_QUERY_PROXY_CONNECTION equ 69
    WINHTTP_QUERY_UNLESS_MODIFIED_SINCE equ 70
    WINHTTP_QUERY_PROXY_SUPPORT equ 75
    WINHTTP_QUERY_AUTHENTICATION_INFO equ 76
    WINHTTP_QUERY_PASSPORT_URLS equ 77
    WINHTTP_QUERY_PASSPORT_CONFIG equ 78
    WINHTTP_QUERY_MAX equ 78
    WINHTTP_QUERY_EX_ALL_HEADERS equ <WINHTTP_QUERY_RAW_HEADERS>
    ; WINHTTP_QUERY_CUSTOM - if this special value is supplied as the dwInfoLevel
    ; parameter of WinHttpQueryHeaders() then the lpBuffer parameter contains the name
    ; of the header we are to query
    WINHTTP_QUERY_CUSTOM equ 65535
    ; WINHTTP_QUERY_FLAG_REQUEST_HEADERS - if this bit is set in the dwInfoLevel
    ; parameter of WinHttpQueryHeaders() then the request headers will be queried for the
    ; request information
    WINHTTP_QUERY_FLAG_REQUEST_HEADERS equ 80000000h
    ; WINHTTP_QUERY_FLAG_SYSTEMTIME - if this bit is set in the dwInfoLevel parameter
    ; of WinHttpQueryHeaders() AND the header being queried contains date information,
    ; e.g. the "Expires:" header then lpBuffer will contain a SYSTEMTIME structure
    ; containing the date and time information converted from the header string
    WINHTTP_QUERY_FLAG_SYSTEMTIME equ 40000000h
    ; WINHTTP_QUERY_FLAG_NUMBER - if this bit is set in the dwInfoLevel parameter of
    ; HttpQueryHeader(), then the value of the header will be converted to a number
    ; before being returned to the caller, if applicable
    WINHTTP_QUERY_FLAG_NUMBER equ 20000000h
    ; HTTP_QUERY_FLAG_NUMBER64 - if this bit is set in the dwInfoLevel parameter of
    ; HttpQueryInfo(), then the value of the header will be converted to a 64bit
    ; number before being returned to the caller, if applicable
    WINHTTP_QUERY_FLAG_NUMBER64 equ 08000000h
    ; HTTP_QUERY_FLAG_TRAILERS - if this bit is set in the dwInfoLevel parameter of
    ; WinHttpQueryHeaders(), then the response trailers will be queried, if they exist
    WINHTTP_QUERY_FLAG_TRAILERS equ 02000000h
    ; WINHTTP_QUERY_FLAG_WIRE_ENCODING - if this bit is set in the dwInfoLevel parameter
    ; of WinHttpQueryHeaders(), then the value of the header will be returned
    ; with as it gets encoded when sent over the wire.
    WINHTTP_QUERY_FLAG_WIRE_ENCODING equ 01000000h
    ; HTTP Response Status Codes:
    HTTP_STATUS_CONTINUE equ 100; OK to continue with request

    HTTP_STATUS_SWITCH_PROTOCOLS equ 101; server has switched protocols in upgrade header

    HTTP_STATUS_OK equ 200; request completed

    HTTP_STATUS_CREATED equ 201; object created, reason = new URI

    HTTP_STATUS_ACCEPTED equ 202; async completion (TBS)

    HTTP_STATUS_PARTIAL equ 203; partial completion

    HTTP_STATUS_NO_CONTENT equ 204; no info to return

    HTTP_STATUS_RESET_CONTENT equ 205; request completed, but clear form

    HTTP_STATUS_PARTIAL_CONTENT equ 206; partial GET fulfilled

    HTTP_STATUS_WEBDAV_MULTI_STATUS equ 207; WebDAV Multi-Status

    HTTP_STATUS_AMBIGUOUS equ 300; server couldn't decide what to return

    HTTP_STATUS_MOVED equ 301; object permanently moved

    HTTP_STATUS_REDIRECT equ 302; object temporarily moved

    HTTP_STATUS_REDIRECT_METHOD equ 303; redirection w/ new access method

    HTTP_STATUS_NOT_MODIFIED equ 304; if-modified-since was not modified

    HTTP_STATUS_USE_PROXY equ 305; redirection to proxy, location header specifies proxy to use

    HTTP_STATUS_REDIRECT_KEEP_VERB equ 307; HTTP/1.1: keep same verb

    HTTP_STATUS_PERMANENT_REDIRECT equ 308; Object permanently moved keep verb

    HTTP_STATUS_BAD_REQUEST equ 400; invalid syntax

    HTTP_STATUS_DENIED equ 401; access denied

    HTTP_STATUS_PAYMENT_REQ equ 402; payment required

    HTTP_STATUS_FORBIDDEN equ 403; request forbidden

    HTTP_STATUS_NOT_FOUND equ 404; object not found

    HTTP_STATUS_BAD_METHOD equ 405; method is not allowed

    HTTP_STATUS_NONE_ACCEPTABLE equ 406; no response acceptable to client found

    HTTP_STATUS_PROXY_AUTH_REQ equ 407; proxy authentication required

    HTTP_STATUS_REQUEST_TIMEOUT equ 408; server timed out waiting for request

    HTTP_STATUS_CONFLICT equ 409; user should resubmit with more info

    HTTP_STATUS_GONE equ 410; the resource is no longer available

    HTTP_STATUS_LENGTH_REQUIRED equ 411; the server refused to accept request w/o a length

    HTTP_STATUS_PRECOND_FAILED equ 412; precondition given in request failed

    HTTP_STATUS_REQUEST_TOO_LARGE equ 413; request entity was too large

    HTTP_STATUS_URI_TOO_LONG equ 414; request URI too long

    HTTP_STATUS_UNSUPPORTED_MEDIA equ 415; unsupported media type

    HTTP_STATUS_RETRY_WITH equ 449; retry after doing the appropriate action.

    HTTP_STATUS_SERVER_ERROR equ 500; internal server error

    HTTP_STATUS_NOT_SUPPORTED equ 501; required not supported

    HTTP_STATUS_BAD_GATEWAY equ 502; error response received from gateway

    HTTP_STATUS_SERVICE_UNAVAIL equ 503; temporarily overloaded

    HTTP_STATUS_GATEWAY_TIMEOUT equ 504; timed out waiting for gateway

    HTTP_STATUS_VERSION_NOT_SUP equ 505; HTTP version not supported

    HTTP_STATUS_FIRST equ <HTTP_STATUS_CONTINUE>
    HTTP_STATUS_LAST equ <HTTP_STATUS_VERSION_NOT_SUP>
    ; flags for CrackUrl() and CombineUrl()
    ICU_NO_ENCODE equ 20000000h; Don't convert unsafe characters to escape sequence

    ICU_DECODE equ 10000000h; Convert %XX escape sequences to characters

    ICU_NO_META equ 08000000h; Don't convert .. etc. meta path sequences

    ICU_ENCODE_SPACES_ONLY equ 04000000h; Encode spaces only

    ICU_BROWSER_MODE equ 02000000h; Special encode/decode rules for browser

    ICU_ENCODE_PERCENT equ 00001000h; Encode any percent (ASCII25)

    ; signs encountered, default is to not encode percent.
    ; flags for WinHttpCrackUrl() and WinHttpCreateUrl()
    ICU_ESCAPE equ 80000000h; (un)escape URL characters

    ICU_ESCAPE_AUTHORITY equ 00002000h;causes InternetCreateUrlA to escape chars in authority components (user, pwd, host)

    ICU_REJECT_USERPWD equ 00004000h; rejects usrls whick have username/pwd sections

    ; WinHttpOpen dwAccessType values (also for WINHTTP_PROXY_INFO::dwAccessType)
    WINHTTP_ACCESS_TYPE_DEFAULT_PROXY equ 0
    WINHTTP_ACCESS_TYPE_NO_PROXY equ 1
    WINHTTP_ACCESS_TYPE_NAMED_PROXY equ 3
    WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY equ 4
    ; WinHttpOpen prettifiers for optional parameters
    WINHTTP_NO_PROXY_NAME equ <NULL>
    WINHTTP_NO_PROXY_BYPASS equ <NULL>
    WINHTTP_NO_CLIENT_CERT_CONTEXT equ <NULL>
    ; WinHttpOpenRequest prettifers for optional parameters
    WINHTTP_NO_REFERER equ <NULL>
    WINHTTP_DEFAULT_ACCEPT_TYPES equ <NULL>
    ; values for dwModifiers parameter of WinHttpAddRequestHeaders()
    WINHTTP_ADDREQ_INDEX_MASK equ 0000FFFFh
    WINHTTP_ADDREQ_FLAGS_MASK equ 0FFFF0000h
    ; WINHTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
    ; already exist
    WINHTTP_ADDREQ_FLAG_ADD_IF_NEW equ 10000000h
    ; WINHTTP_ADDREQ_FLAG_ADD - if WINHTTP_ADDREQ_FLAG_REPLACE is set but the header is
    ; not found then if this flag is set, the header is added anyway, so long as
    ; there is a valid header-value
    WINHTTP_ADDREQ_FLAG_ADD equ 20000000h
    ; WINHTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
    ; "Accept: text/*" and "Accept: audio/*" with this flag results in a single
    ; header: "Accept: text/*, audio/*"
    WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA equ 40000000h
    WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON equ 01000000h
    WINHTTP_ADDREQ_FLAG_COALESCE equ <WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA>
    ; WINHTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
    ; be supplied in the buffer. If the header to be replaced is not the first
    ; in a list of headers with the same name, then the relative index should be
    ; supplied in the low 8 bits of the dwModifiers parameter. If the header-value
    ; part is missing, then the header is removed
    WINHTTP_ADDREQ_FLAG_REPLACE equ 80000000h
    ; values for ullFlags member of WINHTTP_EXTENDED_HEADER
    ; WINHTTP_EXTENDED_HEADER_FLAG_UNICODE - indicates the value of the request header
    ; is unicode.
    WINHTTP_EXTENDED_HEADER_FLAG_UNICODE equ 00000001h
    ; values for ullFlags for WinHttpReadDataEx
    ; WINHTTP_READ_DATA_EX_FLAG_FILL_BUFFER - if set, don't complete ReadDataEx
    ; until the data buffer has been filled or the response is complete.
    WINHTTP_READ_DATA_EX_FLAG_FILL_BUFFER equ 0000000000000001ulh
    WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH equ 0
    ; WinHttpSendRequest prettifiers for optional parameters.
    WINHTTP_NO_ADDITIONAL_HEADERS equ <NULL>
    WINHTTP_NO_REQUEST_DATA equ <NULL>
    ; WinHttpQueryHeaders prettifiers for optional parameters.
    WINHTTP_HEADER_NAME_BY_INDEX equ <NULL>
    WINHTTP_NO_OUTPUT_BUFFER equ <NULL>
    WINHTTP_NO_HEADER_INDEX equ <NULL>
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    WINHTTP_CURRENT_USER_IE_PROXY_CONFIG struct
      fAutoDetect DWORD ?
      lpszAutoConfigUrl POINTER ?
      lpszProxy POINTER ?
      lpszProxyBypass POINTER ?
    WINHTTP_CURRENT_USER_IE_PROXY_CONFIG ends
    _WINHTTP_CURRENT_USER_IE_PROXY_CONFIG typedef WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
    PWINHTTP_CURRENT_USER_IE_PROXY_CONFIG typedef ptr WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ;#if !defined(_WINERROR_)
    ; WinHttp API error returns
    WINHTTP_ERROR_BASE equ 12000
    ERROR_WINHTTP_OUT_OF_HANDLES equ (WINHTTP_ERROR_BASE + 1)
    ERROR_WINHTTP_TIMEOUT equ (WINHTTP_ERROR_BASE + 2)
    ERROR_WINHTTP_INTERNAL_ERROR equ (WINHTTP_ERROR_BASE + 4)
    ERROR_WINHTTP_INVALID_URL equ (WINHTTP_ERROR_BASE + 5)
    ERROR_WINHTTP_UNRECOGNIZED_SCHEME equ (WINHTTP_ERROR_BASE + 6)
    ERROR_WINHTTP_NAME_NOT_RESOLVED equ (WINHTTP_ERROR_BASE + 7)
    ERROR_WINHTTP_INVALID_OPTION equ (WINHTTP_ERROR_BASE + 9)
    ERROR_WINHTTP_OPTION_NOT_SETTABLE equ (WINHTTP_ERROR_BASE + 11)
    ERROR_WINHTTP_SHUTDOWN equ (WINHTTP_ERROR_BASE + 12)
    ERROR_WINHTTP_LOGIN_FAILURE equ (WINHTTP_ERROR_BASE + 15)
    ERROR_WINHTTP_OPERATION_CANCELLED equ (WINHTTP_ERROR_BASE + 17)
    ERROR_WINHTTP_INCORRECT_HANDLE_TYPE equ (WINHTTP_ERROR_BASE + 18)
    ERROR_WINHTTP_INCORRECT_HANDLE_STATE equ (WINHTTP_ERROR_BASE + 19)
    ERROR_WINHTTP_CANNOT_CONNECT equ (WINHTTP_ERROR_BASE + 29)
    ERROR_WINHTTP_CONNECTION_ERROR equ (WINHTTP_ERROR_BASE + 30)
    ERROR_WINHTTP_RESEND_REQUEST equ (WINHTTP_ERROR_BASE + 32)
    ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED equ (WINHTTP_ERROR_BASE + 44)
    ; WinHttpRequest Component errors
    ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN equ (WINHTTP_ERROR_BASE + 100)
    ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND equ (WINHTTP_ERROR_BASE + 101)
    ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND equ (WINHTTP_ERROR_BASE + 102)
    ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN equ (WINHTTP_ERROR_BASE + 103)
    ; HTTP API errors
    ERROR_WINHTTP_HEADER_NOT_FOUND equ (WINHTTP_ERROR_BASE + 150)
    ERROR_WINHTTP_INVALID_SERVER_RESPONSE equ (WINHTTP_ERROR_BASE + 152)
    ERROR_WINHTTP_INVALID_HEADER equ (WINHTTP_ERROR_BASE + 153)
    ERROR_WINHTTP_INVALID_QUERY_REQUEST equ (WINHTTP_ERROR_BASE + 154)
    ERROR_WINHTTP_HEADER_ALREADY_EXISTS equ (WINHTTP_ERROR_BASE + 155)
    ERROR_WINHTTP_REDIRECT_FAILED equ (WINHTTP_ERROR_BASE + 156)
    ; additional WinHttp API error codes
    ; additional WinHttp API error codes
    ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR equ (WINHTTP_ERROR_BASE + 178)
    ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT equ (WINHTTP_ERROR_BASE + 166)
    ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT equ (WINHTTP_ERROR_BASE + 167)
    ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE equ (WINHTTP_ERROR_BASE + 176)
    ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR equ (WINHTTP_ERROR_BASE + 177)
    ERROR_WINHTTP_NOT_INITIALIZED equ (WINHTTP_ERROR_BASE + 172)
    ERROR_WINHTTP_SECURE_FAILURE equ (WINHTTP_ERROR_BASE + 175)
    ; Certificate security errors. These are raised only by the WinHttpRequest
    ; component. The WinHTTP Win32 API will return ERROR_WINHTTP_SECURE_FAILE and
    ; provide additional information via the WINHTTP_CALLBACK_STATUS_SECURE_FAILURE
    ; callback notification.
    ERROR_WINHTTP_SECURE_CERT_DATE_INVALID equ (WINHTTP_ERROR_BASE + 37)
    ERROR_WINHTTP_SECURE_CERT_CN_INVALID equ (WINHTTP_ERROR_BASE + 38)
    ERROR_WINHTTP_SECURE_INVALID_CA equ (WINHTTP_ERROR_BASE + 45)
    ERROR_WINHTTP_SECURE_CERT_REV_FAILED equ (WINHTTP_ERROR_BASE + 57)
    ERROR_WINHTTP_SECURE_CHANNEL_ERROR equ (WINHTTP_ERROR_BASE + 157)
    ERROR_WINHTTP_SECURE_INVALID_CERT equ (WINHTTP_ERROR_BASE + 169)
    ERROR_WINHTTP_SECURE_CERT_REVOKED equ (WINHTTP_ERROR_BASE + 170)
    ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE equ (WINHTTP_ERROR_BASE + 179)
    ERROR_WINHTTP_AUTODETECTION_FAILED equ (WINHTTP_ERROR_BASE + 180)
    ERROR_WINHTTP_HEADER_COUNT_EXCEEDED equ (WINHTTP_ERROR_BASE + 181)
    ERROR_WINHTTP_HEADER_SIZE_OVERFLOW equ (WINHTTP_ERROR_BASE + 182)
    ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW equ (WINHTTP_ERROR_BASE + 183)
    ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW equ (WINHTTP_ERROR_BASE + 184)
    ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY equ (WINHTTP_ERROR_BASE + 185)
    ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY equ (WINHTTP_ERROR_BASE + 186)
    ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED_PROXY equ (WINHTTP_ERROR_BASE + 187)
    ERROR_WINHTTP_SECURE_FAILURE_PROXY equ (WINHTTP_ERROR_BASE + 188)
    ERROR_WINHTTP_RESERVED_189 equ (WINHTTP_ERROR_BASE + 189)
    ERROR_WINHTTP_HTTP_PROTOCOL_MISMATCH equ (WINHTTP_ERROR_BASE + 190)
    ERROR_WINHTTP_GLOBAL_CALLBACK_FAILED equ (WINHTTP_ERROR_BASE + 191)
    ERROR_WINHTTP_FEATURE_DISABLED equ (WINHTTP_ERROR_BASE + 192)
    WINHTTP_ERROR_LAST equ <ERROR_WINHTTP_FEATURE_DISABLED>
    WINHTTP_RESET_STATE equ 00000001h
    WINHTTP_RESET_SWPAD_CURRENT_NETWORK equ 00000002h
    WINHTTP_RESET_SWPAD_ALL equ 00000004h
    WINHTTP_RESET_SCRIPT_CACHE equ 00000008h
    WINHTTP_RESET_ALL equ 0000FFFFh
    WINHTTP_RESET_NOTIFY_NETWORK_CHANGED equ 00010000h
    WINHTTP_RESET_OUT_OF_PROC equ 00020000h
    WINHTTP_RESET_DISCARD_RESOLVERS equ 00040000h
    ;#endif // !defined(_WINERROR_)
    ; prototypes
    @DefProto DllImport, WinHttpSetStatusCallback, WIN_STD_CALL_CONV,, <:HINTERNET, :WINHTTP_STATUS_CALLBACK, :DWORD, :DWORD_PTR>, 16
    @DefProto DllImport, WinHttpTimeFromSystemTime, WIN_STD_CALL_CONV,, <:ptr SYSTEMTIME, :LPWSTR>, 8
    ; output string buffer
    @DefProto DllImport, WinHttpTimeToSystemTime, WIN_STD_CALL_CONV,, <:LPCWSTR, :ptr SYSTEMTIME>, 8
    ; output in GMT time
    @DefProto DllImport, WinHttpCrackUrl, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :DWORD, :LPURL_COMPONENTS>, 16
    @DefProto DllImport, WinHttpCreateUrl, WIN_STD_CALL_CONV,, <:LPURL_COMPONENTS, :DWORD, :LPWSTR, :LPDWORD>, 16
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, WinHttpCheckPlatform, WIN_STD_CALL_CONV,, <>, 0
    @DefProto DllImport, WinHttpGetDefaultProxyConfiguration, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_INFO>, 4
    @DefProto DllImport, WinHttpSetDefaultProxyConfiguration, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_INFO>, 4
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    @DefProto DllImport, WinHttpOpen, WIN_STD_CALL_CONV,, <:LPCWSTR, :DWORD, :LPCWSTR, :LPCWSTR, :DWORD>, 20
    @DefProto DllImport, WinHttpCloseHandle, WIN_STD_CALL_CONV,, <:HINTERNET>, 4
    @DefProto DllImport, WinHttpConnect, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCWSTR, :INTERNET_PORT, :DWORD>, 16
    @DefProto DllImport, WinHttpReadData, WIN_STD_CALL_CONV,, <:HINTERNET, :LPVOID, :DWORD, :LPDWORD>, 16
    @DefProto DllImport, WinHttpReadDataEx, WIN_STD_CALL_CONV,, <:HINTERNET, :LPVOID, :DWORD, :LPDWORD, :ULONGLONG, :DWORD, :PVOID>, 28
    @DefProto DllImport, WinHttpWriteData, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCVOID, :DWORD, :LPDWORD>, 16
    @DefProto DllImport, WinHttpQueryDataAvailable, WIN_STD_CALL_CONV,, <:HINTERNET, :LPDWORD>, 8
    @DefProto DllImport, WinHttpQueryOption, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :LPVOID, :LPDWORD>, 16
    @DefProto DllImport, WinHttpSetOption, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :LPVOID, :DWORD>, 16
    @DefProto DllImport, WinHttpSetTimeouts, WIN_STD_CALL_CONV,, <:HINTERNET, :SDWORD, :SDWORD, :SDWORD, :SDWORD>, 20
    ; Session/Request handle.
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, WinHttpIsHostInProxyBypassList, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_INFO, :PCWSTR, :INTERNET_SCHEME, :INTERNET_PORT, :ptr BOOL>, 20
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    ; prototypes
    @DefProto DllImport, WinHttpOpenRequest, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCWSTR, :LPCWSTR, :LPCWSTR, :LPCWSTR, :ptr LPCWSTR, :DWORD>, 28
    @DefProto DllImport, WinHttpAddRequestHeaders, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCWSTR, :DWORD, :DWORD>, 16
    @DefProto DllImport, WinHttpAddRequestHeadersEx, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :ULONGLONG, :ULONGLONG, :DWORD, :ptr WINHTTP_EXTENDED_HEADER>, 24
    @DefProto DllImport, WinHttpSendRequest, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCWSTR, :DWORD, :LPVOID, :DWORD, :DWORD, :DWORD_PTR>, 28
    @DefProto DllImport, WinHttpSetCredentials, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :DWORD, :LPCWSTR, :LPCWSTR, :LPVOID>, 24
    ; NULL if pszUserName is not NULL
    @DefProto DllImport, WinHttpQueryAuthSchemes, WIN_STD_CALL_CONV,, <:HINTERNET, :LPDWORD, :LPDWORD, :LPDWORD>, 16
    ; returns the first auth scheme returned by the server
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, WinHttpQueryAuthParams, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :ptr LPVOID>, 12
    ; Scheme-specific Advanced auth parameters
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    @DefProto DllImport, WinHttpReceiveResponse, WIN_STD_CALL_CONV,, <:HINTERNET, :LPVOID>, 8
    @DefProto DllImport, WinHttpQueryHeaders, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :LPCWSTR, :LPVOID, :LPDWORD, :LPDWORD>, 24
    @DefProto DllImport, WinHttpQueryHeadersEx, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD, :ULONGLONG, :UINT, :PDWORD, :PWINHTTP_HEADER_NAME, :PVOID, :PDWORD, :ptr PWINHTTP_EXTENDED_HEADER, :PDWORD>, 40
    @DefProto DllImport, WinHttpQueryConnectionGroup, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr GUID, :ULONGLONG, :ptr PWINHTTP_QUERY_CONNECTION_GROUP_RESULT>, 16
    @DefProto DllImport, WinHttpFreeQueryConnectionGroupResult, WIN_STD_CALL_CONV,, <:ptr WINHTTP_QUERY_CONNECTION_GROUP_RESULT>, 4
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM)
    @DefProto DllImport, WinHttpDetectAutoProxyConfigUrl, WIN_STD_CALL_CONV,, <:DWORD, :ptr LPWSTR>, 8
    @DefProto DllImport, WinHttpGetProxyForUrl, WIN_STD_CALL_CONV,, <:HINTERNET, :LPCWSTR, :ptr WINHTTP_AUTOPROXY_OPTIONS, :ptr WINHTTP_PROXY_INFO>, 16
    @DefProto DllImport, WinHttpCreateProxyResolver, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr HINTERNET>, 8
    @DefProto DllImport, WinHttpGetProxyForUrlEx, WIN_STD_CALL_CONV,, <:HINTERNET, :PCWSTR, :ptr WINHTTP_AUTOPROXY_OPTIONS, :DWORD_PTR>, 16
    @DefProto DllImport, WinHttpGetProxyForUrlEx2, WIN_STD_CALL_CONV,, <:HINTERNET, :PCWSTR, :ptr WINHTTP_AUTOPROXY_OPTIONS, :DWORD, :ptr BYTE, :DWORD_PTR>, 24
    @DefProto DllImport, WinHttpGetProxyResult, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr WINHTTP_PROXY_RESULT>, 8
    @DefProto DllImport, WinHttpGetProxyResultEx, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr WINHTTP_PROXY_RESULT_EX>, 8
    @DefProto DllImport, WinHttpFreeProxyResult, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_RESULT>, 4
    @DefProto DllImport, WinHttpFreeProxyResultEx, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_RESULT_EX>, 4
    @DefProto DllImport, WinHttpResetAutoProxy, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD>, 8
    @DefProto DllImport, WinHttpGetIEProxyConfigForCurrentUser, WIN_STD_CALL_CONV,, <:ptr WINHTTP_CURRENT_USER_IE_PROXY_CONFIG>, 4
    @DefProto DllImport, WinHttpWriteProxySettings, WIN_STD_CALL_CONV,, <:HINTERNET, :BOOL, :ptr WINHTTP_PROXY_SETTINGS>, 12
    @DefProto DllImport, WinHttpReadProxySettings, WIN_STD_CALL_CONV,, <:HINTERNET, :PCWSTR, :BOOL, :BOOL, :ptr DWORD, :ptr BOOL, :ptr WINHTTP_PROXY_SETTINGS>, 28
    @DefProto DllImport, WinHttpFreeProxySettings, WIN_STD_CALL_CONV,, <:ptr WINHTTP_PROXY_SETTINGS>, 4
    @DefProto DllImport, WinHttpGetProxySettingsVersion, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr DWORD>, 8
    @DefProto DllImport, WinHttpSetProxySettingsPerUser, WIN_STD_CALL_CONV,, <:BOOL>, 4
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) *
  endif
  if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP or WINAPI_PARTITION_SYSTEM or WINAPI_PARTITION_GAMES)
    WINHTTP_WEB_SOCKET_OPERATION typedef SDWORD
    WINHTTP_WEB_SOCKET_SEND_OPERATION equ 0
    WINHTTP_WEB_SOCKET_RECEIVE_OPERATION equ 1
    WINHTTP_WEB_SOCKET_CLOSE_OPERATION equ 2
    WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION equ 3
    _WINHTTP_WEB_SOCKET_OPERATION typedef WINHTTP_WEB_SOCKET_OPERATION

    WINHTTP_WEB_SOCKET_BUFFER_TYPE typedef SDWORD
    WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE equ 0
    WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE equ 1
    WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE equ 2
    WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE equ 3
    WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE equ 4
    _WINHTTP_WEB_SOCKET_BUFFER_TYPE typedef WINHTTP_WEB_SOCKET_BUFFER_TYPE

    WINHTTP_WEB_SOCKET_CLOSE_STATUS typedef SDWORD
    WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS equ 1000
    WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS equ 1001
    WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS equ 1002
    WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS equ 1003
    WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS equ 1005
    WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS equ 1006
    WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS equ 1007
    WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS equ 1008
    WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS equ 1009
    WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS equ 1010
    WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS equ 1011
    WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS equ 1015
    _WINHTTP_WEB_SOCKET_CLOSE_STATUS typedef WINHTTP_WEB_SOCKET_CLOSE_STATUS

    WINHTTP_WEB_SOCKET_ASYNC_RESULT struct
      AsyncResult WINHTTP_ASYNC_RESULT <>
      Operation WINHTTP_WEB_SOCKET_OPERATION ?
    WINHTTP_WEB_SOCKET_ASYNC_RESULT ends
    _WINHTTP_WEB_SOCKET_ASYNC_RESULT typedef WINHTTP_WEB_SOCKET_ASYNC_RESULT
    WINHTTP_WEB_SOCKET_STATUS struct
      dwBytesTransferred DWORD ?
      eBufferType WINHTTP_WEB_SOCKET_BUFFER_TYPE ?
    WINHTTP_WEB_SOCKET_STATUS ends
    _WINHTTP_WEB_SOCKET_STATUS typedef WINHTTP_WEB_SOCKET_STATUS
    WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH equ 123
    WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE equ 15000
    @DefProto DllImport, WinHttpWebSocketCompleteUpgrade, WIN_STD_CALL_CONV,, <:HINTERNET, :DWORD_PTR>, 8
    @DefProto DllImport, WinHttpWebSocketSend, WIN_STD_CALL_CONV,, <:HINTERNET, :WINHTTP_WEB_SOCKET_BUFFER_TYPE, :PVOID, :DWORD>, 16
    @DefProto DllImport, WinHttpWebSocketReceive, WIN_STD_CALL_CONV,, <:HINTERNET, :PVOID, :DWORD, :ptr DWORD, :ptr WINHTTP_WEB_SOCKET_BUFFER_TYPE>, 20
    @DefProto DllImport, WinHttpWebSocketShutdown, WIN_STD_CALL_CONV,, <:HINTERNET, :USHORT, :PVOID, :DWORD>, 16
    @DefProto DllImport, WinHttpWebSocketClose, WIN_STD_CALL_CONV,, <:HINTERNET, :USHORT, :PVOID, :DWORD>, 16
    @DefProto DllImport, WinHttpWebSocketQueryCloseStatus, WIN_STD_CALL_CONV,, <:HINTERNET, :ptr USHORT, :PVOID, :DWORD, :ptr DWORD>, 20
    ; Proxy change notification APIs
    WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE typedef PVOID
    TYPE_WINHTTP_PROXY_CHANGE_CALLBACK typedef proto WIN_STD_CALL_CONV :ULONGLONG, :PVOID
    WINHTTP_PROXY_CHANGE_CALLBACK typedef ptr TYPE_WINHTTP_PROXY_CHANGE_CALLBACK

    WINHTTP_PROXY_NOTIFY_CHANGE equ 0001h
    @DefProto DllImport, WinHttpRegisterProxyChangeNotification, WIN_STD_CALL_CONV,, <:ULONGLONG, :WINHTTP_PROXY_CHANGE_CALLBACK, :PVOID, :ptr WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE>, 16
    @DefProto DllImport, WinHttpUnregisterProxyChangeNotification, WIN_STD_CALL_CONV,, <:WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE>, 4
    ; Extended proxy settings APIs
    WINHTTP_PROXY_SETTINGS_TYPE typedef SDWORD
    WinHttpProxySettingsTypeUnknown equ 0
    WinHttpProxySettingsTypeWsl equ 1
    WinHttpProxySettingsTypeWsa equ 2
    _WINHTTP_PROXY_SETTINGS_TYPE typedef WINHTTP_PROXY_SETTINGS_TYPE
    PWINHTTP_PROXY_SETTINGS_TYPE typedef ptr WINHTTP_PROXY_SETTINGS_TYPE
    WINHTTP_PROXY_SETTINGS_EX struct
      ullGenerationId QWORD ?
      ullFlags QWORD ?
      pcwszAutoconfigUrl PCWSTR ?
      pcwszProxy PCWSTR ?
      pcwszSecureProxy PCWSTR ?
      cProxyBypasses DWORD ?
      rgpcwszProxyBypasses POINTER ?
      dwInterfaceIndex DWORD ?
      pcwszConnectionName PCWSTR ?
    WINHTTP_PROXY_SETTINGS_EX ends
    _WINHTTP_PROXY_SETTINGS_EX typedef WINHTTP_PROXY_SETTINGS_EX
    PWINHTTP_PROXY_SETTINGS_EX typedef ptr WINHTTP_PROXY_SETTINGS_EX
    WINHTTP_PROXY_SETTINGS_PARAM struct
      ullFlags QWORD ?
      pcwszConnectionName PCWSTR ?
      pcwszProbeHost PCWSTR ?
    WINHTTP_PROXY_SETTINGS_PARAM ends
    _WINHTTP_PROXY_SETTINGS_PARAM typedef WINHTTP_PROXY_SETTINGS_PARAM
    PWINHTTP_PROXY_SETTINGS_PARAM typedef ptr WINHTTP_PROXY_SETTINGS_PARAM
    @DefProto DllImport, WinHttpGetProxySettingsEx, WIN_STD_CALL_CONV,, <:HINTERNET, :WINHTTP_PROXY_SETTINGS_TYPE, :PWINHTTP_PROXY_SETTINGS_PARAM, :DWORD_PTR>, 16
    @DefProto DllImport, WinHttpGetProxySettingsResultEx, WIN_STD_CALL_CONV,, <:HINTERNET, :PVOID>, 8
    @DefProto DllImport, WinHttpFreeProxySettingsEx, WIN_STD_CALL_CONV,, <:WINHTTP_PROXY_SETTINGS_TYPE, :PVOID>, 8
    ; Feature IDs for WINHTTP_OPTION_FEATURE_SUPPORTED
    WINHTTP_FEATURE_DISABLE_STREAM_QUEUE equ 1
    WINHTTP_FEATURE_IPV6_FAST_FALLBACK equ 2
    WINHTTP_FEATURE_CONNECTION_STATS_V0 equ 3
    WINHTTP_FEATURE_REQUEST_TIMES equ 4
    WINHTTP_FEATURE_EXPIRE_CONNECTION equ 5
    WINHTTP_FEATURE_DISABLE_SECURE_PROTOCOL_FALLBACK equ 6
    WINHTTP_FEATURE_HTTP_PROTOCOL_REQUIRED equ 7
    WINHTTP_FEATURE_REQUEST_STATS equ 8
    WINHTTP_FEATURE_SERVER_CERT_CHAIN_CONTEXT equ 9
    WINHTTP_FEATURE_CONNECTION_STATS_V1 equ 12
    WINHTTP_FEATURE_SECURITY_INFO equ 13
    WINHTTP_FEATURE_TCP_KEEPALIVE equ 14
    WINHTTP_FEATURE_TCP_FAST_OPEN equ 15
    WINHTTP_FEATURE_TLS_FALSE_START equ 16
    WINHTTP_FEATURE_IGNORE_CERT_REVOCATION_OFFLINE equ 17
    WINHTTP_FEATURE_TLS_PROTOCOL_INSECURE_FALLBACK equ 20
    WINHTTP_FEATURE_STREAM_ERROR_CODE equ 21
    WINHTTP_FEATURE_REQUIRE_STREAM_END equ 22
    WINHTTP_FEATURE_ENABLE_HTTP2_PLUS_CLIENT_CERT equ 23
    WINHTTP_FEATURE_FAILED_CONNECTION_RETRIES equ 24
    WINHTTP_FEATURE_HTTP2_KEEPALIVE equ 26
    WINHTTP_FEATURE_RESOLUTION_HOSTNAME equ 27
    WINHTTP_FEATURE_SET_TOKEN_BINDING equ 28
    WINHTTP_FEATURE_TOKEN_BINDING_PUBLIC_KEY equ 29
    WINHTTP_FEATURE_REFERER_TOKEN_BINDING_HOSTNAME equ 30
    WINHTTP_FEATURE_HTTP2_PLUS_TRANSFER_ENCODING equ 31
    WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG equ 32
    WINHTTP_FEATURE_DISABLE_CERT_CHAIN_BUILDING equ 33
    WINHTTP_FEATURE_BACKGROUND_CONNECTIONS equ 34
    WINHTTP_FEATURE_FIRST_AVAILABLE_CONNECTION equ 35
    WINHTTP_FEATURE_TCP_PRIORITY_STATUS equ 37
    WINHTTP_FEATURE_CONNECTION_GUID equ 38
    WINHTTP_FEATURE_MATCH_CONNECTION_GUID equ 39
    WINHTTP_FEATURE_HTTP2_RECEIVE_WINDOW equ 43
    WINHTTP_FEATURE_IS_FEATURE_SUPPORTED equ 44
    WINHTTP_FEATURE_ADD_REQUEST_HEADERS_EX equ 46
    WINHTTP_FEATURE_SET_PROXY_SETINGS_PER_USER equ 47
    WINHTTP_FEATURE_READ_DATA_EX equ 48
    WINHTTP_FEATURE_QUERY_HEADERS_EX equ 49
    WINHTTP_FEATURE_QUERY_CONNECTION_GROUP equ 50
    WINHTTP_FEATURE_FREE_QUERY_CONNECTION_GROUP_RESULT equ 51
    WINHTTP_FEATURE_SECURITY_FLAG_IGNORE_ALL_CERT_ERRORS equ 52
    WINHTTP_FEATURE_FLAG_SECURE_DEFAULTS equ 53
    WINHTTP_FEATURE_EXTENDED_HEADER_FLAG_UNICODE equ 54
    WINHTTP_FEATURE_QUERY_FLAG_TRAILERS equ 55
    WINHTTP_FEATURE_QUERY_FLAG_WIRE_ENCODING equ 56
    WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT equ 57
    WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE equ 58
    WINHTTP_FEATURE_FLAG_AUTOMATIC_CHUNKING equ 59
    WINHTTP_FEATURE_QUERY_CONNECTION_GROUP_FLAG_INSECURE equ 60
    WINHTTP_FEATURE_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION equ 61
    WINHTTP_FEATURE_QUERY_EX_ALL_HEADERS equ 62
    WINHTTP_FEATURE_READ_DATA_EX_FLAG_FILL_BUFFER equ 63
    WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL equ 64
    WINHTTP_FEATURE_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL equ 65
    WINHTTP_FEATURE_QUIC_STATS equ 66
    WINHTTP_FEATURE_HTTP3_KEEPALIVE equ 69
    WINHTTP_FEATURE_HTTP3_HANDSHAKE_TIMEOUT equ 70
    WINHTTP_FEATURE_HTTP3_INITIAL_RTT equ 71
    WINHTTP_FEATURE_HTTP3_STREAM_ERROR_CODE equ 72
    WINHTTP_FEATURE_REQUEST_ANNOTATION equ 73
    WINHTTP_FEATURE_DISABLE_PROXY_AUTH_SCHEMES equ 74
    WINHTTP_FEATURE_REVERT_IMPERSONATION_SERVER_CERT equ 75
    if Defined(__cplusplus)
      ;[...]
    endif
    ;*
    ;* Return packing to whatever it was before we
    ;* entered this file
    ;*
    include poppack.inc
    ;* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) *
  endif
endif
; !defined(_WINHTTPX_)
